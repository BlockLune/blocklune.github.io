<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fish Pond | 鱼塘</title>
  <icon>https://www.gravatar.com/avatar/65233dcd93f531e621655079baafb857</icon>
  <subtitle>鱼塘</subtitle>
  <link href="http://blocklune.github.io/atom.xml" rel="self"/>
  
  <link href="http://blocklune.github.io/"/>
  <updated>2023-01-13T02:38:23.768Z</updated>
  <id>http://blocklune.github.io/</id>
  
  <author>
    <name>BlockLune</name>
    <email>blocklune@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VS Code 中设置显示最大列数边界线</title>
    <link href="http://blocklune.github.io/posts/bb929dc9.html"/>
    <id>http://blocklune.github.io/posts/bb929dc9.html</id>
    <published>2023-01-13T02:30:04.000Z</published>
    <updated>2023-01-13T02:38:23.768Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候我们会避免一行代码过长，常见的限制有 80 字符、120 个字符等。我希望能在 VS Code 中显示一条边界线来提醒我已经到达这个限制了，需要换行。下边是设置的方法。</p><span id="more"></span><p>打开设置（快捷键 <code>Ctrl+,</code>），搜索 <code>Editor: Rulers</code>，点击 “在 settings.json” 中编辑，添加如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;editor.rulers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">80</span><span class="punctuation">,</span><span class="number">120</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>当然你也可以按照自己的喜好设置字符数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很多时候我们会避免一行代码过长，常见的限制有 80 字符、120 个字符等。我希望能在 VS Code 中显示一条边界线来提醒我已经到达这个限制了，需要换行。下边是设置的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="VS Code" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/VS-Code/"/>
    
    
    <category term="已解决" scheme="http://blocklune.github.io/tags/%E5%B7%B2%E8%A7%A3%E5%86%B3/"/>
    
    <category term="教程" scheme="http://blocklune.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="VS Code" scheme="http://blocklune.github.io/tags/VS-Code/"/>
    
    <category term="解决方案" scheme="http://blocklune.github.io/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>C 语言文件操作</title>
    <link href="http://blocklune.github.io/posts/914118ff.html"/>
    <id>http://blocklune.github.io/posts/914118ff.html</id>
    <published>2023-01-12T06:53:51.000Z</published>
    <updated>2023-01-12T06:55:14.542Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录一下 C 语言的文件操作的相关内容。</p><span id="more"></span><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stdio.h 提供了 C 语言中的许多 IO，当然包括文件 IO</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 定义文件指针</span></span><br><span class="line">FILE *fp;</span><br></pre></td></tr></table></figure><h2 id="打开文件-fopen"><a href="#打开文件-fopen" class="headerlink" title="打开文件 fopen()"></a>打开文件 fopen()</h2><article class="message is-info">        <div class="message-header"><p>fopen() 函数</p></div>        <div class="message-body">            <p>函数名称：fopen<br>参数：待打开文件的名称（包含该文件名的字符串地址），打开文件的模式；<br>返回值：成功打开文件则返回一个文件指针，否则返回空指针（NULL）</p>        </div>    </article><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br><span class="line"><span class="keyword">if</span> (fp = fopen(<span class="string">&quot;example.file&quot;</span>, <span class="string">&quot;r&quot;</span>) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Fail to open the file.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意，该函数第二个参数是一个字符串，可能的值如下（表来自《C Primer Plus（第 6 版）中文版》P357 表 13.1）：</p><table><thead><tr><th>模式字符串</th><th>含义</th></tr></thead><tbody><tr><td>“r”</td><td>以读模式打开文件</td></tr><tr><td>“w”</td><td>以写模式打开文件，把现有文件长度截为 0，如果文件不存在，则创建一个新文件</td></tr><tr><td>“a”</td><td>以写模式打开文件，在现有文件末尾添加内容，如果文件不存在，则创建一个新文件</td></tr><tr><td>“r+”</td><td>以更新模式打开文件（即可以读写文件）</td></tr><tr><td>“w+”</td><td>以更新模式打开文件，如果文件存在，则将其长度截为 0，如果文件不存在则创建一个新文件</td></tr><tr><td>“a+”</td><td>以更新模式打开文件，在现有文件的末尾添加内容，如果文件不存在则创建一个新文件，<strong>可以读整个文件，但只能从末尾添加内容</strong></td></tr><tr><td>“rb”、”wb”、”ab”、”rb+”、”r+b”、”wb+”、”w+b”、”ab+”、”a+b”</td><td>与上边的对应类似，但以二进制模式打开文件</td></tr><tr><td>“wx”、”wbx”、”w+x”、”wb+x”或”w+bx”</td><td>（C11）与上边对应类似，但如果文件已存在或以独占模式打开文件，则打开文件失败</td></tr></tbody></table><p>带字母 x 的写模式比以前的具有更多特性：</p><ol><li>如果以传统的一种写模式打开一个现有文件，fopen() 会把该文件的长度截为 0，这样就丢失了该文件的内容。但是使用带 x 字母的写模式，即使 fopen() 操作失败，原文件的内容也不会被删除；</li><li>如果环境允许，x 模式的独占特性使得其他程序或线程无法访问正在被打开的文件。</li></ol><h2 id="关闭文件-fclose"><a href="#关闭文件-fclose" class="headerlink" title="关闭文件 fclose()"></a>关闭文件 fclose()</h2><article class="message is-info">        <div class="message-header"><p>fclose() 函数</p></div>        <div class="message-body">            <p>函数名称：fclose<br>参数：待关闭文件的名称（包含该文件名的字符串地址）；<br>返回值：成功关闭返回 0，否则返回 EOF。</p>        </div>    </article><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>注意区分 fopen() 和 fclose() 的返回值！前者失败时返回 NULL（通常情况下就是 0），后者成功时返回 0。</div></article><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><h3 id="fprintf-和-fscanf"><a href="#fprintf-和-fscanf" class="headerlink" title="fprintf() 和 fscanf()"></a>fprintf() 和 fscanf()</h3><p>这两个函数分别和 printf() 和 scanf() 类似，只不过 printf() 和 scanf() 分别默认了写和读的标准文件是 stdout 和 stdin，而 fprintf() 和 fscanf() 的第一个参数都需要指定文件指针。</p><h3 id="getc-和-putc"><a href="#getc-和-putc" class="headerlink" title="getc() 和 putc()"></a>getc() 和 putc()</h3><p>这两个函数分别和 getchar() 和 putchar() 类似，只是需要提供文件指针。</p><h3 id="ungetc"><a href="#ungetc" class="headerlink" title="ungetc()"></a>ungetc()</h3><article class="message is-info">        <div class="message-header"><p>ungetc() 函数</p></div>        <div class="message-body">            <p>函数名称：ungetc<br>函数原型：<code>int ungetc(int c, FILE *fp);</code><br>函数作用：把 c 指定的字符放回输入流中<br>返回值：如果成功，则返回被推入的字符，否则返回 EOF</p>        </div>    </article><h3 id="fgets-和-fputs"><a href="#fgets-和-fputs" class="headerlink" title="fgets() 和 fputs()"></a>fgets() 和 fputs()</h3><p>虽然这两个函数也分别类似于 gets() 和 puts()，但比起上边几个函数的”类似”，这个要低一点，所以详细说明一下。</p><article class="message is-info">        <div class="message-header"><p>fgets() 函数</p></div>        <div class="message-body">            <p>函数名称：fgets<br>函数原型：<code>char *fgets (char * restrict str, int n, FILE * restrict fp);</code><br>返回值：如果成功，该函数返回相同的 str 参数。如果到达文件末尾或者没有读取到任何字符，str 的内容保持不变，并返回一个空指针。如果发生错误，返回一个空指针。</p>        </div>    </article><p>需要注意 fgets() 的第二个参数，因为 fgets() 读取输入知道第一个换行符的后边（<strong>意味着它会读入换行符</strong>），或读到文件结尾，或读取 n-1 个字符，并在结尾加上一个 <code>\0</code> 使之成为一个字符串。</p><article class="message is-info">        <div class="message-header"><p>fputs() 函数</p></div>        <div class="message-body">            <p>函数名称：fputs<br>函数原型：<code>int fputs (char * restrict str, FILE * restrict fp);</code><br>返回值：该函数返回一个非负值，如果发生错误则返回 EOF。</p>        </div>    </article><p>fputs() 与 puts() 类似，但<strong>不会在结尾自动添加换行</strong>。</p><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>注意区分 fgets() 与 gets()， fputs() 与 puts()！gets() 不保留换行符所以 puts() 自动添加换行符；fgets() 保留换行符所以 fputs() 不会添加换行符。</div></article><h3 id="fread-和-fwrite"><a href="#fread-和-fwrite" class="headerlink" title="fread() 和 fwrite()"></a>fread() 和 fwrite()</h3><p>上述的函数都是以文本形式读写文件，这两个函数用于以二进制形式读写文件。</p><article class="message is-info">        <div class="message-header"><p>fread() 函数</p></div>        <div class="message-body">            <p>函数名称：fread<br>函数原型：<code>size_t fread(void * restrict ptr, size_t size, size_t nmemb, FILE * restrict fp);</code><br>返回值：返回成功读取项的数量。正常情况下返回值等于 nmemb，发生错误则返回值小于 nmemb。</p>        </div>    </article><article class="message is-info">        <div class="message-header"><p>fwrite() 函数</p></div>        <div class="message-body">            <p>函数名称：fwrite<br>函数原型：<code>size_t fwrite(const void * restrict ptr, size_t size, size_t nmemb, FILE * restrict fp);</code><br>返回值：返回成功写入项的数量。正常情况下返回值等于 nmemb，发生错误则返回值小于 nmemb。</p>        </div>    </article><p>参数 size 表示待写入数据块的大小（以字节为单位），nmemb 表示待写入数据块的数量。</p><p>下边是两个使用这两个函数的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存一个大小为 256 字节的 buffer 数组</span></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">fwrite(buffer, <span class="number">256</span>, <span class="number">1</span>, fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存一个内含 10 个 double 类型值的数组</span></span><br><span class="line"><span class="comment">// 或者说理解成保存 10 个 double 类型的值</span></span><br><span class="line"><span class="type">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fwrite(earnings, <span class="keyword">sizeof</span>(<span class="type">double</span>), <span class="number">10</span>, fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 10 个 double 类型的值到一个数组中</span></span><br><span class="line"><span class="type">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fread(earnings, <span class="keyword">sizeof</span>(<span class="type">double</span>), <span class="number">10</span>, fp);</span><br></pre></td></tr></table></figure><h2 id="随机访问-fseek-和-ftell"><a href="#随机访问-fseek-和-ftell" class="headerlink" title="随机访问 fseek() 和 ftell()"></a>随机访问 fseek() 和 ftell()</h2><article class="message is-info">        <div class="message-header"><p>fseek() 函数</p></div>        <div class="message-body">            <p>函数名称：fseek<br>函数原型：<code>int fseek(FILE *_File,long _Offset,int _Origin);</code><br>参数：文件指针，偏移量(long 类型)，模式<br>返回值：正常则返回 0，错误则返回 -1。</p>        </div>    </article><p>第二个参数偏移量必须是一个 long 类型的值，代表偏移的<strong>字节数</strong>。这个值为正，则表示像文件末尾方向移动；为负则表示向文件开头处。<br>第三个参数可以理解成起点位置，可以使用 <code>SEEK_SET</code>、<code>SEEK_CUR</code> 或 <code>SEEK_END</code> 分别定位到文件开始、当前位置或文件末尾（老版本应分别使用 <code>0</code>、<code>1</code>、<code>2</code>）。</p><p>下边是一些例子（来自《C Primer Plus（第 6 版）中文版》P364）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp, <span class="number">0L</span>, SEEK_SET);   <span class="comment">// 定位至文件开始处</span></span><br><span class="line">fseek(fp, <span class="number">10L</span>, SEEK_SET);  <span class="comment">// 定位至文件中第 10 个字节</span></span><br><span class="line">fseek(fp, <span class="number">2L</span>, SEEK_CUR);   <span class="comment">// 从文件当前位置向结尾方向移动 2 个字节</span></span><br><span class="line">fseek(fp, <span class="number">0L</span>, SEEK_END);   <span class="comment">// 定位至文件末尾</span></span><br><span class="line">fseek(fp, <span class="number">-10L</span>, SEEK_END); <span class="comment">// 从文件结尾处回退 10 个字节</span></span><br></pre></td></tr></table></figure><article class="message is-info">        <div class="message-header"><p>ftell() 函数</p></div>        <div class="message-body">            <p>函数名称：ftell<br>函数原型：<code>long ftell(FILE *_File);</code><br>返回值：返回当前位置距文件开始的字节数，如文件的第一个字节到文件开始处的距离为 0。</p>        </div>    </article><p>下边是书中给出的一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp, <span class="number">0L</span>, SEEK_END); <span class="comment">// 首先定位到文件结尾</span></span><br><span class="line">last = ftell(fp);        <span class="comment">// 统计字节数，并存储到 last 中</span></span><br><span class="line"><span class="comment">// 逆序打印每一个字节的字符</span></span><br><span class="line"><span class="keyword">for</span> (count = <span class="number">1L</span>; count &lt;= last; count++)</span><br><span class="line">&#123;</span><br><span class="line">    fseek(fp, -count, SEEK_END);</span><br><span class="line">    ch = getc(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><h3 id="刷新缓冲区-fflush"><a href="#刷新缓冲区-fflush" class="headerlink" title="刷新缓冲区 fflush()"></a>刷新缓冲区 fflush()</h3><article class="message is-info">        <div class="message-header"><p>fflush() 函数</p></div>        <div class="message-body">            <p>函数名称：fflush<br>函数原型：<code>int fflush(FILE *fp);</code><br>函数作用：调用该函数将刷新缓冲区，即将输出缓冲区中所有的未写入数据被发送到 fp 指定的输出文件。如果 fp 为空指针，所有输出缓冲区都被刷新。<br>返回值：成功返回 0，错误返回 EOF。</p>        </div>    </article><h3 id="创建替换使用缓冲区-setvbuf"><a href="#创建替换使用缓冲区-setvbuf" class="headerlink" title="创建替换使用缓冲区 setvbuf()"></a>创建替换使用缓冲区 setvbuf()</h3><article class="message is-info">        <div class="message-header"><p>setvbuf() 函数</p></div>        <div class="message-body">            <p>函数名称：setvbuf<br>函数原型：<code>int setvbuf(FILE * restrict fp, char * restrict buf, int mode, size_t size);</code><br>返回值：成功返回 0，否则返回非零值。</p>        </div>    </article><p>第二个参数指向待使用的缓冲区。如果是 NULL，则自动分配。<br>第三个参数为模式，有下边几种：</p><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">_IOFBF</td><td align="left"><strong>全缓冲</strong>：对于输出，数据在缓冲填满时被一次性写入。对于输入，缓冲会在请求输入且缓冲为空时被填充。</td></tr><tr><td align="left">_IOLBF</td><td align="left"><strong>行缓冲</strong>：对于输出，数据在遇到换行符或者在缓冲填满时被写入，具体视情况而定。对于输入，缓冲会在请求输入且缓冲为空时被填充，直到遇到下一个换行符。</td></tr><tr><td align="left">_IONBF</td><td align="left"><strong>无缓冲</strong>：不使用缓冲。每个 I&#x2F;O 操作都被即时写入。buffer 和 size 参数被忽略。</td></tr></tbody></table><h3 id="feof-和-ferror"><a href="#feof-和-ferror" class="headerlink" title="feof() 和 ferror()"></a>feof() 和 ferror()</h3><p>当上一次输入调用检测到文件结尾时，feof() 函数返回一个非零值，否则返回 0。<br>当读写出现错误，ferror() 函数返回一个非零值，否则返回 0。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记录一下 C 语言的文件操作的相关内容。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="文件" scheme="http://blocklune.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>error: summary string parsing error 错误解决方法</title>
    <link href="http://blocklune.github.io/posts/78dc947f.html"/>
    <id>http://blocklune.github.io/posts/78dc947f.html</id>
    <published>2023-01-11T04:34:16.000Z</published>
    <updated>2023-01-11T04:34:46.333Z</updated>
    
    <content type="html"><![CDATA[<p>直接先说解决方法：在使用 clang 工具链进行编译的时候，添加编译选项 <code>-fstandalone-debug</code>。</p><span id="more"></span><p>下边是完整的发现及解决问题的过程。</p><h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>在按照 <a href="https://www.bilibili.com/video/BV1sW411v7VZ">《使用 VS Code + Clangd + CMake 搭建 C&#x2F;C++ 开发环境》</a> 搭建我在 ArchWSL 内的 C&#x2F;C++ 开发环境时，我创建了一个用于测试的 HelloWorld 工程。这个工程的文件结构长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── .clang-format</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── main.cpp</span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @file CMakeLists.txt</span></span><br><span class="line"><span class="comment"># old</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(HelloWorld)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(HelloWorld main.cpp)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @file main.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    std::string str = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试的时候发现，int 型变量 a 是可以查看的，但 std::string 型的变量 str 却显示 <code>error: summary string parsing error</code> 错误。</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>在测试中我发现，这个问题只在我使用 clang 工具链编译时产生，使用 g++ 就没有这个问题，所以猜测不是 lldb 调试器的问题，而是 clang 编译器的问题。</p><p>在网上搜索到了类似的问题：</p><ul><li><a href="https://cloud.tencent.com/developer/ask/sof/1542916">无法在 lldb 中检查 std::string 变量 - 问答 - 腾讯云开发者社区</a></li><li><a href="https://github.com/vadimcn/vscode-lldb/issues/415">Cannot inspect any strings · Issue #415 · vadimcn&#x2F;vscode-lldb</a></li></ul><p>都说要使用 <code>-fstandalone-debug</code> 重新编译。</p><p>于是修改 CMakeLists.txt 为：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @file CMakeLists.txt</span></span><br><span class="line"><span class="comment"># new</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(HelloWorld)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用的是 clang 工具链，那么需要添加上 -fstandalone-debug，否则 lldb 无法查看 std::string 的东东</span></span><br><span class="line"><span class="comment"># 见 https://cloud.tencent.com/developer/ask/sof/1542916</span></span><br><span class="line"><span class="comment"># 又见 https://github.com/vadimcn/vscode-lldb/issues/415</span></span><br><span class="line"><span class="keyword">add_compile_options</span>(-fstandalone-debug)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;optional: -fstandalone-debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(HelloWorld main.cpp)</span><br></pre></td></tr></table></figure><p>至此成功解决。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;直接先说解决方法：在使用 clang 工具链进行编译的时候，添加编译选项 &lt;code&gt;-fstandalone-debug&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="调试" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%B0%83%E8%AF%95/"/>
    
    <category term="LLDB" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%B0%83%E8%AF%95/LLDB/"/>
    
    
    <category term="已解决" scheme="http://blocklune.github.io/tags/%E5%B7%B2%E8%A7%A3%E5%86%B3/"/>
    
    <category term="错误" scheme="http://blocklune.github.io/tags/%E9%94%99%E8%AF%AF/"/>
    
    <category term="解决方案" scheme="http://blocklune.github.io/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    <category term="调试" scheme="http://blocklune.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
    <category term="LLDB" scheme="http://blocklune.github.io/tags/LLDB/"/>
    
    <category term="LLVM" scheme="http://blocklune.github.io/tags/LLVM/"/>
    
    <category term="Clang" scheme="http://blocklune.github.io/tags/Clang/"/>
    
  </entry>
  
  <entry>
    <title>Makefile 简单笔记</title>
    <link href="http://blocklune.github.io/posts/b5f1b38d.html"/>
    <id>http://blocklune.github.io/posts/b5f1b38d.html</id>
    <published>2023-01-08T02:52:48.000Z</published>
    <updated>2023-01-09T06:40:11.189Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇笔记，原视频是 <a href="https://space.bilibili.com/519963684">@于仕琪</a> 老师的 <a href="https://www.bilibili.com/video/BV188411L7d2">《Makefile 20 分钟入门，简简单单，展示如何使用 Makefile 管理和编译 C++ 代码》</a>。</p><span id="more"></span><h2 id="老师所给的四个版本"><a href="#老师所给的四个版本" class="headerlink" title="老师所给的四个版本"></a>老师所给的四个版本</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本一</span></span><br><span class="line"><span class="section">hello: main.cpp printhello.cpp factorial.cpp</span></span><br><span class="line">    g++ -o hello main.cpp printhello.cpp factorial.cpp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版本二</span></span><br><span class="line">CXX = g++</span><br><span class="line">TARGET = hello</span><br><span class="line">OBJ = main.o printhello.o factorial.o</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJ)</span></span><br><span class="line">    <span class="variable">$(CXX)</span> -o <span class="variable">$(TARGET)</span> <span class="variable">$(OBJ)</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.cpp</span></span><br><span class="line">    <span class="variable">$(CXX)</span> -c main.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">printhello.o: printhello.cpp</span></span><br><span class="line">    <span class="variable">$(CXX)</span> -c printhello.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">factorial.o: factorial.cpp</span></span><br><span class="line">    <span class="variable">$(CXX)</span> -c factorial.cpp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版本三</span></span><br><span class="line">CXX = g++</span><br><span class="line">TARGET = hello</span><br><span class="line">OBJ = main.o printhello.o factorial.o</span><br><span class="line"></span><br><span class="line">CXXFLAGS = -c -Wall</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJ)</span></span><br><span class="line">    <span class="variable">$(CXX)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.cpp</span></span><br><span class="line">    <span class="variable">$(CXX)</span> <span class="variable">$(CXXFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f *.o <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版本四</span></span><br><span class="line">CXX = g++</span><br><span class="line">TARGET = hello</span><br><span class="line">SRC = <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">OBJ = <span class="variable">$(<span class="built_in">patsubst</span> %.cpp, %.o, <span class="variable">$(SRC)</span>)</span></span><br><span class="line"></span><br><span class="line">CXXFLAGS = -c -Wall</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJ)</span></span><br><span class="line">    <span class="variable">$(CXX)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.cpp</span></span><br><span class="line">    <span class="variable">$(CXX)</span> <span class="variable">$(CXXFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f *.o <span class="variable">$(TARGET)</span></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>首先是关于 g++ 这个 C++ 编译器的一些知识点。</p><ul><li><code>-c</code> 参数表示生成 obj 文件（<code>*.o</code>）；</li><li><code>-o</code> 用于指定生成的可执行文件的名称，比如上边 <code>-o hello</code> 就表示生成的可执行文件叫 hello；</li><li><code>-Wall</code> 表示 Warning all，也就是打开全部的警告。</li></ul><p>接着是 Makefile 文件的大致原理。</p><p>首先看最易理解的版本一。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">hello: main.cpp printhello.cpp factorial.cpp</span></span><br><span class="line">    g++ -o hello main.cpp printhello.cpp factorial.cpp</span><br></pre></td></tr></table></figure><p>第一行冒号前的部分表示我们需要的文件（这里是 <code>hello</code>），冒号后表示冒号前文件的依赖项（这里是三个 <code>.cpp</code> 文件），第二行表示为了生成冒号前的文件，需要执行什么命令。Make 工具通过检测冒号后文件的时间戳是否比冒号前文件更新来判断是否要执行第二行语句。</p><p>在第二个版本中，引入了变量的概念。形似 <code>XXX = YYY</code> 的东西就是在给变量赋值，使用 <code>$(XXX)</code> 来取得值 <code>YYY</code>。</p><p>第三个版本中出现了 <code>$@</code>、<code>$^</code>、<code>$&lt;</code> 等符号，他们分别表示冒号前面的内容、冒号后边的全部内容和冒号后边第一个内容。</p><p>第三个版本中的 <code>.PHONY: clean</code> 标识了 <code>clean</code> 是个命令而不是一个文件，这样结合下边的 <code>clean:</code> 的内容，就可以实现直接在终端输入 <code>make clean</code> 来执行 <code>rm -f *.o $(TARGET)</code> 的命令，清空生成出来的文件。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一篇笔记，原视频是 &lt;a href=&quot;https://space.bilibili.com/519963684&quot;&gt;@于仕琪&lt;/a&gt; 老师的 &lt;a href=&quot;https://www.bilibili.com/video/BV188411L7d2&quot;&gt;《Makefile 20 分钟入门，简简单单，展示如何使用 Makefile 管理和编译 C++ 代码》&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="编译链接" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5/"/>
    
    <category term="GNU Make" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5/GNU-Make/"/>
    
    
    <category term="编译链接" scheme="http://blocklune.github.io/tags/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5/"/>
    
    <category term="Makefile" scheme="http://blocklune.github.io/tags/Makefile/"/>
    
    <category term="GNU Make" scheme="http://blocklune.github.io/tags/GNU-Make/"/>
    
  </entry>
  
  <entry>
    <title>C 标准库中 qsort 和 C++ STL 中 sort 的用法</title>
    <link href="http://blocklune.github.io/posts/eab95d6e.html"/>
    <id>http://blocklune.github.io/posts/eab95d6e.html</id>
    <published>2022-12-08T13:41:18.000Z</published>
    <updated>2022-12-08T15:01:34.118Z</updated>
    
    <content type="html"><![CDATA[<p>虽然到现在还是不能完全理解 <code>qsort</code> 和 <code>sort</code> 这两个函数的底层原理，但至少，先学会如何使用吧。</p><span id="more"></span><h2 id="qsort"><a href="#qsort" class="headerlink" title="qsort"></a>qsort</h2><p><strong>需要包含的库:</strong></p><p>stdlib.h (C++ 中 是 cstdlib)</p><p><strong>函数原型：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">void</span> *base, <span class="type">size_t</span> nitems, <span class="type">size_t</span> size, <span class="type">int</span> (*compar)(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *))</span></span><br></pre></td></tr></table></figure><p><strong>参数解释：</strong></p><ul><li>base: 必选，数组名（数组首元素的地址）；</li><li>nitems: 必选，数组中元素的个数；</li><li>size: 必选，数组中单个元素的大小；</li><li>compar: 必选，一个函数指针，具体这个函数要干嘛下边细说。</li></ul><p>最后一个参数是函数指针，这个指针指向的函数的原型应该类似于下边这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span>;</span><br></pre></td></tr></table></figure><p>这是一个返回值为 <code>-1</code>、<code>0</code> 或 <code>1</code> 的函数。</p><p>如果要实现升序，那么应该是：</p><blockquote><p>a&gt;b：返回 1（或其他正数）;<br>a&#x3D;&#x3D;b：返回 0;<br>a&lt;b: 返回 -1（或其他负数）;</p></blockquote><p>如果是降序，那么就应该反过来，像下边这样：</p><blockquote><p>a&gt;b：返回 -1（或其他负数）;<br>a&#x3D;&#x3D;b：返回 0;<br>a&lt;b: 返回 1（或其他正数）;</p></blockquote><p>比如我要对 int 类型的数组升序排序，那么我的 cmp 函数应该像下边这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *x = (<span class="type">const</span> <span class="type">int</span> *)a;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *y = (<span class="type">const</span> <span class="type">int</span> *)b;</span><br><span class="line">    <span class="keyword">if</span> (*x &gt; *y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*x == *y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者也可以简化成下边这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="type">const</span> <span class="type">int</span> *)a - *(<span class="type">const</span> <span class="type">int</span> *)b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 a&gt;b 等比较方式只是形式上我这么写，实际上有可能这两个元素我并不能直接这么比（比如如果这里的 a、b 都是 struct），那么就应该类似下边这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ID;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> score;</span><br><span class="line">&#125; STUDENT;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    STUDENT stu[<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">5</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">1</span>&#125;, &#123;<span class="number">4</span>, <span class="number">2</span>&#125;, &#123;<span class="number">5</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line">    qsort(stu, <span class="number">5</span>, <span class="keyword">sizeof</span>(STUDENT), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID: %u, Score: %u\n&quot;</span>, stu[i].ID, stu[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> STUDENT *x = (<span class="type">const</span> STUDENT *)a;</span><br><span class="line">    <span class="type">const</span> STUDENT *y = (<span class="type">const</span> STUDENT *)b;</span><br><span class="line">    <span class="comment">// 降序排序</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;score &gt; y-&gt;score)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;score == y-&gt;score)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ID: 1, Score: 5</span><br><span class="line">ID: 5, Score: 4</span><br><span class="line">ID: 2, Score: 3</span><br><span class="line">ID: 4, Score: 2</span><br><span class="line">ID: 3, Score: 1</span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><strong>需要包含的库:</strong></p><p>algorithm（C++ STL 中的算法库）</p><p><strong>函数原型：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title class_">Compare</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span> <span class="params">(RandomAccessIterator first, RandomAccessIterator last, Compare comp)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>参数解释：</strong></p><p>first: 必选，排序开始处（参与排序的第一个元素）；<br>last: 必选，排序结束处的<strong>后一个紧挨着的位置</strong>（参与排序的最后一个元素的<strong>后一个位置</strong>）；<br>comp: 可选，用来指定怎么排序的函数，没有的话如果可以默认升序。</p><p>下边给出一些例子：</p><p>给一个数组升序排序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(arr, arr + <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>给一个 vector 降序排序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br></pre></td></tr></table></figure><p>这里用了 <code>greater&lt;typename&gt;()</code> 这个东东直接表达我这个排序需要降序排序，类似的还有 <code>less&lt;typename&gt;()</code> 用来指定升序。</p><p>然后是自定义这第三个参数，我们就用上边 qsort 那个例子吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">STUDENT</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ID;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(STUDENT, STUDENT)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STUDENT stu[<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">5</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">1</span>&#125;, &#123;<span class="number">4</span>, <span class="number">2</span>&#125;, &#123;<span class="number">5</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(stu, stu + <span class="number">5</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID: %u, Score: %u\n&quot;</span>, stu[i].ID, stu[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(STUDENT a, STUDENT b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.score &gt; b.score)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者也可以把 cmp 写成下边这种更容易记住的方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(STUDENT a, STUDENT b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.score &gt; b.score;</span><br><span class="line">    <span class="comment">// 表示排序完成后前一个元素比后一个元素大，即降序排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出和上边是一样的。</p><article class="message message-immersive is-danger"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i><strong>注意</strong><p>在 qsort 中，最后一个参数的函数的返回值应是一个有符号整型。在期望<strong>升序</strong>排序时，这个返回值应该指定为：<strong>第一个元素大于第二个元素，返回正数；</strong>第一个元素等于第二个元素，返回 0；第一个元素小于第二个元素，返回负数。</p><p>在 C++ STL 的 sort 中，最后一个参数的返回值应是一个布尔值。在期望<strong>升序</strong>排序时，这个返回值应该是 (第一个元素 &lt; 第二个元素) 的运算结果。</p></div></article>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然到现在还是不能完全理解 &lt;code&gt;qsort&lt;/code&gt; 和 &lt;code&gt;sort&lt;/code&gt; 这两个函数的底层原理，但至少，先学会如何使用吧。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="排序" scheme="http://blocklune.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="STL" scheme="http://blocklune.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>求解最大公约数的四种算法</title>
    <link href="http://blocklune.github.io/posts/504f038d.html"/>
    <id>http://blocklune.github.io/posts/504f038d.html</id>
    <published>2022-12-04T11:37:17.000Z</published>
    <updated>2023-01-08T03:04:05.044Z</updated>
    
    <content type="html"><![CDATA[<p>这是一次计算机导论课的作业。本来对于最大公约数的求解算法，我就只知道一个<strong>辗转相除法</strong>。原来，其实还有别的一些 …</p><span id="more"></span><h2 id="法一试除法穷举法"><a href="#法一：试除法（穷举法）" class="headerlink" title="法一：试除法（穷举法）"></a>法一：试除法（穷举法）</h2><p>也许这应该才是最先能想到的算法——两个数中取小的那个，由大到小穷举这个数的所有因数，并且看看这个数是不是另一个数的因数，如果是，那这个数就是这两个数的最大公约数了。</p><h3 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1. 时间复杂度"></a>1. 时间复杂度</h3><p>$O(min(a,b))$</p><h3 id="1-自然语言描述"><a href="#1-自然语言描述" class="headerlink" title="1. 自然语言描述"></a>1. 自然语言描述</h3><ol><li>定义变量 $a,b$，用于存放两个待求取最大公约数的值，确保 $a\leq b$；</li><li>定义变量 $i&#x3D;a$；</li><li>如果 $i\geq1$，执行步骤 4；</li><li>判断 $i$ 是否是 $a$ 的因数，如果是，执行步骤 5，否则，执行步骤 7；</li><li>判断 $i$ 是否是 $b$ 的因数，如果是，执行步骤 6，否则，执行步骤 7；</li><li>跳出循环，$i$ 就是 $a$ 和 $b$ 的最大公约数；</li><li>$i$ 自减 $1$，执行步骤 3；</li></ol><h3 id="1-伪代码描述"><a href="#1-伪代码描述" class="headerlink" title="1. 伪代码描述"></a>1. 伪代码描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var a,b,i:integer;</span><br><span class="line">input(a);</span><br><span class="line">input(b);</span><br><span class="line">Begin</span><br><span class="line">For i&lt;-a to 1 do</span><br><span class="line">Begin</span><br><span class="line">If a%i==0 Then</span><br><span class="line">    If b%i==0 Then</span><br><span class="line">    Begin</span><br><span class="line">    print(i);</span><br><span class="line">    break;</span><br><span class="line">    End;</span><br><span class="line">End;</span><br><span class="line">End;</span><br></pre></td></tr></table></figure><h3 id="1-流程图"><a href="#1-流程图" class="headerlink" title="1. 流程图"></a>1. 流程图</h3><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/12/05/zy8vhn.png" alt="Powered by draw.io"></p><h3 id="1-c-代码"><a href="#1-C-代码" class="headerlink" title="1. C++ 代码"></a>1. C++ 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (b % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="法二辗转相除法欧几里得算法"><a href="#法二：辗转相除法（欧几里得算法）" class="headerlink" title="法二：辗转相除法（欧几里得算法）"></a>法二：辗转相除法（欧几里得算法）</h2><p>这大概是最常见的计算最大公约数的算法了吧…</p><h3 id="2-时间复杂度"><a href="#2-时间复杂度" class="headerlink" title="2. 时间复杂度"></a>2. 时间复杂度</h3><p>可近似看作 $O(log(max(a,b)))$，但取模运算性能较差。</p><h3 id="2-自然语言描述"><a href="#2-自然语言描述" class="headerlink" title="2. 自然语言描述"></a>2. 自然语言描述</h3><ol><li>定义变量 a，b 并读入；</li><li>如果 b &#x3D;&#x3D; 0，返回 a；</li><li>否则，更新 a 的值为原来 b 的值，更新 b 的值为原来 a%b 的值，回到步骤 2。</li></ol><h3 id="2-伪代码描述"><a href="#2-伪代码描述" class="headerlink" title="2. 伪代码描述"></a>2. 伪代码描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a,b:integer;</span><br><span class="line">def gcd(a,b):</span><br><span class="line">Begin</span><br><span class="line">If b==0 Then</span><br><span class="line">    return a;</span><br><span class="line">    Else return(gcd(b, a%b));</span><br><span class="line">End;</span><br></pre></td></tr></table></figure><h3 id="2-流程图"><a href="#2-流程图" class="headerlink" title="2. 流程图"></a>2. 流程图</h3><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/12/05/zyNCG9.png" alt="Powered by draw.io"></p><h3 id="2-c-代码"><a href="#2-C-代码" class="headerlink" title="2. C++ 代码"></a>2. C++ 代码</h3><p>主函数及 gcd 函数的函数声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">gcd</span><span class="params">(<span class="type">uint64_t</span>, <span class="type">uint64_t</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">gcd</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcd 函数（递归实现）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">gcd</span><span class="params">(<span class="type">uint64_t</span> a, <span class="type">uint64_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcd 函数（递归函数，写成一行的版本）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">gcd</span><span class="params">(<span class="type">uint64_t</span> a, <span class="type">uint64_t</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a; &#125;</span><br></pre></td></tr></table></figure><p>gcd 函数（迭代实现）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">gcd</span><span class="params">(<span class="type">uint64_t</span> a, <span class="type">uint64_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint64_t</span> tmp = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="法三更相减损法"><a href="#法三：更相减损法" class="headerlink" title="法三：更相减损法"></a>法三：更相减损法</h2><p>更相减损法又叫<strong>更相减损术</strong>，出自《九章算术》，是咱老祖宗的智慧。这个东西本来是为了约分而设计的，但是，既然都约分了，那自然也可以用来求取最大公约数。</p><p>这个算法的原文描述是这样：</p><blockquote><p>可半者半之，不可半者，副置分母、子之数，以少减多，更相减损，求其等也。以等数约之。</p></blockquote><p>翻译成白话就是：</p><blockquote><p>（如果需要对分数进行约分，那么）可以折半的话，就折半（也就是用 2 来约分）。如果不可以折半的话，那么就比较分母和分子的大小，用大数减去小数，互相减来减去，一直到减数与差相等为止，用这个相等的数字来约分。</p></blockquote><p><em>这两段引用的来源是：<a href="https://baike.baidu.com/item/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%9C%AF">更相减损术_百度百科 (baidu.com)</a></em></p><h3 id="3-时间复杂度"><a href="#3-时间复杂度" class="headerlink" title="3. 时间复杂度"></a>3. 时间复杂度</h3><p>$O(max(a,b))$</p><h3 id="3-自然语言描述"><a href="#3-自然语言描述" class="headerlink" title="3. 自然语言描述"></a>3. 自然语言描述</h3><ol><li>定义变量 a、b 并读入；</li><li>如果 变量 a、b 能被 2 整除，那就都除以 2。不断重复执行这一步直到 a、b 任意一个不能被 2 整除，记录下进行这一步的次数，存入变量 cnt 中；</li><li>定义三个变量 x1、x2、x3，用于表示被减数、减数和差；</li><li>x1 赋初值为 a、b 中较大的那一个，x2 赋初值为 a、b 中较小的那一个，x3 赋初值为 x1-x2；</li><li>在 x2!&#x3D;x3 的情况下，不断更新 x1 &#x3D; max(x2, x3)，x2 &#x3D; min(x2, x3)，x3 &#x3D; x1 - x2；</li><li>返回 x2 + pow(2, cnt)。</li></ol><h3 id="3-流程图"><a href="#3-流程图" class="headerlink" title="3. 流程图"></a>3. 流程图</h3><h3 id="3-c-代码"><a href="#3-C-代码" class="headerlink" title="3. C++ 代码"></a>3. C++ 代码</h3><p>下边给出的是基于原文描述实现的更相减损法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">gcd</span><span class="params">(<span class="type">uint64_t</span> a, <span class="type">uint64_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> cnt = <span class="number">0</span>; <span class="comment">// 统计除以二的次数</span></span><br><span class="line">    <span class="keyword">while</span> (a % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; b % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        a /= <span class="number">2</span>;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">uint64_t</span> x1, x2, x3; <span class="comment">// 分别表示被减数、减数、差</span></span><br><span class="line">    x1 = <span class="built_in">max</span>(a, b);</span><br><span class="line">    x2 = <span class="built_in">min</span>(a, b);</span><br><span class="line">    x3 = x1 - x2;</span><br><span class="line">    <span class="keyword">while</span> (x2 != x3)</span><br><span class="line">    &#123;</span><br><span class="line">        x1 = <span class="built_in">max</span>(x2, x3);</span><br><span class="line">        x2 = <span class="built_in">min</span>(x2, x3);</span><br><span class="line">        x3 = x1 - x2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x2 * <span class="built_in">pow</span>(<span class="number">2</span>, cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果去掉那些“可半者半之”，直接进行后面的“<strong>辗转相减</strong>”部分，也是可以的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">gcd</span><span class="params">(<span class="type">uint64_t</span> a, <span class="type">uint64_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> x1, x2, x3; <span class="comment">// 分别表示被减数、减数、差</span></span><br><span class="line">    x1 = <span class="built_in">max</span>(a, b);</span><br><span class="line">    x2 = <span class="built_in">min</span>(a, b);</span><br><span class="line">    x3 = x1 - x2;</span><br><span class="line">    <span class="keyword">while</span> (x2 != x3)</span><br><span class="line">    &#123;</span><br><span class="line">        x1 = <span class="built_in">max</span>(x2, x3);</span><br><span class="line">        x2 = <span class="built_in">min</span>(x2, x3);</span><br><span class="line">        x3 = x1 - x2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x2;  <span class="comment">// 或者 return x3;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是也可以写出递归形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">gcd</span><span class="params">(<span class="type">uint64_t</span> a, <span class="type">uint64_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">        a ^= b, b ^= a, a ^= b; <span class="comment">// 确保 a&gt;=b</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> * b == a)</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(b, a - b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="法四stein-算法"><a href="#法四：Stein-算法" class="headerlink" title="法四：Stein 算法"></a>法四：Stein 算法</h2><p>这个算法是辗转相除法的改进版本，避免了取模运算，且算法性能稳定。</p><h3 id="4-时间复杂度"><a href="#4-时间复杂度" class="headerlink" title="4. 时间复杂度"></a>4. 时间复杂度</h3><p>$O(log(max(a,b)))$</p><h3 id="版本一"><a href="#版本一：" class="headerlink" title="版本一："></a>版本一：</h3><p>学习自<a href="https://cnblogs.com/COLIN-LIGHTNING/p/8425484.html">这篇</a>文章，正好学习一下位运算的一些“骚操作”（见下文引用处）。</p><h4 id="41-自然语言描述"><a href="#4-1-自然语言描述" class="headerlink" title="4.1. 自然语言描述"></a>4.1. 自然语言描述</h4><ol><li>定义变量 a、b 并读入，确保 a&gt;&#x3D;b（如果 a&lt;b 则交换）；</li><li>如果两个数都是偶数，那就不断除以 2 直至至少一个不是偶数；</li><li>如果一奇一偶，那就把那个偶数不断除以 2 直至它也为一个奇数；</li><li>对两个奇数进行辗转相减（或者辗转相除？上边那篇文章里这么说，但是除的话不是无法避免取模运算效率低下的问题了嘛 emm），直至求出它们的最大公约数；</li></ol><h4 id="41-流程图"><a href="#4-1-流程图" class="headerlink" title="4.1. 流程图"></a>4.1. 流程图</h4><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/12/05/zyTcJe.png" alt="Powered by draw.io"></p><h4 id="41-c-代码"><a href="#4-1-C-代码" class="headerlink" title="4.1. C++ 代码"></a>4.1. C++ 代码</h4><blockquote><p>(1) 按位与 (&amp;):</p><p>a&amp;x 为对数 a 的二进制形式的取位操作，即去 a 二进制形式的第 x 位。这里有一个重要应用就是 a&amp;1 可以用于判断数 a 的奇偶性，即 a 末位为 0 即为偶数，末位为 1 即为奇数。</p><p>(2) 异或运算 (^):</p><p>具体介绍参考之前的随笔：<a href="http://www.cnblogs.com/COLIN-LIGHTNING/p/8298554.html%EF%BC%9B">http://www.cnblogs.com/COLIN-LIGHTNING/p/8298554.html；</a><br>应用为交换两数：a^&#x3D;b,b^&#x3D;a,a^&#x3D;b 即完成了两数交换。</p><p>(3) 按位左移 (&lt;&lt;):</p><p>a&lt;&lt;&#x3D;x 即为使 a 乘以 2 的 x 次幂，原理是让 a 的二进制形式左移 x 位；应用为对与 2 的幂次方相乘使运算更快更方便；</p><p>(4) 按位右移 (&gt;&gt;):</p><p>a&gt;&gt;&#x3D;x 即为使 a 除以 2 的 x 次幂，原理是让 a 的二进制形式右移 x 位；应用为对与 2 的幂次方相除使运算更快更方便；</p></blockquote><p>大佬的代码大致是这样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">gcd</span><span class="params">(<span class="type">uint64_t</span> a, <span class="type">uint64_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">        a ^= b, b ^= a, a ^= b; <span class="comment">// 确保 a&gt;=b，也可以 swap(a,b);</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span> ((!(a &amp; <span class="number">1</span>)) &amp;&amp; (!(b &amp; <span class="number">1</span>)))        <span class="comment">// a&amp;1 若为 0 表示 a%2==0，也就是 a 能被 2 整除；</span></span><br><span class="line">                                         <span class="comment">// 若非 0 则表示 a%2!=0，也就是 a 不能被 2 整除。</span></span><br><span class="line">                                         <span class="comment">// b&amp;1 类似。所以这里判断的是 “当 a、b 都是偶数的时候”</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(a &gt;&gt; <span class="number">1</span>, b &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="number">1</span>; <span class="comment">// 步骤 2：将 a、b 都除以 2。注意最后的左移，在递归返回过程中将2因子乘上。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((a &amp; <span class="number">1</span>) &amp;&amp; (!(b &amp; <span class="number">1</span>)))      <span class="comment">// “当 a 为奇数，b 为偶数时”</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(a, b &gt;&gt; <span class="number">1</span>);           <span class="comment">// 步骤 3：将仍为偶数的那个数不断除以 2 直至其为奇数。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((!(a &amp; <span class="number">1</span>)) &amp;&amp; (b &amp; <span class="number">1</span>))      <span class="comment">// “当 a 为偶数，b 为奇数时”</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(a &gt;&gt; <span class="number">1</span>, b);           <span class="comment">// 与上面类似</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(a - b, b); <span class="comment">// 步骤 4：用辗转相减法处理，求取这两个奇数的最大公约数;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="版本二"><a href="#版本二：" class="headerlink" title="版本二："></a>版本二：</h3><p>来自<a href="https://blog.csdn.net/Brilliance_panpan/article/details/88372432">这里</a>，对均为奇数的情况做了不同的处理，其他都是一样的。</p><h4 id="42-自然语言描述"><a href="#4-2-自然语言描述" class="headerlink" title="4.2. 自然语言描述"></a>4.2. 自然语言描述</h4><ol><li>定义变量 a、b 并读入；</li><li>如果 a&#x3D;&#x3D;b，则直接返回 a 或 b，否则下一步；</li><li>如果 a&lt;b，交换 a、b 的值，确保 a&gt;b；</li><li>判断属于下边哪种情况，按对应的情况更新 a、b 的值，回到步骤 2。</li></ol><p>四种情况分别是：</p><ol><li>均为偶数: gcd(a,b) &#x3D; 2 * gcd(a&#x2F;2,b&#x2F;2);</li><li>均为奇数: gcd(a,b) &#x3D; gcd((a+b)&#x2F;2,(a-b)&#x2F;2);</li><li>a 为奇数，b 为偶数: gcd(a,b) &#x3D; gcd(a,b&#x2F;2);</li><li>a 为偶数，b 为奇数: gcd(a,b) &#x3D; gcd(a&#x2F;2,b);</li></ol><h4 id="42-流程图"><a href="#4-2-流程图" class="headerlink" title="4.2. 流程图"></a>4.2. 流程图</h4><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/12/05/zyTgRH.png" alt="Powered by draw.io"></p><h4 id="42-c-代码"><a href="#4-2-C-代码" class="headerlink" title="4.2. C++ 代码"></a>4.2. C++ 代码</h4><p>最后代码和上边也没有太大差别。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">gcd</span><span class="params">(<span class="type">uint64_t</span> a, <span class="type">uint64_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">        a ^= b, b ^= a, a ^= b;</span><br><span class="line">    <span class="keyword">if</span> (!(a &amp; <span class="number">1</span>) &amp;&amp; !(b &amp; <span class="number">1</span>))            <span class="comment">// 均为偶数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(a &gt;&gt; <span class="number">1</span>, b &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="number">1</span>; <span class="comment">// 别忘了要乘回来</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((a &amp; <span class="number">1</span>) &amp;&amp; (b &amp; <span class="number">1</span>))         <span class="comment">// 均为奇数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>((a + b) &gt;&gt; <span class="number">1</span>, (a - b) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((a &amp; <span class="number">1</span>) &amp;&amp; !(b &amp; <span class="number">1</span>)) <span class="comment">// a 奇 b 偶</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(a, b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!(a &amp; <span class="number">1</span>) &amp;&amp; (b &amp; <span class="number">1</span>)) <span class="comment">// a 偶 b 奇</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(a &gt;&gt; <span class="number">1</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul><li><a href="https://blog.csdn.net/Brilliance_panpan/article/details/88372432">《求最大公约数的 4 种常用算法<em>AmethystFOB 的博客 - CSDN 博客</em>求最大公约数的四种算法》</a></li><li><a href="https://baike.baidu.com/item/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%9C%AF">《更相减损术_百度百科 (baidu.com)》</a></li><li><a href="https://blog.csdn.net/Dan1374219106/article/details/106676043">《教你写一手漂亮的伪代码（详细规则 &amp; 简单实例）_<em>陈同学</em>的博客 - CSDN 博客_伪代码的简单例子》</a></li><li><a href="https://www.php.cn/csharp-article-415083.html">《伪代码是什么？如何写一个伪代码？-C#.Net 教程 - PHP 中文网》</a></li><li><a href="https://baike.baidu.com/item/%E6%B5%81%E7%A8%8B%E5%9B%BE/206961">《流程图_百度百科 (baidu.com)》</a></li><li><a href="https://zhuanlan.zhihu.com/p/359722998">《for、while、do while 三种循环的流程图画法总结（附案例） - 知乎 (zhihu.com)》</a></li><li><a href="https://www.liuchengtu.com/tutorial/switchlct.html">《switch 语句流程图怎么画？简单的 switch 语句流程图模板分享 (liuchengtu.com)》</a></li><li><a href="https://www.cnblogs.com/COLIN-LIGHTNING/p/8425484.html">《浅谈 Stein 算法求最大公约数 (GCD) 的原理及简单应用 - COLINGAO - 博客园 (cnblogs.com)》</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一次计算机导论课的作业。本来对于最大公约数的求解算法，我就只知道一个&lt;strong&gt;辗转相除法&lt;/strong&gt;。原来，其实还有别的一些 …&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="算法" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/"/>
    
    <category term="最大公约数" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="算法" scheme="http://blocklune.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="最大公约数" scheme="http://blocklune.github.io/tags/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>初探深度优先搜索（DFS）和广度优先搜索（BFS）</title>
    <link href="http://blocklune.github.io/posts/a336c1b8.html"/>
    <id>http://blocklune.github.io/posts/a336c1b8.html</id>
    <published>2022-11-22T06:25:21.000Z</published>
    <updated>2022-11-22T12:41:15.062Z</updated>
    
    <content type="html"><![CDATA[<p><strong>深度优先搜索</strong>（DFS，Depth First Search）和<strong>广度优先搜索</strong>（BFS，Breadth First Search），我从来没弄明白过。是时候努力去好好理解一下了。</p><span id="more"></span><p>B 站找了两个视频看，这篇文章是笔记。</p><p><del>所以图直观还是直接看视频吧…</del></p><ul><li><a href="https://www.bilibili.com/video/BV1cQ4y127Kd/">《不怕你学不会系列：深度优先搜索_哔哩哔哩_bilibili》</a></li><li><a href="https://www.bilibili.com/video/BV1H44y1871A/">《不怕你学不会系列：宽度优先搜索_哔哩哔哩_bilibili》</a></li></ul><h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><p>DFS 的搜索过程要结合 <strong>栈</strong> 来理解，实际上这个过程就是在对一个 <strong>栈</strong> 在操作。比如我们有这样一张图：</p><pre class="mermaid">graph TB;1((1))===2((2))===4((3))===8((4))===5((5))2((2))===5((5))1((1))===3((8))===6((6))===8((4))3((8))===7((9))6((6))===9((7))</pre><p><del>我的博客支持 mermaid 嘛… emm 好像不支持…</del></p><p>我们建立一个栈，然后开始遍历上边这张图。我们做以下约定：</p><ul><li>已经入栈的节点要被标记为已经遍历；</li><li>起始节点为 1，将其入栈，作为最初的栈顶；</li><li>查看与当前栈顶元素相连并且未被标记的节点，将其入栈；</li><li>如果有多个满足 3 中条件的元素，节点序号较小的优先入栈；</li><li>当栈顶元素没有相连节点或所有相连节点均已经被标记后，将其出栈。</li></ul><p>所以对于上边的图，我们依次进行下面的操作：</p><ol><li>节点 1 入栈，并将其标记；</li><li>查找与当前栈顶元素节点 1 相连并且没有标记的元素，有节点 2 和节点 8，节点 2 优先入栈，将节点 2 标记；</li><li>查找与当前栈顶元素节点 2 相连并且没有标记的元素，有节点 3 和节点 5，节点 3 优先入栈，将节点 3 标记；</li><li>查找与当前栈顶元素节点 3 相连并且没有标记的元素，只有节点 4，节点 4 入栈，并将其标记；</li><li>查找与当前栈顶元素节点 4 相连并且没有标记的元素，有节点 5 和 节点 6 ，节点 5 优先入栈，将节点 5 标记；</li><li>查找与当前栈顶元素节点 5 相连的元素，有节点 2 和节点 4，但均已被标记，所以当前栈顶节点 5 出栈；</li><li>查找与当前栈顶元素节点 4 相连并且没有标记的元素，只有节点 6，节点 6 入栈，并将其标记；</li><li>查找与当前栈顶元素节点 6 相连并且没有标记的元素，有节点 7 和节点 8，节点 7 优先入栈，将节点 7 标记；</li><li>查找与当前栈顶元素节点 7 相连的元素，没有这样的元素，节点 7 出栈；</li><li>查找与当前栈顶元素节点 6 相连并且没有标记的元素，只有节点 8，节点 8 入栈，并将其标记；</li><li>查找与当前栈顶元素节点 8 相连并且没有标记的元素，只有节点 9， 节点 9 入栈，并将其标记；</li><li>查找与当前栈顶元素节点 9 相连并且没有标记的元素，没有这样的元素，节点 9 出栈；</li><li>查看当前栈顶元素节点 8，类似，节点 8 出栈；</li><li>查看当前栈顶元素节点 6，类似，节点 6 出栈；</li><li>查看当前栈顶元素节点 4，类似，节点 4 出栈；</li><li>查看当前栈顶元素节点 3，类似，节点 3 出栈；</li><li>查看当前栈顶元素节点 2，类似，节点 2 出栈；</li><li>查看当前栈顶元素节点 1，类似，节点 1 出栈。</li></ol><p>上边对这个栈的操作过程应该如下边所示：</p><ol start="0"><li><p>（栈空）</p></li><li><p>节点 1</p></li><li><p>节点 1、节点 2</p></li><li><p>节点 1、节点 2、节点 3</p></li><li><p>节点 1、节点 2、节点 3、节点 4</p></li><li><p>节点 1、节点 2、节点 3、节点 4、节点 5</p></li><li><p>节点 1、节点 2、节点 3、节点 4</p></li><li><p>节点 1、节点 2、节点 3、节点 4、节点 6</p></li><li><p>节点 1、节点 2、节点 3、节点 4、节点 6、节点 7</p></li><li><p>节点 1、节点 2、节点 3、节点 4、节点 6</p></li><li><p>节点 1、节点 2、节点 3、节点 4、节点 6、节点 8</p></li><li><p>节点 1、节点 2、节点 3、节点 4、节点 6、节点 8、节点 9</p></li><li><p>节点 1、节点 2、节点 3、节点 4、节点 6、节点 8</p></li><li><p>节点 1、节点 2、节点 3、节点 4、节点 6</p></li><li><p>节点 1、节点 2、节点 3、节点 4</p></li><li><p>节点 1、节点 2、节点 3</p></li><li><p>节点 1、节点 2</p></li><li><p>节点 1</p></li><li><p>（栈空）</p></li></ol><h2 id="宽度优先搜索"><a href="#宽度优先搜索" class="headerlink" title="宽度优先搜索"></a>宽度优先搜索</h2><p>BFS 的搜索过程要联系 <strong>队列</strong> 来理解，约定如下：</p><ul><li>已经入队的节点要被标记为已经遍历；</li><li>第一个入队的是节点 1，将其作为最初的队首和队尾；</li><li>遍历与当前队首相连但未被标记的节点，按照数字大小依次入队，并且移动队尾；</li><li>队首移动到下一个元素。</li></ul><p>例如对下边这个图：</p><pre class="mermaid">graph TB;1((1))===2((2))===4((4))===8((8))2((2))===5((5))===8((8))1((1))===3((3))===6((6))===8((8))6((6))===9((9))3((3))===7((7))===9((9))</pre><p>队列维护的情况如下（加粗的表示队首、斜体表示队尾）：</p><ol><li><strong>1</strong>、2、<em>3</em></li><li>1、<strong>2</strong>、3、4、<em>5</em></li><li>1、2、<strong>3</strong>、4、5、6、<em>7</em></li><li>1、2、3、<strong>4</strong>、5、6、7、<em>8</em></li><li>1、2、3、4、<strong>5</strong>、6、7、<em>8</em></li><li>1、2、3、4、5、<strong>6</strong>、7、8、<em>9</em></li><li>1、2、3、4、5、6、<strong>7</strong>、8、<em>9</em></li><li>1、2、3、4、5、6、7、<strong>8</strong>、<em>9</em></li><li>1、2、3、4、5、6、7、8、<strong>9</strong></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;深度优先搜索&lt;/strong&gt;（DFS，Depth First Search）和&lt;strong&gt;广度优先搜索&lt;/strong&gt;（BFS，Breadth First Search），我从来没弄明白过。是时候努力去好好理解一下了。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="算法" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索算法" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="算法" scheme="http://blocklune.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索算法" scheme="http://blocklune.github.io/tags/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    
    <category term="DFS" scheme="http://blocklune.github.io/tags/DFS/"/>
    
    <category term="BFS" scheme="http://blocklune.github.io/tags/BFS/"/>
    
    <category term="深度优先搜索" scheme="http://blocklune.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="广度优先搜索" scheme="http://blocklune.github.io/tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="宽度优先搜索" scheme="http://blocklune.github.io/tags/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>为何说三进制是效率最高的进制？以及其他一些与三进制有关的东西...</title>
    <link href="http://blocklune.github.io/posts/1d122915.html"/>
    <id>http://blocklune.github.io/posts/1d122915.html</id>
    <published>2022-11-20T11:26:03.000Z</published>
    <updated>2022-11-20T13:20:50.023Z</updated>
    
    <content type="html"><![CDATA[<p>这是一次计算机导论的作业。老师提供了很多课题供我们选择，我选择的是“有人说三进制是被证明理论上效率最高的进制，请广泛搜集相关资料，撰写关于三进制的科普报告，或者对其他进制进行对比和评价。</p><span id="more"></span><h2 id="为什么在理论上三进制是最高效率的进制"><a href="#为什么在理论上三进制是最高效率的进制？" class="headerlink" title="为什么在理论上三进制是最高效率的进制？"></a>为什么在理论上三进制是最高效率的进制？</h2><blockquote><p>这里的内容来自知乎大佬 <a href="https://www.zhihu.com/people/bai-yun-long-52">@白云龙</a>的<a href="https://www.zhihu.com/question/435375360">这篇</a>回答。<br>B站 up 主 <a href="https://space.bilibili.com/19319172">@差评君</a> 的<a href="https://www.bilibili.com/video/BV17b4y1U7TZ/">这个</a>视频中对这篇回答进行了动画形式的展现。</p></blockquote><p>首先，先让我们来约定一下什么叫“进制的效率”：<br>$$<br>进制的效率 &#x3D; \frac{表达的信息量}{表达这些信息所需的资源}<br>$$<br>比如我们需要表达十进制下 <code>0~999</code> 这 1000 个数字，这就是我们 $表达的信息量$，我们选择用写有数字的牌子来表示它们。</p><ul><li><p>在十进制下，<code>0~999</code> 我们至少需要三位，每位上我们都需要 0~9 十个数字的牌子，所以三位一共是 30 个数字牌子；</p></li><li><p>在二进制下，<code>0~999</code> 是 <code>0~1111100111</code>，我们至少需要十位，每位是 0 或 1，所以一共是 20 个数字牌子；</p></li><li><p>在三进制下，<code>0~999</code> 是 <code>0~1101000</code>，至少七位，每位是 0、1 或 2，所以一共是 21 个数字牌子；</p></li><li><p>在四进制下，<code>0~999</code> 是 <code>0~33213</code>，需要 20 个数字牌子；</p></li><li><p>在五进制下，<code>0~999</code> 是 <code>0~12444</code>，需要 25 个数字牌子；</p></li><li><p>…</p></li></ul><p>这些数字牌子的个数就是 $表达这些信息所需的资源$。到目前为止，似乎二进制和四进制的效率最高。</p><p>但这样理解并不完全准确。因为实际上， 对于某些进制而言，对应数量的数字牌子其实不止能表达这么多信息。比如在二进制情况下，20 个数字牌子表达的数字总量应该是 $2^{10} &#x3D; 1024 $ 个；在三进制的情况下，21个数字牌子表达的数字总量却是 $3^7 &#x3D; 2187$ 个；在四进制的情况下，20 个数字牌子表达的数字总量是 $4^5 &#x3D; 1024$ 个…</p><p>也就是说，虽然对于上边十进制而言，它那 30 个牌子表达的信息量确实就是 <code>0~999</code> 这 1000  个数字的信息，或者我们说 1000 种状态信息，但对于下边的比如二进制、三进制、四进制，对应的 20 个、21个、20个牌子其实表达了超过 1000 种状态，我们用这些牌子是有浪费的。</p><p>这么来算，我们大致可以得到，十进制的效率是 $\frac{1000}{30} \approx 33.3333$，二进制的效率是 $\frac{1024}{20} &#x3D; 51.2$，三进制的效率是 $\frac{2187}{21} \approx 104.1429$，四进制的效率是 $\frac{1024}{20} &#x3D; 51.2$…</p><p>从这个例子我们已经大概能看到三进制的效率了，那么怎么证明这件事儿呢？</p><p>回顾上边的思考过程，我们的数字牌子个数是怎么被算出来的呢？我们大概可以总结出：<br>$$<br>数字牌子的个数 &#x3D; 进制数 \times 所需的位数<br>$$<br>而为了满足上边的表达 1000 个状态的要求，所以我们要求：<br>$$<br>进制数^{所需的位数} \geq 1000<br>$$<br>也就是说：<br>$$<br>所需的位数 &#x3D; 向上取整（log_{进制数}1000）<br>$$<br>因为进制数必须是整数，所以我们必须加上 $向上取整$，但就是因为这个向上取整，我们浪费了很多的资源，所以我们先假设 $进制数$ 是个实数。</p><p>那么现在对上面 $数字牌子的个数$ 的式子改成 $表达这些信息所需的资源$，这样这个式子就成了下边这样：<br>$$<br>表达这些信息所需的资源 &#x3D; 进制数 \times log_{进制数}表达的信息量<br>$$<br>记 $表达这些所需的资源$ 为 $R$，$进制数$ 为 $N$，$表达的信息量$ 为 $I$：<br>$$<br>R &#x3D; N \times log_NI<br>$$<br>记效率为 $E$，那么：<br>$$<br>E &#x3D; \frac{I}{R} &#x3D; \frac{I}{Nlog_NI} &#x3D; \frac{I}{lnI}\times\frac{lnN}{N}<br>$$<br>求导<br>$$<br>\frac{dE}{dN} &#x3D; \frac{I}{lnI}\times\frac{1-lnN}{N^2}<br>$$<br>分析单调性，我们知道，当 $N &#x3D; e$ 时，效率 $E$ 最大。</p><p>所以也就是，<code>e 进制</code> 理论上才是效率最高的进制。</p><p>但是，e 进制是个啥呢？试试 e 附近的 2 和 3，得到 $E(2) \approx 0.3466\times\frac{I}{lnI}$，$E(3)\approx 0.3662\times\frac{I}{lnI}$，所以，三进制是理论上效率最高的进制。</p><h2 id="为什么没用三进制"><a href="#为什么没用三进制？" class="headerlink" title="为什么没用三进制？"></a>为什么没用三进制？</h2><p>在上边的两个引用里，知乎大佬 @白云龙 和 b 站 up 主 @差评君 都给出了一些答案。@白云龙 大佬的说法是，在实际的实现过程中，实现二进制的“牌子”和实现三进制的“牌子”的成本不一样，可能二进制的01牌子就便宜好用，但三进制的牌子就是又贵又难用，最后所需的资源还要乘上每个牌子的单价，加上这层因素后，二进制比三进制更经济。这其实也就是 @差评君 所言的，二进制只需高低电平来区分01，但三进制需要实现三种电流状态就比较复杂。</p><p>但其实我觉得，这样的问题并不是什么太大的问题，就像 SLC、MLC、TLC 一样。既然我们都可以在同样的电子数的情况下分别实现 2、4、8种状态的区别，那多实现一个除了01以外的第三个状态似乎也类似？(我瞎说的哦，别当真，大佬轻喷…)。主要是，二进制计算机确实已经走到了这样一个瓶颈期，我们的芯片制程来到了十几纳米甚至几纳米、我们的光刻机使用的光已经来到了极紫外光的情况下，想要进一步提升二进制计算机的一丁点性能所消耗的成本是极其庞大的。但是，三进制却是一条新的路，也许就是一条出路。</p><p>如果我们把视角从全人类缩到我们中国，在这个光刻机远远落后于欧美的情况下，或许三进制，真的就是我们中国的出路。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.zhihu.com/question/435375360">《为什么计算机不用 e 进制，按道理说 e 进制难道不是最高效的吗？ - 知乎 (zhihu.com)》</a></li><li><a href="https://www.bilibili.com/video/BV17b4y1U7TZ/">苏联的三进制电脑，为什么被二进制干掉了？【差评君】哔哩哔哩</a></li><li><a href="https://www.crucial.cn/articles/about-ssd/difference-between-slc-mlc-tlc">《SLC、MLC、TLC 颗粒的区别是什么 | Crucial (英睿达) | Crucial 英睿达》</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一次计算机导论的作业。老师提供了很多课题供我们选择，我选择的是“有人说三进制是被证明理论上效率最高的进制，请广泛搜集相关资料，撰写关于三进制的科普报告，或者对其他进制进行对比和评价。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="http://blocklune.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="进制" scheme="http://blocklune.github.io/tags/%E8%BF%9B%E5%88%B6/"/>
    
    <category term="科普" scheme="http://blocklune.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>C++ const 用法汇总</title>
    <link href="http://blocklune.github.io/posts/7ec6ba38.html"/>
    <id>http://blocklune.github.io/posts/7ec6ba38.html</id>
    <published>2022-11-17T12:05:00.000Z</published>
    <updated>2022-11-19T05:29:13.274Z</updated>
    
    <content type="html"><![CDATA[<p>最开始只是用 const 来定义常量，学到了指针传参的时候又知道了用 const 来防止一些值的修改，学到类的时候又看到非静态成员函数后边加个 const 来干嘛干嘛，然后么又听说什么顶层 const、底层 const… 真是越学越迷糊了，赶紧做一波整理。</p><span id="more"></span><h2 id="最基本的用法-定义常量"><a href="#最基本的用法-——-定义常量" class="headerlink" title="最基本的用法 —— 定义常量"></a>最基本的用法 —— 定义常量</h2><p>这个不必多说，直接上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// 正确：a 没有 const 修饰，可以改变其值</span></span><br><span class="line">b = <span class="number">2</span>; <span class="comment">// 错误：b 有 const 修饰，不能改变其值</span></span><br></pre></td></tr></table></figure><p>除了这个，还有一点是，虽然似乎我们可以通过一些“骚操作”改变 const 修饰的变量（常量?）的值，但是输出的时候，会发现结果并没有改变。看下边的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> x = <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> *p = (<span class="type">int</span> *)&amp;x;</span><br><span class="line">    <span class="comment">// 奇怪的骚操作</span></span><br><span class="line">    <span class="comment">// 直接 int *p = &amp;x; 是不行的</span></span><br><span class="line">    <span class="comment">// 但这样可以</span></span><br><span class="line">    <span class="comment">// 这样我们就可以通过指针 p 来直接操作那块内存</span></span><br><span class="line">    *p = <span class="number">12</span>;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>但是如果加上 <code>volatile</code> 关键词，却可以发现结果也可以跟着变：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">const</span> <span class="type">int</span> x = <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> *p = (<span class="type">int</span> *)&amp;x;</span><br><span class="line">    *p = <span class="number">12</span>;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>但是，上边的 <code>const</code> 修饰的都不是全局变量。如果修饰的是全局变量，我们似乎就不能通过指针的小把戏来改变 <code>const</code> 的值了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误代码：</span></span><br><span class="line"><span class="comment">// 这玩意儿能通过编译，但是压根跑不起来</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p1 = (<span class="type">int</span> *)&amp;x;</span><br><span class="line">    *p1 = <span class="number">7</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*p1 = &quot;</span> &lt;&lt; *p1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果加上了 <code>volatile</code> 依然可以跑，并且也可以用指针来修改它的值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">const</span> <span class="type">int</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p2 = (<span class="type">int</span> *)&amp;y;</span><br><span class="line">    *p2 = <span class="number">8</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*p2 = &quot;</span> &lt;&lt; *p2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果：</span></span><br><span class="line"><span class="comment">y = 8</span></span><br><span class="line"><span class="comment">*p2 = 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>总结一下，就是——</p><ol><li>如果是局部的 <code>const</code>，那至少有两方面的保护：一是编译检查，看看我们下边的代码是否显而易见地尝试去改变它的值，如果有那就报错；二是编译器的自动优化，编译器会把这个变量的值复制一份放到寄存器里，所以即使我们用指针改变了原来内存里的值，输出的结果还是原来的值（备份到寄存器的原来的值的拷贝），所以当我们使用 <code>voliatile</code> 关键字关闭了编译器的这种优化，让程序每运行到要用到这个 <code>const</code> 修饰的变量的时候都去原来的地址读取值的时候，我们的小把戏成功了。</li><li>如果是全局的 <code>const</code>，还会有其他的机制，具体还没弄清楚，不过你可以看看<a href="https://zhuanlan.zhihu.com/p/145323002">《Linux 系统编程学习总结 （二）ELF - 知乎》</a>这篇文章，也许会有帮助？</li></ol><h2 id="顶层-const-和底层-const"><a href="#顶层-const-和底层-const" class="headerlink" title="顶层 const 和底层 const"></a>顶层 const 和底层 const</h2><p>首先，讨论顶层底层的 const，一般都是对指针变量才有意义。那么啥是顶层 const？啥是底层 const？</p><blockquote><p><strong>顶层 const</strong>（top-level const）表示指针<strong>本身</strong>是个常量;<br><strong>底层 const</strong>（low-level const）表示指针所指的<strong>对象</strong>是一个常量。</p></blockquote><p>举几个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p1 = &amp;x;       <span class="comment">// 顶层 const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p2 = &amp;x;       <span class="comment">// 底层 const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3 = &amp;x; <span class="comment">// 左边是底层 const, 右边是顶层 const</span></span><br><span class="line">p1 = &amp;y;                  <span class="comment">// 错误，p1 是顶层 const 修饰的，所以 p1 指向的地址是确定的，无法更改它的指向</span></span><br><span class="line">p2 = &amp;y;                  <span class="comment">// 正确，p2 没有被顶层 const 修饰，这意味着我们可以修改它的指向</span></span><br><span class="line">p3 = &amp;y;                  <span class="comment">// 错误</span></span><br><span class="line">*p1 = y;                  <span class="comment">// 正确，p1 没有被底层 const 修饰，这意味着我们可以修改它指向的值</span></span><br><span class="line">*p2 = y;                  <span class="comment">// 错误，p2 是底层 const 修饰的，我们无法改变它指向的值</span></span><br><span class="line">*p3 = y;                  <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>也就是说：</p><ul><li>仅仅被顶层 const 修饰，意味着指针变量的指向无法改变，但可以操作指向的值（指针常量? 指针（地址）是个常量）；</li><li>仅仅被底层 const 修饰，意味着指针变量的指向可以改变，但无法操作指向的值（常量指针？ 指向常量的指针）；</li><li>如果两重修饰，那么就就没办法改变指针的指向，也没办法操作指向的值。</li></ul><p>顺便一说对于引用的情况。因为引用必须初始化并且初始化完成后（起玩别名后就不能改变它引用的对象了），所以 <code>const int &amp;</code> 就是顶层的，并且没有 <code>int &amp; const</code> 这种写法。</p><h2 id="函数中的-const"><a href="#函数中的-const" class="headerlink" title="函数中的 const"></a>函数中的 const</h2><h3 id="参数列表中的-const"><a href="#参数列表中的-const" class="headerlink" title="参数列表中的 const"></a>参数列表中的 const</h3><p>其实就是希望函数运行过程中不改变这个变量的值。比如写函数原型的时候用 <code>const int &amp;</code>，其中 <code>const</code> 表示这个函数对这个变量的操作是只读的，不会改变原来的值，而 <code>&amp;</code> 的作用就是，既然这里只是要读一读这个变量的值，并不对它进行操作，那我就不创建副本了，直接用它自己。</p><h3 id="返回的-const"><a href="#返回的-const" class="headerlink" title="返回的 const"></a>返回的 const</h3><p>这边还没弄清楚，以后弄清楚了再写。</p><h2 id="类的非静态成员函数后边跟的-const"><a href="#类的非静态成员函数后边跟的-const" class="headerlink" title="类的非静态成员函数后边跟的 const"></a>类的非静态成员函数后边跟的 const</h2><p>这样可以让这个函数的 <code>this</code> 是只读的。</p><p>看这篇文章：<a href="https://blog.51cto.com/u_11495341/3040168">《C\C++ 中函数后面加 const_51CTO 博客_c++ const 函数》</a></p><blockquote><p>非静态成员函数后面加 const（加到非成员函数或静态成员后面会产生编译错误）表示成员函数隐含传入的 this 指针为 const 指针，决定了在该成员函数中， 任意修改它所在的类的成员的操作都是不允许的（因为隐含了对 this 指针的 const 引用）<br>唯一的例外是对于 mutable 修饰的成员。加了 const 的成员函数，可以被非 const 对象和 const 对象调用，但不加 const 的成员函数 只能被非 const 对象调用。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/Forever-Kenlen-Ja/p/3776991.html">《C++ const 用法小结 （欢迎大家拍砖） - karllen - 博客园》</a></li><li><a href="https://zhuanlan.zhihu.com/p/145323002">《Linux 系统编程学习总结 （二）ELF - 知乎》</a></li><li><a href="https://blog.51cto.com/u_11495341/3040168">《C\C++ 中函数后面加 const_51CTO 博客_c++ const 函数》</a></li><li><a href="https://zhuanlan.zhihu.com/p/499784237">《C++ 顶层 const 和底层 const - 知乎》</a></li><li><a href="https://zhuanlan.zhihu.com/p/161560391">《C++ 干货系列 —— 顶层 const 和底层 const - 知乎》</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最开始只是用 const 来定义常量，学到了指针传参的时候又知道了用 const 来防止一些值的修改，学到类的时候又看到非静态成员函数后边加个 const 来干嘛干嘛，然后么又听说什么顶层 const、底层 const… 真是越学越迷糊了，赶紧做一波整理。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="const" scheme="http://blocklune.github.io/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>二维数组到底是啥啊...</title>
    <link href="http://blocklune.github.io/posts/57fd79a.html"/>
    <id>http://blocklune.github.io/posts/57fd79a.html</id>
    <published>2022-11-16T12:28:15.000Z</published>
    <updated>2022-11-19T05:29:30.786Z</updated>
    
    <content type="html"><![CDATA[<p>一维数组还是比较容易理解的，但是二维数组，我始终没弄清楚这玩意儿是按照什么规则从二维的样子转成一维然后存起来的，也因此常常犯下下标写反了的错误。我觉得是时候详细地理一理这玩意儿到底是个啥了…</p><span id="more"></span><h2 id="怎么转成了一维"><a href="#怎么转成了一维？" class="headerlink" title="怎么转成了一维？"></a>怎么转成了一维？</h2><p>要知道二维数组到底是怎么转成了一维存在内存里，或者说，我到底是应该从前往后（前面的一个数字先不动，先让后边的数字动）读这个数组，还是从后往前（后面的一个数字先不动，先让前面的数字动）读这个数组，其实方法很简单 —— 我们只要把数组里每个元素的地址输出来就行了。比如下边这串代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;&amp;a[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]&quot;</span></span><br><span class="line">                 &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;] = &quot;</span> &lt;&lt; &amp;a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能的输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;a[0][0] = 0x61fe00</span><br><span class="line">&amp;a[0][1] = 0x61fe04</span><br><span class="line">&amp;a[0][2] = 0x61fe08</span><br><span class="line">&amp;a[1][0] = 0x61fe0c</span><br><span class="line">&amp;a[1][1] = 0x61fe10</span><br><span class="line">&amp;a[1][2] = 0x61fe14</span><br></pre></td></tr></table></figure><p>可以看到，正确的读法应该是：<strong>从前往后，前面的保持不动，从最后一个开始变化。</strong></p><p>也就是说，对于 <code>a[2][3]</code> 这样一个数组，应该这么理解：<code>a[2][3]</code> 前面的 <code>[2]</code> 表示这是一个包含两个元素的数组，后面的 <code>[3]</code> 表示前面所说的两个元素每一个都是包含三个元素的数组。</p><h2 id="赋初值的一些问题"><a href="#赋初值的一些问题" class="headerlink" title="赋初值的一些问题"></a>赋初值的一些问题</h2><p>知道了上边的东西，所以我们知道，我们可以写一个类似 <code>int a[][3] = &#123;0,0,0,0,0,0&#125;;</code> 的玩意儿，却不能写一个 <code>int a[2][] = &#123;0,0,0,0,0,0&#125;</code> 的玩意儿 —— 相当于第二个方括号里边是告诉了编译器后边这一串数字按几个为一组，由于 <code>&#123;&#125;</code> 中元素个数不足是会往后边自动补零的，所以少了这个每组几个的参数，编译器就不知道你这到底有多少个元素了。</p><h2 id="用指向数组的指针数组指针来实现一个其中一维可以动态调整的二维数组"><a href="#用指向数组的指针（数组指针）来实现一个其中一维可以动态调整的二维数组？" class="headerlink" title="用指向数组的指针（数组指针）来实现一个其中一维可以动态调整的二维数组？"></a>用指向数组的指针（数组指针）来实现一个其中一维可以动态调整的二维数组？</h2><p>类似上边的赋初值时候的问题，这个动态的二维数组的内层，也就是按几个为一组的那一层，必须是已经确定的，例如，我们依然创建一个 2*3 的二维数组，其中前面的 2 是在运行时确定的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">int</span>(*p)[<span class="number">3</span>] = <span class="keyword">new</span> <span class="type">int</span>[n][<span class="number">3</span>];</span><br><span class="line">    <span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            p[i][j] = now;</span><br><span class="line">            now++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            cout &lt;&lt; p[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br></pre></td></tr></table></figure><h2 id="能不能用-int-p-来创建一个两个维度都能变化的二维数组"><a href="#能不能用-int-p-来创建一个两个维度都能变化的二维数组？" class="headerlink" title="能不能用 int** p 来创建一个两个维度都能变化的二维数组？"></a>能不能用 int** p 来创建一个两个维度都能变化的二维数组？</h2><p>不知道啊就是说…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一维数组还是比较容易理解的，但是二维数组，我始终没弄清楚这玩意儿是按照什么规则从二维的样子转成一维然后存起来的，也因此常常犯下下标写反了的错误。我觉得是时候详细地理一理这玩意儿到底是个啥了…&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="指针" scheme="http://blocklune.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
    <category term="数组" scheme="http://blocklune.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="二维数组" scheme="http://blocklune.github.io/tags/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>当形参、实参是指针变量...</title>
    <link href="http://blocklune.github.io/posts/1ef1e20b.html"/>
    <id>http://blocklune.github.io/posts/1ef1e20b.html</id>
    <published>2022-11-16T06:46:44.000Z</published>
    <updated>2022-11-16T07:32:46.586Z</updated>
    
    <content type="html"><![CDATA[<p>接<a href="https://blocklune.github.io/posts/50c16b14.html">《一个有关指针传参的问题》</a>，再理一理这里边的一些问题…</p><span id="more"></span><p>在单向值传递的过程中，我们知道，形参是对实参的值的拷贝。在实参的值传递给形参后，对形参的一切操作，都不会对实参产生什么影响。比如下边这串代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Before func(), main(): n = &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func</span>(n);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After func(), main(): n = &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Before n++, func(): n = &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    n++;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After n++, func(): n = &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下边是输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Before func(), main(): n = 5</span><br><span class="line">Before n++, func(): n = 5</span><br><span class="line">After n++, func(): n = 6</span><br><span class="line">After func(), main(): n = 5</span><br></pre></td></tr></table></figure><p>通过打印它们的地址，我们也可以认识到这一点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;In main(): &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;n = &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;n = &quot;</span> &lt;&lt; &amp;n &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;In func(): &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;n = &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;n = &quot;</span> &lt;&lt; &amp;n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">In main():</span></span><br><span class="line"><span class="comment">n = 5</span></span><br><span class="line"><span class="comment">&amp;n = 0x61fe1c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">In func():</span></span><br><span class="line"><span class="comment">n = 5</span></span><br><span class="line"><span class="comment">&amp;n = 0x61fdf0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如果把变量类型从普通类型变成指针类型，那么类似的，发生的其实也是一次值传递，也即，<strong>指针变量的值发生了一次拷贝</strong>，请看下边的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;In main(): &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p = &quot;</span> &lt;&lt; (<span class="type">int</span> *)p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;p = &quot;</span> &lt;&lt; &amp;p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;In func(): &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p = &quot;</span> &lt;&lt; (<span class="type">int</span> *)p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;p = &quot;</span> &lt;&lt; &amp;p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我电脑上的输出结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In main():</span><br><span class="line">p = 0xee61c0</span><br><span class="line">&amp;p = 0x61fe18</span><br><span class="line"></span><br><span class="line">In func():</span><br><span class="line">p = 0xee61c0</span><br><span class="line">&amp;p = 0x61fdf0</span><br></pre></td></tr></table></figure><p>可以看到，<code>int *</code> 类型的指针变量 <code>p</code> 的值是相同的，但地址不同，这是两个变量。</p><p>把上边代码 <code>main()</code> 中的 <code>p</code> 记为 <code>p1</code>，<code>func()</code> 中的记为 <code>p2</code>，那么就可以这样理解为，当调用 <code>func()</code> 时，<code>p2</code> 与 <code>p1</code> <strong>指向了相同的位置</strong>，但它们确实<strong>不是同一个指针</strong>。</p><p>对于<a href="https://blocklune.github.io/posts/50c16b14.html">《一个有关指针传参的问题》</a>中的那段错误代码，其实错误就是，在函数中 <code>new</code> 出来内存后，只是让形参指向了那片内存，而原来的实参并没有同步地指过去。</p><p>但是只要确定形参的指针和实参的指针指向的地址是相同的，那么对这同一片内存进行的操作，就是同步的，比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    *p = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Before func(), main(): (*p) = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func</span>(p);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After func(), main(): (*p) = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Before (*p)++, func(): (*p) = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    (*p)++;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After (*p)++, func(): (*p) = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Before func(), main(): (*p) = 5</span><br><span class="line">Before (*p)++, func(): (*p) = 5</span><br><span class="line">After (*p)++, func(): (*p) = 6</span><br><span class="line">After func(), main(): (*p) = 6</span><br></pre></td></tr></table></figure><p>由于数组名其实就是数组第一个元素（下标为 0 的那个元素）的地址，所以类似的，在函数中对数组形参的操作会等效到数组实参上去：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>[], <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : a)</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func</span>(a, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : a)</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        arr[i]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 1 2</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;接&lt;a href=&quot;https://blocklune.github.io/posts/50c16b14.html&quot;&gt;《一个有关指针传参的问题》&lt;/a&gt;，再理一理这里边的一些问题…&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="指针" scheme="http://blocklune.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
    <category term="函数传参" scheme="http://blocklune.github.io/tags/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/"/>
    
  </entry>
  
  <entry>
    <title>C 语言中使用变量输出小数点位数</title>
    <link href="http://blocklune.github.io/posts/45e2d42.html"/>
    <id>http://blocklune.github.io/posts/45e2d42.html</id>
    <published>2022-11-05T08:15:25.000Z</published>
    <updated>2023-01-12T04:01:17.672Z</updated>
    
    <content type="html"><![CDATA[<p>这事儿要从一周前讲起，有人在群里问了这么一道题，要求用 C 实现：</p><span id="more"></span><blockquote><p>习题 2-5 分数化小数（decimal）<br>输入正整数 a,b,c，输出 a&#x2F;b 的小数形式，精确到小数点后 c 位。a,b&lt;&#x3D;10^6，c&lt;&#x3D;100。输入包含多组数据，结束标记为 a&#x3D;b&#x3D;c&#x3D;0。<br>样例输入：<br>1 6 4<br>0 0 0<br>样例输出：<br>0.1667</p></blockquote><p>当时我做了个简化的版本 —— 最多处理 1000 组输入，并且 c 比较小（即不需要高精度）的情况的代码，主要是做一个字符串处理，来构造一个传给 <code>printf()</code> 的格式控制字符串，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> <span class="comment">// 需要用到它的 itoa() 函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> <span class="comment">// 用到strcat拼接字符数组，memset清空字符数组</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 仅实现了最多有 1000 个输入的情况</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> a[<span class="number">1000</span>], b[<span class="number">1000</span>], c[<span class="number">1000</span>], cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> ans[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">1000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%u%u%u&quot;</span>, &amp;a[i], &amp;b[i], &amp;c[i]);</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (!(a[i] == <span class="number">0</span> &amp;&amp; b[i] == <span class="number">0</span> &amp;&amp; c[i] == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[i] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[i] = a[i] * <span class="number">1.0</span> / b[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> formatMsgP1[] = <span class="string">&quot;%.&quot;</span>;</span><br><span class="line">        <span class="type">char</span> *formatMsgP2;</span><br><span class="line">        <span class="comment">// 根据位数动态确定 char 数组的大小</span></span><br><span class="line">        <span class="keyword">if</span> (c[i] &gt; <span class="number">99</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            formatMsgP2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c[i] &gt; <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            formatMsgP2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            formatMsgP2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        itoa(c[i], formatMsgP2, <span class="number">10</span>);</span><br><span class="line">        <span class="type">char</span> formatMsgP3[] = <span class="string">&quot;lf\n&quot;</span>;</span><br><span class="line">        <span class="type">char</span> formatMsg[<span class="number">20</span>];</span><br><span class="line">        <span class="built_in">strcat</span>(formatMsg, formatMsgP1);</span><br><span class="line">        <span class="built_in">strcat</span>(formatMsg, formatMsgP2);</span><br><span class="line">        <span class="built_in">strcat</span>(formatMsg, formatMsgP3);</span><br><span class="line">        <span class="built_in">printf</span>(formatMsg, ans[i]);</span><br><span class="line">        <span class="built_in">memset</span>(formatMsg, <span class="number">0</span>, <span class="keyword">sizeof</span>(formatMsg)); <span class="comment">// 清空数组</span></span><br><span class="line">        <span class="built_in">free</span>(formatMsgP2);                       <span class="comment">// 释放指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的代码就比较麻烦，大量的代码都用在字符串拼接了。但今天看到一篇文章（<a href="https://mxte.cc/90.html">《使用变量设定小数点位数》</a>），才知道原来根本不需要那么麻烦。</p><p>本来我的目标是构造这么一个格式控制字符串 <code>%.&lt;c&gt;lf</code>，其中 <code>&lt;c&gt;</code> 需要由用户输入。上边的思路就是输入数字之后用 <code>itoa()</code> 函数把输入的数字转成字符串，然后拼一拼。</p><p>但实际上可以这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.*lf&quot;</span>, c[i], ans[i]);</span><br></pre></td></tr></table></figure><p>使用 <code>*</code>，<code>printf()</code> 就知道了，需要去后边找这么一个参数。</p><p>所以上边 <code>return 0;</code> 前面那个 <code>for</code> 里那么多东西都只要换成这一句就行了。</p><p>下边贴出一个用动态数组实现的任意组数数据输入的代码（依然没有高精度，我不会啊）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NUMS</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> c;</span><br><span class="line">    <span class="type">double</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NUMS</span> *<span class="title">p</span> =</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">append</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>, <span class="type">double</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%u%u%u&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span> &amp;&amp; c == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> tmp_ans = a * <span class="number">1.0</span> / b;</span><br><span class="line">            append(c, tmp_ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.*lf\n&quot;</span>, (p + i)-&gt;c, (p + i)-&gt;ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">append</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> _c, <span class="type">double</span> _ans)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> NUMS));</span><br><span class="line">        p-&gt;c = _c;</span><br><span class="line">        p-&gt;ans = _ans;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> NUMS *tmp = <span class="built_in">calloc</span>(size, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> NUMS));</span><br><span class="line">        <span class="built_in">memcpy</span>(tmp, p, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> NUMS) * size);</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="built_in">calloc</span>(size + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> NUMS));</span><br><span class="line">        <span class="built_in">memcpy</span>(p, tmp, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> NUMS) * (size + <span class="number">1</span>));</span><br><span class="line">        (p + size)-&gt;c = _c;</span><br><span class="line">        (p + size)-&gt;ans = _ans;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="built_in">free</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这事儿要从一周前讲起，有人在群里问了这么一道题，要求用 C 实现：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>值传递、指针传递、引用传递</title>
    <link href="http://blocklune.github.io/posts/c8a20144.html"/>
    <id>http://blocklune.github.io/posts/c8a20144.html</id>
    <published>2022-11-05T06:48:31.000Z</published>
    <updated>2022-11-05T07:43:16.703Z</updated>
    
    <content type="html"><![CDATA[<p>接上文<a href="https://blocklune.github.io/posts/50c16b14.html">《一个有关指针传参的问题》</a>，打算结合一些简单的例子系统地梳理一下 C&#x2F;C++ 中的值传递、指针传递和 C++ 中特有的 引用传递。</p><span id="more"></span><h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p><strong>值传递</strong>传递实际上只是在执行函数的时候将实参的值赋给了形参，在此之后函数体内对形参的任何操作都与原来的实参无关了。</p><p>例如下边这个代码 1:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值传递 (C++代码)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The value of n in func(): &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The address of n in func(): &quot;</span> &lt;&lt; &amp;n &lt;&lt; endl;</span><br><span class="line">    n++;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Then the value of n in func(): &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The value of n in main(): &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The address of n in main(): &quot;</span> &lt;&lt; &amp;n &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func</span>(n);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Then the value of n in main(): &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值传递 (C代码)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The value of n in func(): %d\n&quot;</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The address of n in func(): 0x%x\n&quot;</span>, &amp;n);</span><br><span class="line">    n++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then the value of n in func(): %d\n&quot;</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The value of n in main(): %d\n&quot;</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The address of n in main(): 0x%x\n&quot;</span>, &amp;n);</span><br><span class="line">    func(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then the value of n in main(): %d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下边是可能的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The value of n in main(): 0</span><br><span class="line">The address of n in main(): 0x61fe1c</span><br><span class="line">The value of n in func(): 0</span><br><span class="line">The address of n in func(): 0x61fdf0</span><br><span class="line">Then the value of n in func(): 1</span><br><span class="line">Then the value of n in main(): 0</span><br></pre></td></tr></table></figure><p>第二行第四行说明，<code>main()</code> 中的实参 n 与 <code>func()</code> 中的形参 n 存储在内存的不同位置，不是同一个变量。第五第六行说明，对形参 n 的操作，不会影响实参 n。</p><h2 id="指针传递"><a href="#指针传递" class="headerlink" title="指针传递"></a>指针传递</h2><p><strong>指针传递</strong>也就是传参时不直接传某个参数的值，而是传它的地址。把这个地址作为实参，而形参又是复制实参而来的，所以形参也是原来参数的地址，这样再对形参解除引用，实际上就是对同一内存的值进行操作，所以当然在自定函数中的操作会在主函数中反映出来，请看下边的代码 2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指针传递 (C++代码)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The value of n(*p) in func(): &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The address of n(p) in func(): &quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">    (*p)++;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Then the value of n(*p) in func(): &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The value of n in main(): &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The address of n in main(): &quot;</span> &lt;&lt; &amp;n &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func</span>(&amp;n); <span class="comment">// 把想要传递的参数的地址作为实参传入</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Then the value of n in main(): &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指针传递 (C代码)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The value of n(*p) in func(): %d\n&quot;</span>, *p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The address of n(p) in func(): 0x%x\n&quot;</span>, p);</span><br><span class="line">    (*p)++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then the value of n(*p) in func(): %d\n&quot;</span>, *p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The value of n in main(): %d\n&quot;</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The address of n in main(): 0x%x\n&quot;</span>, &amp;n);</span><br><span class="line">    func(&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then the value of n in main(): %d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下边是可能的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The value of n in main(): 0</span><br><span class="line">The address of n in main(): 0x61fe1c</span><br><span class="line">The value of n(*p) in func(): 0</span><br><span class="line">The address of n(p) in func(): 0x61fe1c</span><br><span class="line">Then the value of n(*p) in func(): 1</span><br><span class="line">Then the value of n in main(): 1</span><br></pre></td></tr></table></figure><p>这实际上就是 <a href="https://blocklune.github.io/posts/50c16b14.html#%E5%88%86%E6%9E%90%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">《一个有关指针传参的问题》- 分析及解决分案</a> 中的代码 2 的思路。只不过这里我们是对 <code>int</code> 类型的普通变量操作，所以函数接受的参数类型是 <code>int*</code>，而在那篇文章中是要对 <code>int*</code>类型的变量操作，所以自定函数接受的参数类型变成了<code>int**</code>。</p><h2 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h2><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>注意引用传递是 C++ 的特性，C 没有这个特性。</div></article><p><strong>引用传递</strong>相当于给实参取了个别名，对形参的操作会同步到实参那边去，还是来看下边的代码 3 吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用传递 (C++代码)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;n2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The value of n2 in func(): &quot;</span> &lt;&lt; n2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The address of n2 in func(): &quot;</span> &lt;&lt; &amp;n2 &lt;&lt; endl;</span><br><span class="line">    n2++;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Then the value of n2 in func(): &quot;</span> &lt;&lt; n2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n1 = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The value of n1 in main(): &quot;</span> &lt;&lt; n1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The address of n1 in main(): &quot;</span> &lt;&lt; &amp;n1 &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func</span>(n1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Then the value of n1 in main(): &quot;</span> &lt;&lt; n1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下边是可能的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The value of n1 in main(): 0</span><br><span class="line">The address of n1 in main(): 0x61fe1c</span><br><span class="line">The value of n2 in func(): 0</span><br><span class="line">The address of n2 in func(): 0x61fe1c</span><br><span class="line">Then the value of n2 in func(): 1</span><br><span class="line">Then the value of n1 in main(): 1</span><br></pre></td></tr></table></figure><p>类似地，<code>int</code> 类型的引用类型是 <code>int&amp;</code>，<code>int*</code> 的引用类型是 <code>int*&amp;</code>。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><p><a href="https://www.jianshu.com/p/2b5594b876ef">C++ 值传递、指针传递、引用传递 - 简书 (jianshu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/dingxiaoqiang/p/8012578.html">C++ 值传递、指针传递、引用传递详解 - zqlucky - 博客园 (cnblogs.com)</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;接上文&lt;a href=&quot;https://blocklune.github.io/posts/50c16b14.html&quot;&gt;《一个有关指针传参的问题》&lt;/a&gt;，打算结合一些简单的例子系统地梳理一下 C&amp;#x2F;C++ 中的值传递、指针传递和 C++ 中特有的 引用传递。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="函数传参" scheme="http://blocklune.github.io/tags/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/"/>
    
  </entry>
  
  <entry>
    <title>一个有关指针传参的问题</title>
    <link href="http://blocklune.github.io/posts/50c16b14.html"/>
    <id>http://blocklune.github.io/posts/50c16b14.html</id>
    <published>2022-11-03T12:52:38.000Z</published>
    <updated>2022-11-16T07:33:12.108Z</updated>
    
    <content type="html"><![CDATA[<p>这是我学习指针过程中遇到的一个问题，问过大佬才似乎懂了点，在此记录。顺便记下一句大佬说的话：</p><blockquote><p>注意到一点就行，指针其实也就是个存了内存地址的变量，<strong>它本身同时也具有内存地址</strong>。</p></blockquote><span id="more"></span><h2 id="问题的产生"><a href="#问题的产生" class="headerlink" title="问题的产生"></a>问题的产生</h2><p>事情是这样，学习了一点指针，就想自己实现一个会自动变长的数组。我也不期望把它做成一个类什么的，只有一个小目标，就是实现一个函数，能往这个动态数组后边加元素。我本来的 <strong>错误</strong> 代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> size, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums) <span class="comment">// 如果数组指针不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 暂存原来的数据</span></span><br><span class="line">        <span class="type">int</span> *tmp_nums = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line">        <span class="built_in">memcpy</span>(tmp_nums, nums, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        <span class="comment">// 释放掉原指针</span></span><br><span class="line">        <span class="keyword">delete</span>[] nums;</span><br><span class="line">        <span class="comment">// 元素数量 + 1</span></span><br><span class="line">        nums = <span class="keyword">new</span> <span class="type">int</span>[size + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(nums, tmp_nums, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        nums[size] = n;</span><br><span class="line">        <span class="keyword">delete</span>[] tmp_nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">1</span>];</span><br><span class="line">        nums[<span class="number">0</span>] = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp_n;</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> *nums = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">51</span>; i &lt;= <span class="number">55</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp_n = i;</span><br><span class="line">        <span class="built_in">append</span>(nums, size, tmp_n);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调试过程中发现一直会报 <code>Segmentation fault</code>，但是如果改成下边这样，却是可以的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *nums = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">int</span> size, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums) <span class="comment">// 如果数组指针不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 暂存原来的数据</span></span><br><span class="line">        <span class="type">int</span> *tmp_nums = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line">        <span class="built_in">memcpy</span>(tmp_nums, nums, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        <span class="comment">// 释放掉原指针</span></span><br><span class="line">        <span class="keyword">delete</span>[] nums;</span><br><span class="line">        <span class="comment">// 元素数量 + 1</span></span><br><span class="line">        nums = <span class="keyword">new</span> <span class="type">int</span>[size + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(nums, tmp_nums, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        nums[size] = n;</span><br><span class="line">        <span class="keyword">delete</span>[] tmp_nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">1</span>];</span><br><span class="line">        nums[<span class="number">0</span>] = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp_n;</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">51</span>; i &lt;= <span class="number">55</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp_n = i;</span><br><span class="line">        <span class="built_in">append</span>(size, tmp_n);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改动的内容就是把原来的数组变成了全局的。局部的不正常，全局就对了，所以猜测，类似是形参和实参的区别。大佬们帮我分析了分析，提出了下边的解决方案：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">int</span> **, <span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp_n;</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> *nums = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">51</span>; i &lt;= <span class="number">55</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp_n = i;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        nums 是一个指针，这个指针是我们动态数组的第一个元素的地址</span></span><br><span class="line"><span class="comment">        对 nums 取地址传参，传的是 nums 这个指针的地址</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">append</span>(&amp;nums, size, tmp_n);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接上文的注释</span></span><br><span class="line"><span class="comment">ptr 是一个指针，这个指针是上边的 nums 的地址</span></span><br><span class="line"><span class="comment">*ptr 得到了这个地址的值，这个值是指向动态数组第一个元素的指针</span></span><br><span class="line"><span class="comment">**ptr 是第一个元素的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">int</span> **ptr, <span class="type">int</span> size, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*ptr) <span class="comment">// 如果数组指针不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 暂存原来的数据</span></span><br><span class="line">        <span class="type">int</span> *tmp_nums = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line">        <span class="built_in">memcpy</span>(tmp_nums, *ptr, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        <span class="comment">// 释放掉原指针</span></span><br><span class="line">        <span class="keyword">delete</span>[] * ptr;</span><br><span class="line">        <span class="comment">// 元素数量 + 1</span></span><br><span class="line">        *ptr = <span class="keyword">new</span> <span class="type">int</span>[size + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(*ptr, tmp_nums, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        (*ptr)[size] = n;</span><br><span class="line">        <span class="keyword">delete</span>[] tmp_nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        (*ptr) = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">1</span>];</span><br><span class="line">        (*ptr)[<span class="number">0</span>] = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样运行结果就正常了。</p><h2 id="分析及解决方案"><a href="#分析及解决方案" class="headerlink" title="分析及解决方案"></a>分析及解决方案</h2><p><strong>2022 年 11 月 16 日更新：</strong>这边写的错误原因有点乱，我重新写了一篇：<a href="https://blocklune.github.io/posts/1ef1e20b.html">《当形参、实参是指针变量…》</a></p><p>下边给出两个简化的代码来解释这个问题。</p><p>首先来看代码 1，是对上边错误代码的简化:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMemory</span><span class="params">(<span class="type">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;The pointer in getMemory() points at:&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;The address of the pointer in getMemory():&quot;</span> &lt;&lt; &amp;p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    <span class="built_in">getMemory</span>(p);</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;The pointer in main() points at:&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;The address of the pointer in main():&quot;</span> &lt;&lt; &amp;p &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下边是代码 1 对应的程序的一个可能的输出 (具体内存地址可能不同):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The pointer in getMemory() points at: 0x10161c0</span><br><span class="line">The address of the pointer in getMemory(): 0x61fdf0</span><br><span class="line">The pointer in main() points at: 0x10</span><br><span class="line">The address of the pointer in main(): 0x61fe18</span><br></pre></td></tr></table></figure><p>可以看到，在 <code>getMemory()</code> 中的 <code>int*</code> 类型的指针 p 与 <code>main()</code> 中的 <code>int*</code> 类型的指针 p <strong>并不是同一个指针</strong>（存储这两个指针的内存地址不一样，在 <code>getMemory()</code> 中的指针 p 存储在 0x61fdf0，而 <code>main()</code> 中的存储在 0x61fe18），所以虽然我们在 <code>getMemory()</code> 中 new 得了存储空间（<code>getMemory()</code> 中的指针 p 指向了 0x10161c0），但这实际上只是为 <code>getMemory()</code> 中的指针 p 申请了存储空间，<code>main()</code> 中的指针 p 并没有申请到空间（<code>main()</code> 中的指针 p 指向了 0x10）。</p><p>也即，我们自己的函数中的指针是一个副本，给这个指针申请空间的操作并没有实现给 <code>main()</code> 中的同名指针也申请到空间！</p><p>接着是代码 2，类似于上边的正确解法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMemory2</span><span class="params">(<span class="type">int</span> **p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *p2 = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The pointer in getMemory() points at:&quot;</span> &lt;&lt; *p2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The address of the pointer in getMemory():&quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p1;</span><br><span class="line">    <span class="built_in">getMemory2</span>(&amp;p1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The pointer in main() points at:&quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The address of the pointer in main():&quot;</span> &lt;&lt; &amp;p1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> p1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下边是代码 2 对应的程序的一个可能的输出 (具体内存地址可能不同):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The pointer in getMemory() points at: 0x7461c0</span><br><span class="line">The address of the pointer in getMemory(): 0x61fe18</span><br><span class="line">The pointer in main() points at: 0x7461c0</span><br><span class="line">The address of the pointer in main(): 0x61fe18</span><br></pre></td></tr></table></figure><p>从 <code>main()</code> 开始看，p1 是一个 <code>int*</code> 类型的指针。与上边代码 1 不同，现在 <code>getMemory2()</code> 这个函数接受的参数是指针的指针，也就是指针的地址，所以我们传入的是 <strong>&amp;p1</strong>，也就是指针 p1 的地址。</p><p>再看 <code>getMemory2()</code> 函数，传入参数后，相当于现在 p2 &#x3D; &amp;p1，那么 *p2 &#x3D; p1。这里的 “&#x3D;” 表示 “就是” 而非赋值，所以我们对于 *p2 进行的任何操作，与对 p1 进行的操作都是等效的。</p><p>还有一种解决方案 —— 使用引用传递，对于上边的问题也就是使用 <code>int* &amp;</code> 类型，代码 3 如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMemory</span><span class="params">(<span class="type">int</span> *&amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The pointer in getMemory() points at: &quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The address of the pointer in getMemory(): &quot;</span> &lt;&lt; &amp;p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    <span class="built_in">getMemory</span>(p);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The pointer in main() points at: &quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The address of the pointer in main(): &quot;</span> &lt;&lt; &amp;p &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要将上边的代码 1 中 <code>void getMemory(int *p)</code> 改为 <code>void getMemory(int *&amp;p)</code> 就行了，下边是可能的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The pointer in getMemory() points at: 0x10261c0</span><br><span class="line">The address of the pointer in getMemory(): 0x61fe18</span><br><span class="line">The pointer in main() points at: 0x10261c0</span><br><span class="line">The address of the pointer in main(): 0x61fe18</span><br></pre></td></tr></table></figure><p>可以看到已经实现了我们想要的效果。</p><p>也可以参考参考这篇文章：<a href="https://developer.aliyun.com/article/297093">《C++ 函数的传入参数是指针的指针（**）的详解》</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我学习指针过程中遇到的一个问题，问过大佬才似乎懂了点，在此记录。顺便记下一句大佬说的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意到一点就行，指针其实也就是个存了内存地址的变量，&lt;strong&gt;它本身同时也具有内存地址&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="问题" scheme="http://blocklune.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
    <category term="已解决" scheme="http://blocklune.github.io/tags/%E5%B7%B2%E8%A7%A3%E5%86%B3/"/>
    
    <category term="指针" scheme="http://blocklune.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
    <category term="函数传参" scheme="http://blocklune.github.io/tags/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ 中赋值语句的返回值问题</title>
    <link href="http://blocklune.github.io/posts/9693ba6.html"/>
    <id>http://blocklune.github.io/posts/9693ba6.html</id>
    <published>2022-10-27T11:52:56.000Z</published>
    <updated>2022-10-31T02:57:40.048Z</updated>
    
    <content type="html"><![CDATA[<p>我曾经一直以为 C&#x2F;C++ 中赋值语句的返回值不是 0 就是 1 —— 成功执行赋值操作返回 1，没有成功执行就返回 0。直到今天课上的一个例子，才让我知道，原来<strong>赋值语句的返回值就是赋的值的大小</strong>！</p><span id="more"></span><p>起因是下边的这道题目：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="comment">// 下边各个循环的执行次数是多少：</span></span><br><span class="line"><span class="comment">// 1: 死循环</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2：0 次循环</span></span><br><span class="line"><span class="keyword">for</span> (; i = <span class="number">0</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3：0 次循环</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4：死循环</span></span><br><span class="line"><span class="keyword">while</span> (i = <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个因为 for 语句的第二个参数缺失，所以该循环不会停止；第三个初值<code>i=0;</code>即不满足<code>i&lt;0;</code>，故不执行。</p><p>第四个，按照我错误的理解，赋值成功返回 1，所以说得通是<code>while(true)</code>永远执行，但四二个却无法这么解释了。去试了试写个下边两个东西输出赋值语句的返回值，才发现原来<strong>赋值语句的返回值就是赋的值</strong>。</p><p>C 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">5</span>, c = <span class="number">-5</span>, d;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)(d = a));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)(d = b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)(d = c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++ 代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">5</span>, c = <span class="number">-5</span>, d;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">int</span>(d = a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">int</span>(d = b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">int</span>(d = c) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果均如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">5</span><br><span class="line">-5</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;我曾经一直以为 C&amp;#x2F;C++ 中赋值语句的返回值不是 0 就是 1 —— 成功执行赋值操作返回 1，没有成功执行就返回 0。直到今天课上的一个例子，才让我知道，原来&lt;strong&gt;赋值语句的返回值就是赋的值的大小&lt;/strong&gt;！&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ 格式化输入输出汇总</title>
    <link href="http://blocklune.github.io/posts/b4e7acd7.html"/>
    <id>http://blocklune.github.io/posts/b4e7acd7.html</id>
    <published>2022-10-19T12:19:14.000Z</published>
    <updated>2022-11-05T07:13:35.352Z</updated>
    
    <content type="html"><![CDATA[<p>本文汇总一下 C 语言 <code>scanf</code> 和 <code>printf</code> 的格式控制方法以及 C++ 的 <code>&lt;iomanip&gt;</code> 库。</p><span id="more"></span><h1 id="c-语言"><a href="#C-语言" class="headerlink" title="C 语言"></a>C 语言</h1><p>此处内容来源于 《C Primer Plus （第 6 版）中文版》。</p><h2 id="printf-函数"><a href="#printf-函数" class="headerlink" title="printf() 函数"></a>printf() 函数</h2><h3 id="转换说明"><a href="#转换说明" class="headerlink" title="转换说明"></a>转换说明</h3><p>ANSI C 中 printf() 的转换说明（P69，表 4.3：转换说明及其打印的输出结果）</p><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><table><thead><tr><th>转换说明</th><th>打印的结果</th></tr></thead><tbody><tr><td>%d &#x2F; %i</td><td>有符号十进制整数</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%o</td><td>无符号八进制整数</td></tr><tr><td>%x</td><td>无符号十六进制整数，使用十六进制数 0f</td></tr><tr><td>%X</td><td>无符号十六进制整数，使用十六进制数 0F</td></tr><tr><td>%a &#x2F; %A</td><td>十六进制数、浮点数和 p 计数法（C99&#x2F;C11）</td></tr></tbody></table><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><table><thead><tr><th>转换说明</th><th>打印的结果</th></tr></thead><tbody><tr><td>%e &#x2F; %E</td><td>浮点数，e 计数法</td></tr><tr><td>%f</td><td>浮点数，十进制计数法</td></tr><tr><td>%g &#x2F; %G</td><td>根据值的不同，自动选择 %f 或 %e &#x2F; %E。%e &#x2F; %E 格式用于指数小于-4 或大于等于精度时。</td></tr><tr><td>%a &#x2F; %A</td><td>十六进制数、浮点数和 p 计数法（十六进制指数计数法）（C99&#x2F;C11）</td></tr></tbody></table><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><table><thead><tr><th>转换说明</th><th>打印的结果</th></tr></thead><tbody><tr><td>%c</td><td>单个字符<strong>（包括空白字符）</strong></td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%p</td><td>指针</td></tr><tr><td>%%</td><td>百分号</td></tr></tbody></table><h3 id="转换说明修饰符"><a href="#转换说明修饰符" class="headerlink" title="转换说明修饰符"></a>转换说明修饰符</h3><p>（P71，表 4.4：printf()的修饰符）：</p><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td><strong>标记</strong></td><td>共 5 种（-, +, 空格, # , 0）</td></tr><tr><td><strong>数字</strong></td><td>最小字段宽度（不够自动变宽）</td></tr><tr><td><strong>.数字</strong></td><td>精度（具体见下边说明）</td></tr><tr><td><strong>h</strong></td><td>和整型转换说明一起使用，表示 short int 或 unsigned short int</td></tr><tr><td>hh</td><td>和整型转换说明一起使用，表示 signed char 或 unsigned char</td></tr><tr><td>j</td><td>和整型转换说明一起使用，表示 intmax_t 或 uintmax_t （这些类型定义在 &lt;stdint.h&gt; 中）</td></tr><tr><td><strong>l</strong></td><td>和整型转换说明一起使用，表示 long int 或 unsigned long int（和浮点型转换说明构成 %lf，表示 double）</td></tr><tr><td><strong>ll</strong></td><td>和整型转换说明一起使用，表示 long long int 或 unsigned long long int（C99）</td></tr><tr><td><strong>L</strong></td><td>和浮点转换说明一起使用，表示 long double 类型的值</td></tr><tr><td>t</td><td>和整型转换说明一起使用，表示 ptrdiff_t （ptrdiff_t 是两个指针差值的类型，C99）</td></tr><tr><td>z</td><td>和整型转换说明一起使用，表示 size_t （size_t 是 sizeof 返回的类型，C99）</td></tr></tbody></table><blockquote><p>上边的 <strong>.数字</strong>：</p><p>对于 %e、%E、%f，表示小数点右边数字的位数；</p><p>对于 %g、%G，表示有效数字的最大位数；</p><p>对于 %s，表示待打印字符的最大数量；</p><p>对于整型转换，表示待打印数字的最小位数，如有必要，使用前导 0 来达到这个位数。</p><p>只是用 . 表示其后跟随了一个 0，所以 %.f 和 %.0f 相同。</p></blockquote><p>（P72，表 4.5：printf()中的标记）：</p><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td>-</td><td>左对齐</td></tr><tr><td>+</td><td>有符号值前加正负号</td></tr><tr><td>空格</td><td>有符号值正不加，负加负号</td></tr><tr><td>#</td><td>把结果转换为另一种形式，具体看下边</td></tr><tr><td>0</td><td>对于数值格式，用前导 0 代替空格填充字段宽度。对于整数格式，如果出现-标记或者指定精度，则忽略该标记</td></tr></tbody></table><blockquote><p># 的说明：</p><p>%o：以 0 开始；</p><p>%x &#x2F; %X：以 0x &#x2F; 0X 开始；</p><p>所有浮点格式：保证即使后边没有任何数字，也打印一个小数点字符；</p><p>%g &#x2F; %G：防止结果后边的 0 被删除。</p></blockquote><h2 id="scanf函数"><a href="#scanf-函数" class="headerlink" title="scanf()函数"></a>scanf()函数</h2><p>大部分与上边相同，只讲不一样的。</p><p>（P80，表 4.7：scanf()转换说明中的修饰符）：</p><table><thead><tr><th>转换说明</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>抑制赋值</td></tr><tr><td>数字</td><td>最大字符宽度。输入达到这个宽度或者第一次遇到空白字符时停止。</td></tr></tbody></table><p>scanf() 的返回值是成功读取的项数。如果没有读取任何项，则返回 0；如果检测到“文件结尾”，返回 EOF （EOF 是定义 &lt;stdio.h&gt; 中定义的特殊值，一般用 #define 定义为 -1）。</p><p><strong>注意：</strong>输入数字的时候，在不设置分隔符号时，scanf()默认使用空白字符进行分隔；但是输入字符时，空白字符不会被忽略，而是被顺利读入。</p><p>比如下边这道题：</p><p>有如下程序段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a1, a2;</span><br><span class="line"><span class="type">char</span> c1, c2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%c%d%c&quot;</span>, &amp;a1, &amp;c1, &amp;a2, &amp;c2);</span><br></pre></td></tr></table></figure><p>若要求 a1, a2, c1, c2 的值分别为 10, 20, A, B，正确的数据输入是（ ）：</p><p>A. 10A20 B&lt;CR&gt;</p><p>B. 10 A 20 B&lt;CR&gt;</p><p>C. 10 A20B&lt;CR&gt;</p><p>D. 10A 20B&lt;CR&gt;</p><p>正确答案为 D。</p><h1 id="c"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p>参考：<a href="https://blog.csdn.net/Jacky_Feng/article/details/109119782">【C++】C++标准库之 iomanip 库（格式输入输出）_Jacky_Feng 的博客-CSDN 博客</a></p><table><thead><tr><th>控制符</th><th>作用</th></tr></thead><tbody><tr><td>oct</td><td>八进制输入&#x2F;输出</td></tr><tr><td>dec</td><td>十进制输入&#x2F;输出</td></tr><tr><td>hex</td><td>十六进制输入&#x2F;输出</td></tr><tr><td>setbase(n)</td><td>设置为 n 进制 (n &#x3D; 8, 10, 16)</td></tr><tr><td>setprecision(n)</td><td>设置浮点数的有效数字为 n 位</td></tr><tr><td>setfill(c)</td><td>设置字符填充为 c</td></tr><tr><td>setw(n)</td><td>设置宽度</td></tr><tr><td>setiosflags(ios::fixed)</td><td>设置浮点数以固定的小数位数显示</td></tr><tr><td>setiosflags(ios::scientific)</td><td>设置浮点数以科学计数法表示</td></tr><tr><td>setiosflags(ios::left)</td><td>输出左对齐</td></tr><tr><td>setiosflags(ios::right)</td><td>输出右对齐</td></tr><tr><td>setiosflags(ios::skipws)</td><td>忽略前导空格</td></tr><tr><td>setiosflags(ios::uppercase)</td><td>在以科学计数法输出 E 与十六进制输出 X 以大写输出，否则小写</td></tr><tr><td>setiosflags(ios::showpos)</td><td>输出正数时显示”+”号</td></tr><tr><td>setiosflags(ios::showpoint)</td><td>强制显示小数点</td></tr><tr><td>resetiosflags()</td><td>终止已经设置的输出格式状态，在括号中应指定内容</td></tr></tbody></table><p>更多请见：<a href="https://www.w3cschool.cn/doc_cpp/cpp-header-iomanip.html">iomanip CPP 官方教程 _w3cschool</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文汇总一下 C 语言 &lt;code&gt;scanf&lt;/code&gt; 和 &lt;code&gt;printf&lt;/code&gt; 的格式控制方法以及 C++ 的 &lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt; 库。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="iomanip" scheme="http://blocklune.github.io/tags/iomanip/"/>
    
  </entry>
  
  <entry>
    <title>挖老婆矿！—— NovelAI 初试</title>
    <link href="http://blocklune.github.io/posts/f17b3e8b.html"/>
    <id>http://blocklune.github.io/posts/f17b3e8b.html</id>
    <published>2022-10-15T12:36:02.000Z</published>
    <updated>2022-10-15T15:46:18.030Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间，感觉突然之间，就有很多很多将现实图片二次元化啊，按照每句歌词生成一副画作啊的 AI 绘画应用的图文视频出现。和室友聊天还说是不是最近一段时间 AI 技术突破什么瓶颈突飞猛进了。后来才知道，原来是 NovelAI 泄露了… 这样一来，本地部署方便了起来，于是整了一个玩玩。由于跑 AI 嘛，GPU 比较呼啸，跟挖矿一样，我就戏称我这是在“挖老婆矿”了。</p><span id="more"></span><p>注：这篇文章更偏向于我记录生成时使用的 tag， 不涉及基础操作。我使用的 NovelAI 下载自<a href="https://www.bilibili.com/video/BV1EV4y1L7dX">这里</a>。</p><h1 id="一个头像一堆头像"><a href="#一个头像（一堆头像）" class="headerlink" title="一个头像（一堆头像）"></a>一个头像（一堆头像）</h1><p>我最开始只是用几个 tag 生成。经历了一些粗浅的尝试后，发现生成的质量并不高。但是看到了<a href="https://www.yuque.com/longyuye/lmgcwy/goa36x">一篇文章</a>，照着里边的 tag 写，才算真正开始了探索。</p><p>首先是根据上边那篇文章最后的示例增改了点 tag 形成的 prompt:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blue pen illustration, light blue background, flowers on face, growth, nature, beautiful face, pink hair,shawl hair, zoom in on eyes, apathy, red eye shadow, petite, best quality, masterpiece</span><br></pre></td></tr></table></figure><p>然后生成出了下面这些相当不错的图案：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0HgAK.jpg"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0H676.jpg"></p><p>下边分类讲讲 tag:</p><p>提高总体质量的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterpiece, best quality, by famous artist, beautiful face</span><br></pre></td></tr></table></figure><p>使整体的风格偏向更具插画感：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">illustration</span><br></pre></td></tr></table></figure><p>限定背景的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxx + backgroud  (比如上边的淡蓝色背景就是 light blue background )</span><br></pre></td></tr></table></figure><p>让生成出来的 waifu 更幼的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">petite</span><br></pre></td></tr></table></figure><p>让脸上、头发上出现花朵装饰的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flowers on face</span><br></pre></td></tr></table></figure><p>让眼睛更大的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zoom in one eyes</span><br></pre></td></tr></table></figure><p>尝到了甜头后，我就想换头像了。但我不想完全抛弃现在的头像，于是就试图拿它做派生。</p><p>首先描述一下原来的头像，让 AI 知道我大概是想要怎样的一个 “老婆”。<del>（虽然其实我描述的时候更感觉是在捏女儿）</del> 顺便一说，我这个原来的头像其实也是 AI 生成的，叫 <a href="https://waifulabs.com/generate">WaifuLabs</a>，是我把原来生成出来的丢进 PS 去了水印，又自己修缮了一下得到的。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0I1Z8.jpg" alt="上边是 WaifuLabs 生成出来时候的样子，下边是我自己 PS 改的"></p><p>抛却那些提高质量的，大概给了 <code>披肩发</code>、<code>深灰色头发</code>、<code>深灰色眼睛</code>、<code>红色眼影</code>、<code>白色衬衫</code>、<code>微笑</code> 这些 tag。同时模仿了上边，给了 <code>面部的花</code> 之类的 tag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;masterpiece,best quality&#125;&#125;,shawl hair,dark grey hair, dark grey eyes,red eye shadow,  white shirt,illustration,flower on face,growth, nature,beautiful face, smile, zoom in one eyes</span><br></pre></td></tr></table></figure><p>以上边的内容为 prompt，同时把我改的那张扔给 NovelAI，根据生成结果又慢慢改，添加 tag，最终的 prompt 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;masterpiece,best quality,by wlop&#125;&#125;,shawl hair,dark grey hair, dark grey eyes,red eye shadow, white shirt,&#123;&#123;&#123;illustration&#125;&#125;&#125;,flower on face, growth, nature, beautiful face, small smile, zoom in one eyes, &#123;&#123;&#123;&#123;petite&#125;&#125;&#125;&#125;, dramatic shadows, ink,eye-focus, portrait, red hairclip</span><br></pre></td></tr></table></figure><p>跑了大概 100 张，然后挑了挑，下边展示的是部分高质量的：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0IgzR.png"></p><p>又是一波奇奇怪怪的调整：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0onkF.png"></p><p>最后挑选出了这张我觉得挺有特色的：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0o161.png"></p><p>然后开始根据这张进行派生：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0jbEn.png"></p><h1 id="一张壁纸一堆壁纸"><a href="#一张壁纸（一堆壁纸）" class="headerlink" title="一张壁纸（一堆壁纸）"></a>一张壁纸（一堆壁纸）</h1><p>这事儿开始的挺搞笑的，当时我正在调上边的头像参数，坐我旁边玩 CSGO 的朋友希望我把某把枪拟人，然后发我了下边的图片：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0TGgs.jpg"></p><p>然后我加了点描述词生成了，但生成效果并不好，我就又开始研究我上边的头像了。我完全忘记了我还拿着这张图生成的某张图在做派生呢… 我只是改回了我的 prompt，就意外地得到了下边这张图：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0TI8H.png"></p><p>似乎是把枪头画成了那条条纹？我也不知道。反正着实是惊艳到我了，扔到 bigjpg 那边提高了一下分辨率，再扔进 PS 调了一下曲线，嘿嘿，新的手机壁纸有了！</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x07eG4.png" alt="拉的曲线"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x07Prq.png" alt="新的手机壁纸！"></p><p>然后又拿这张图和基于上边改的 prompt 做了派生…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;masterpiece,best quality&#125;&#125;,shawl hair,dark grey hair, dark grey eyes,red eye shadow,red scanf,  light grey shirt,&#123;&#123;illustration&#125;&#125;,red flower on face,white flower on hair,growth, nature,beautiful face, &#123;&#123;indifferent&#125;&#125;, zoom in one eyes,1girl, red flower background, gold fence background,focus on eye</span><br></pre></td></tr></table></figure><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x07XO1.jpg"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x07vex.jpg"></p><p>相当不错！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近一段时间，感觉突然之间，就有很多很多将现实图片二次元化啊，按照每句歌词生成一副画作啊的 AI 绘画应用的图文视频出现。和室友聊天还说是不是最近一段时间 AI 技术突破什么瓶颈突飞猛进了。后来才知道，原来是 NovelAI 泄露了… 这样一来，本地部署方便了起来，于是整了一个玩玩。由于跑 AI 嘛，GPU 比较呼啸，跟挖矿一样，我就戏称我这是在“挖老婆矿”了。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/AI/"/>
    
    <category term="NovelAI" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/AI/NovelAI/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="NovelAI" scheme="http://blocklune.github.io/tags/NovelAI/"/>
    
    <category term="AI" scheme="http://blocklune.github.io/tags/AI/"/>
    
    <category term="人工智能" scheme="http://blocklune.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 中文乱码问题</title>
    <link href="http://blocklune.github.io/posts/ca05bed5.html"/>
    <id>http://blocklune.github.io/posts/ca05bed5.html</id>
    <published>2022-10-13T11:33:49.000Z</published>
    <updated>2023-01-13T02:32:22.541Z</updated>
    
    <content type="html"><![CDATA[<p><strong>2023 年 1 月 12 日更新：</strong> 找到了方便地改变 Windows 中终端默认编码的方法，所以原来的改变 C&#x2F;C++ 文件默认编码的方法可以淘汰了。</p><span id="more"></span><p>现在的新办法是：</p><p>打开 “控制面板 - 时钟和区域 - 区域 - 管理 - 更改系统区域设置(C)…”</p><p>勾选 “Beta 版: 使用 Unicode UTF-8 提供全球语言支持(U)”</p><p>确定，重启电脑。</p><p>打开 CMD 测试一下，输入 <code>chcp</code> 可以发现已经变成了 <code>65001</code>，说明成功了。</p><p>方法来源：<a href="https://blog.csdn.net/weixin_44285445/article/details/112325994">《Git Bash 中文显示乱码，options 修改为 zh_CN 和 utf-8 还是不行怎么办？看这里_bboy 枫亭的博客 - CSDN 博客_git +options》</a></p><p><strong>以下是原来的文章</strong></p><p>开门见山，我最后采用的解决方案是对 C&#x2F;C++ 文件单独设置默认编码。大致的操作方法是，打开 VS Code 的 <code>settings.json</code> 文件，添加如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;[cpp]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gbk&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[c]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gbk&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>具体的操作请参见原文：<a href="https://blog.csdn.net/qq_45538473/article/details/107258234">《VSCODE C 语言终端输出中文乱码编码设置》</a></p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>复盘一下解决这个问题的过程。</p><p>首先了解到的是 VS Code 中文乱码的根本原因——VS Code 默认的编码格式是 UTF-8 （这一点可在 VS Code 右下角看到），而 VS Code 调用的终端是 CMD，默认的编码格式是 gbk。所以解决方案就是两个方向：要么是更改终端的默认编码，从默认的 gbk 转为 utf8；要么就是更改 VS Code 中的 C&#x2F;C++ 文件的编码。</p><p><strong>2022&#x2F;10&#x2F;26 更新：</strong></p><p>看到一个有意思的科普视频，贴在这里，可以看看乱码到底是如何产生的。</p><div class="bvideo"><a href="//www.bilibili.com/video/BV1cB4y177QR" target="_blank">        <div class="bvideo-box">            <div class="bvideo-cover">                <div class="cover-default"></div>                <div class="bvideo-cover-layer" style="background-image:url(https://pic1.xuehuaimg.com/proxy/http://i0.hdslb.com/bfs/archive/95d3c1239ff3a3216e2b1bad6f280a530105078d.jpg)">                    <i class="icon-video"></i>                </div>                <span class="duration">00:15:00</span>            </div>            <div class="bvideo-info">                <p class="title">锟斤拷�⊠是怎样炼成的——中文显示“⼊”门指南【柴知道】</p>                <p class="card-status">                    <span class="play-num">                        <i class="fa fa-youtube-play"></i>                        <span>394.5万</span></span>                    <span>                        <i class="fa fa-list-alt"></i>                        <span>1.8万</span></span></p>                <div class="partition">                    <label class="card-label">视频</label>                    <label class="up-label"></label>                    <label class="up-name">柴知道</label>                </div>                <div class="actions hide"></div>            </div>        </div>    </a></div><h3 id="第一个方向更改终端默认编码"><a href="#第一个方向：更改终端默认编码" class="headerlink" title="第一个方向：更改终端默认编码"></a>第一个方向：更改终端默认编码</h3><p>了解到更改 CMD 编码为 utf8 的命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure><p>顺便一提，查看当前编码的命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chcp</span><br></pre></td></tr></table></figure><p><code>chcp 65001</code> 这串命令的意思就是更改代码页为 65001，也就是用 utf8 编码。</p><p>这串命令不是永久生效的，所以每次都要输入，比较麻烦。网上也有一些解决方案，比如通过修改注册表每次都自动运行一下上边的命令（<a href="https://www.jianshu.com/p/f40e494dc01d">《修改 Windows10 命令终端 cmd 的编码为 UTF-8》</a>），或者是配置 VS Code 让其自动输入的（<a href="https://blog.csdn.net/lzyws739307453/article/details/89823900">《永久解决 VS Code 终端中文乱码问题》</a>），可以去看看。</p><h3 id="第二个方向更改-vs-code-中的-cx2fc-文件的编码"><a href="#第二个方向：更改-VS-Code-中的-C-x2F-C-文件的编码" class="headerlink" title="第二个方向：更改 VS Code 中的 C&#x2F;C++ 文件的编码"></a>第二个方向：更改 VS Code 中的 C&#x2F;C++ 文件的编码</h3><p>最初这个方法我只是想临时解决一下，就比较简单。点一下右下角的 UTF-8，选择 <code>通过编码重新打开</code>，选择 gbk 就行了。但这样只有一次，然后就想看看有没有永久的方法，便看到了上边的文章。</p><p>顺便一提，这里可能还要把 VS Code 设置中的自动猜测编码功能打开，具体操作如下：</p><ol><li>使用 <code>Ctrl + ,</code> 快捷键打开设置；</li><li>在搜索框输入 <code>encoding</code> ，找到 <code>Files:Auto Guess Encoding</code>，勾上它。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/qq_45538473/article/details/107258234">《VSCODE C 语言终端输出中文乱码编码设置》</a></li><li><a href="https://www.jianshu.com/p/f40e494dc01d">《修改 Windows10 命令终端 cmd 的编码为 UTF-8》</a></li><li><a href="https://blog.csdn.net/lzyws739307453/article/details/89823900">《永久解决 VS Code 终端中文乱码问题》</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;2023 年 1 月 12 日更新：&lt;/strong&gt; 找到了方便地改变 Windows 中终端默认编码的方法，所以原来的改变 C&amp;#x2F;C++ 文件默认编码的方法可以淘汰了。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="VS Code" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/VS-Code/"/>
    
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="问题" scheme="http://blocklune.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
    <category term="已解决" scheme="http://blocklune.github.io/tags/%E5%B7%B2%E8%A7%A3%E5%86%B3/"/>
    
    <category term="VS Code" scheme="http://blocklune.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>C 语言中与(&amp;&amp;)和或(||)运算符的短路运算</title>
    <link href="http://blocklune.github.io/posts/13d09bbb.html"/>
    <id>http://blocklune.github.io/posts/13d09bbb.html</id>
    <published>2022-10-11T13:23:55.000Z</published>
    <updated>2022-10-13T12:36:42.540Z</updated>
    
    <content type="html"><![CDATA[<p>此篇笔记来源于下边的这个题目。<br><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/12/xaK5c9.png"></p><span id="more"></span><p>本来以为结果为 3，但是实际跑了一下发现结果是 1。请教了一下大佬知道了这叫做或运算符（||）的短路运算。</p><p>正常来说，或运算中只要有一个为真，结果就为真。所谓或的短路运算就是说，如果已经出现了真，那么后续的运算就不会进行了。以上面的题目为例就是，因为第一个 ++x 这个运算结果肯定为真，那么后面的另外两个 ++x 就不会运行。</p><p>类似的，还有与（&amp;&amp;）的短路运算。正常来说，与运算中必须所有均为真，结果才为真。所以与的短路就是，如果前面的运算结果已经有假了，那么就可以确定这个与运算总体的结果为假，也就不会运行后边的运算了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;此篇笔记来源于下边的这个题目。&lt;br&gt;&lt;img src=&quot;https://s1.ax1x.com/2022/10/12/xaK5c9.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Icarus 主题自带的标签插件的使用以及官方文档中的常用消息框模板</title>
    <link href="http://blocklune.github.io/posts/8ffe9166.html"/>
    <id>http://blocklune.github.io/posts/8ffe9166.html</id>
    <published>2022-10-07T08:47:49.000Z</published>
    <updated>2022-10-07T11:27:24.064Z</updated>
    
    <content type="html"><![CDATA[<p>之前有写过使用 Bulma 美化博文的方法，然后才发现原来 Icarus 本身就带了很多标签插件可供直接使用。而官方文档中的横跨文章的提示框、警告框什么的我找遍了文档也没发现作者告诉我了调用的办法，直到今天才看到大佬的一篇文章讲到原来那些本身就是用原生 html 写的。所以写下此篇笔记，方便以后用。</p><span id="more"></span><h1 id="官方自带标签插件"><a href="#官方自带标签插件" class="headerlink" title="官方自带标签插件"></a>官方自带标签插件</h1><p>官方文档：<a href="https://ppoffice.github.io/hexo-theme-icarus/uncategorized/%E8%87%AA%E5%AE%9A%E4%B9%89hexo%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/">《自定义Hexo标签插件 - Icarus》</a></p><h2 id="消息框"><a href="#消息框" class="headerlink" title="消息框"></a>消息框</h2><h3 id="语法定义"><a href="#语法定义" class="headerlink" title="语法定义"></a>语法定义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:&lt;颜色&gt; size:&lt;大小&gt; icon:&lt;图标&gt; title:&lt;标题&gt; %&#125;</span><br><span class="line">    &lt;内容&gt;</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><h4 id="color颜色"><a href="#color-颜色" class="headerlink" title="color(颜色)"></a>color(颜色)</h4><p>可选参数，可能值、实现方法和效果见下方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message title:default %&#125;</span><br><span class="line">    一个没有设置颜色的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message">        <div class="message-header"><p>default</p></div>        <div class="message-body">            <p>一个没有设置颜色的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:dark title:dark %&#125;</span><br><span class="line">    一个深色(dark)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-dark">        <div class="message-header"><p>dark</p></div>        <div class="message-body">            <p>一个深色(dark)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:primary title:primary %&#125;</span><br><span class="line">    一个主题色(primary)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-primary">        <div class="message-header"><p>primary</p></div>        <div class="message-body">            <p>一个主题色(primary)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:info title:info %&#125;</span><br><span class="line">    一个提示色(info)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-info">        <div class="message-header"><p>info</p></div>        <div class="message-body">            <p>一个提示色(info)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:success title:success %&#125;</span><br><span class="line">    一个成功色(success)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-success">        <div class="message-header"><p>success</p></div>        <div class="message-body">            <p>一个成功色(success)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:warning title:warning %&#125;</span><br><span class="line">    一个警告色(warning)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-warning">        <div class="message-header"><p>warning</p></div>        <div class="message-body">            <p>一个警告色(warning)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:danger title:danger %&#125;</span><br><span class="line">    一个危险色(danger)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-danger">        <div class="message-header"><p>danger</p></div>        <div class="message-body">            <p>一个危险色(danger)的消息框。</p>        </div>    </article><h4 id="size尺寸"><a href="#size-尺寸" class="headerlink" title="size(尺寸)"></a>size(尺寸)</h4><p>可选参数，可能值、实现方法和效果见下方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message size:small title:small %&#125;</span><br><span class="line">    一个小(small)消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-small">        <div class="message-header"><p>small</p></div>        <div class="message-body">            <p>一个小(small)消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message title:default %&#125;</span><br><span class="line">    一个默认大小的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message">        <div class="message-header"><p>default</p></div>        <div class="message-body">            <p>一个默认大小的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message size:medium title:medium %&#125;</span><br><span class="line">    一个中(medium)消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-medium">        <div class="message-header"><p>medium</p></div>        <div class="message-body">            <p>一个中(medium)消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message size:large title:large %&#125;</span><br><span class="line">    一个大(large)消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-large">        <div class="message-header"><p>large</p></div>        <div class="message-body">            <p>一个大(large)消息框。</p>        </div>    </article><h4 id="icon图标"><a href="#icon-图标" class="headerlink" title="icon(图标)"></a>icon(图标)</h4><p>可选参数，来源 <a href="https://fontawesome.com/search">FontAwesome</a>，类名中间含空格的<strong>加引号</strong>！</p><p>一些例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:success icon:&quot;fa-solid fa-circle-check&quot; title:&quot;fa-solid fa-circle-check&quot; %&#125;</span><br><span class="line">    一个外部带圈的勾。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-success">        <div class="message-header"><p><i class="fa-solid fa-circle-check mr-2"></i>fa-solid fa-circle-check</p></div>        <div class="message-body">            <p>一个外部带圈的勾。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:warning icon:&quot;fa-solid fa-triangle-exclamation&quot; title:&quot;fa-solid fa-triangle-exclamation&quot; %&#125;</span><br><span class="line">    一个警告标志。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-warning">        <div class="message-header"><p><i class="fa-solid fa-triangle-exclamation mr-2"></i>fa-solid fa-triangle-exclamation</p></div>        <div class="message-body">            <p>一个警告标志。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:danger icon:&quot;fa-solid fa-circle-exclamation&quot; title:&quot;fa-solid fa-circle-exclamation&quot; %&#125;</span><br><span class="line">    一个错误标志。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-danger">        <div class="message-header"><p><i class="fa-solid fa-circle-exclamation mr-2"></i>fa-solid fa-circle-exclamation</p></div>        <div class="message-body">            <p>一个错误标志。</p>        </div>    </article><h4 id="title标题"><a href="#title-标题" class="headerlink" title="title(标题)"></a>title(标题)</h4><p>可选参数，中间含空格的<strong>加引号</strong>！</p><p>有标题的上面已经演示过，下面是各种没有标题的消息框。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message %&#125;</span><br><span class="line">    一个没有设置颜色的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message">                <div class="message-body">            <p>一个没有设置颜色的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:dark %&#125;</span><br><span class="line">    一个深色(dark)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-dark">                <div class="message-body">            <p>一个深色(dark)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:primary %&#125;</span><br><span class="line">    一个主题色(primary)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-primary">                <div class="message-body">            <p>一个主题色(primary)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:info %&#125;</span><br><span class="line">    一个提示色(info)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-info">                <div class="message-body">            <p>一个提示色(info)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:success %&#125;</span><br><span class="line">    一个成功色(success)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-success">                <div class="message-body">            <p>一个成功色(success)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:warning %&#125;</span><br><span class="line">    一个警告色(warning)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-warning">                <div class="message-body">            <p>一个警告色(warning)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:danger %&#125;</span><br><span class="line">    一个危险色(danger)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-danger">                <div class="message-body">            <p>一个危险色(danger)的消息框。</p>        </div>    </article><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><h3 id="语法定义"><a href="#语法定义-1" class="headerlink" title="语法定义"></a>语法定义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs size:&lt;大小&gt; align:&lt;对齐&gt; style:&lt;样式&gt; %&#125;</span><br><span class="line">&lt;!-- tab id:&lt;标签ID&gt; icon:&lt;图标&gt; title:&lt;标签标题&gt; active --&gt;</span><br><span class="line">&lt;标签内容&gt;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:&lt;标签ID&gt; icon:&lt;图标&gt; title:&lt;标签标题&gt; --&gt;</span><br><span class="line">&lt;标签内容&gt;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">...</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>上面重复的参数用法类似，不再解释，下面看上面没有出现过的参数。</p><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p><strong>必选参数</strong>，具有唯一性，<strong>整个文档</strong>中不可重复。</p><h4 id="align对齐方法"><a href="#align-对齐方法" class="headerlink" title="align(对齐方法)"></a>align(对齐方法)</h4><p>可选参数，可能值、实现方法和效果见下方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs %&#125;</span><br><span class="line">&lt;!-- tab id:page1-1 title:第一页 active --&gt;</span><br><span class="line">(没有对齐参数)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page1-2 title:第二页 --&gt;</span><br><span class="line">(没有对齐参数)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page1-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page1-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page1-1" class="tab-content">          <p>(没有对齐参数)<br>这是标签页 1</p>      </div><div id="page1-2" class="tab-content is-hidden">          <p>(没有对齐参数)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs align:centered %&#125;</span><br><span class="line">&lt;!-- tab id:page2-1 title:第一页 active --&gt;</span><br><span class="line">(对齐参数：centered)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page2-2 title:第二页 --&gt;</span><br><span class="line">(对齐参数：centered)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-centered">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page2-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page2-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page2-1" class="tab-content">          <p>(对齐参数：centered)<br>这是标签页 1</p>      </div><div id="page2-2" class="tab-content is-hidden">          <p>(对齐参数：centered)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs align:right %&#125;</span><br><span class="line">&lt;!-- tab id:page3-1 title:第一页 active --&gt;</span><br><span class="line">(对齐参数：right)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page3-2 title:第二页 --&gt;</span><br><span class="line">(对齐参数：right)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-right">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page3-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page3-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page3-1" class="tab-content">          <p>(对齐参数：right)<br>这是标签页 1</p>      </div><div id="page3-2" class="tab-content is-hidden">          <p>(对齐参数：right)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs align:fullwidth %&#125;</span><br><span class="line">&lt;!-- tab id:page4-1 title:第一页 active --&gt;</span><br><span class="line">(对齐参数：fullwidth)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page4-2 title:第二页 --&gt;</span><br><span class="line">(对齐参数：fullwidth)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-fullwidth">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page4-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page4-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page4-1" class="tab-content">          <p>(对齐参数：fullwidth)<br>这是标签页 1</p>      </div><div id="page4-2" class="tab-content is-hidden">          <p>(对齐参数：fullwidth)<br>这是标签页 2</p>      </div><h4 id="style样式"><a href="#style-样式" class="headerlink" title="style(样式)"></a>style(样式)</h4><p>可选参数，可能值、实现方法和效果见下方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs %&#125;</span><br><span class="line">&lt;!-- tab id:page5-1 title:第一页 active --&gt;</span><br><span class="line">(样式：默认)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page5-2 title:第二页 --&gt;</span><br><span class="line">(样式：默认)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page5-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page5-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page5-1" class="tab-content">          <p>(样式：默认)<br>这是标签页 1</p>      </div><div id="page5-2" class="tab-content is-hidden">          <p>(样式：默认)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs style:boxed %&#125;</span><br><span class="line">&lt;!-- tab id:page6-1 title:第一页 active --&gt;</span><br><span class="line">(样式：boxed)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page6-2 title:第二页 --&gt;</span><br><span class="line">(样式：boxed)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-boxed">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page6-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page6-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page6-1" class="tab-content">          <p>(样式：boxed)<br>这是标签页 1</p>      </div><div id="page6-2" class="tab-content is-hidden">          <p>(样式：boxed)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs style:toggle %&#125;</span><br><span class="line">&lt;!-- tab id:page7-1 title:第一页 active --&gt;</span><br><span class="line">(样式：toggle)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page7-2 title:第二页 --&gt;</span><br><span class="line">(样式：toggle)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-toggle">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page7-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page7-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page7-1" class="tab-content">          <p>(样式：toggle)<br>这是标签页 1</p>      </div><div id="page7-2" class="tab-content is-hidden">          <p>(样式：toggle)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs style:toggle-rounded %&#125;</span><br><span class="line">&lt;!-- tab id:page8-1 title:第一页 active --&gt;</span><br><span class="line">(样式：toggle-rounded)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page8-2 title:第二页 --&gt;</span><br><span class="line">(样式：toggle-rounded)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-toggle is-toggle-rounded">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page8-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page8-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page8-1" class="tab-content">          <p>(样式：toggle-rounded)<br>这是标签页 1</p>      </div><div id="page8-2" class="tab-content is-hidden">          <p>(样式：toggle-rounded)<br>这是标签页 2</p>      </div><h1 id="官方文档中的横跨文章的提示框-警告框等"><a href="#官方文档中的横跨文章的提示框、警告框等" class="headerlink" title="官方文档中的横跨文章的提示框、警告框等"></a>官方文档中的横跨文章的提示框、警告框等</h1><p><strong>摘自官网</strong>的一些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;article class=&quot;message message-immersive is-primary&quot;&gt;</span><br><span class="line">&lt;div class=&quot;message-body&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fas fa-globe-americas mr-2&quot;&gt;&lt;/i&gt;本文同时提供以下语言的翻译：&lt;a href=&quot;/hexo-theme-icarus/uncategorized/custom-hexo-tag-helpers/&quot;&gt;English&lt;/a&gt;。</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-americas mr-2"></i>本文同时提供以下语言的翻译：<a href="/hexo-theme-icarus/uncategorized/custom-hexo-tag-helpers/">English</a>。</div></article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;article class=&quot;message message-immersive is-primary&quot;&gt;</span><br><span class="line">&lt;div class=&quot;message-body&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fas fa-lightbulb mr-2&quot;&gt;&lt;/i&gt;The following content is taken from </span><br><span class="line">&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://hexo.io/docs/tag-plugins.html&quot;&gt;Hexo documentation&lt;/a&gt;</span><br><span class="line">with minor revisions.</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-lightbulb mr-2"></i>The following content is taken from <a target="_blank" rel="noopener" href="https://hexo.io/docs/tag-plugins.html">Hexo documentation</a>with minor revisions.</div></article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;article class=&quot;message message-immersive is-warning&quot;&gt;</span><br><span class="line">&lt;div class=&quot;message-body&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fas fa-question-circle mr-2&quot;&gt;&lt;/i&gt;文章内容有误？请点击&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/ppoffice/hexo-theme-icarus/edit/site/source/_posts/zh-CN/CDN-Providers.md&quot;&gt;此处&lt;/a&gt;提交修改。</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-question-circle mr-2"></i>文章内容有误？请点击<a target="_blank" rel="noopener" href="https://github.com/ppoffice/hexo-theme-icarus/edit/site/source/_posts/zh-CN/CDN-Providers.md">此处</a>提交修改。</div></article><p>还有更多参数请见：<a href="https://astrobear.top/2021/08/22/Icarus%E6%B6%88%E6%81%AF%E6%A1%86%E6%A8%A1%E6%9D%BF/">《Icarus消息框模板 - Astroblog》</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前有写过使用 Bulma 美化博文的方法，然后才发现原来 Icarus 本身就带了很多标签插件可供直接使用。而官方文档中的横跨文章的提示框、警告框什么的我找遍了文档也没发现作者告诉我了调用的办法，直到今天才看到大佬的一篇文章讲到原来那些本身就是用原生 html 写的。所以写下此篇笔记，方便以后用。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/"/>
    
    <category term="Hexo" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/Hexo/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Hexo" scheme="http://blocklune.github.io/tags/Hexo/"/>
    
    <category term="Icarus" scheme="http://blocklune.github.io/tags/Icarus/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/tags/Web/"/>
    
  </entry>
  
</feed>
