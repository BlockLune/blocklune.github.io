<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fish Pond | 鱼塘</title>
  <icon>https://www.gravatar.com/avatar/65233dcd93f531e621655079baafb857</icon>
  <subtitle>鱼塘</subtitle>
  <link href="http://blocklune.github.io/atom.xml" rel="self"/>
  
  <link href="http://blocklune.github.io/"/>
  <updated>2022-11-03T14:51:46.175Z</updated>
  <id>http://blocklune.github.io/</id>
  
  <author>
    <name>BlockLune</name>
    <email>blocklune@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个有关指针的问题</title>
    <link href="http://blocklune.github.io/posts/50c16b14.html"/>
    <id>http://blocklune.github.io/posts/50c16b14.html</id>
    <published>2022-11-03T12:52:38.000Z</published>
    <updated>2022-11-03T14:51:46.175Z</updated>
    
    <content type="html"><![CDATA[<p>这是我学习指针过程中遇到的一个问题，问过大佬才似乎懂了点，在此记录。顺便记下一句大佬说的话：</p><blockquote><p>注意到一点就行，指针其实也就是个存了内存地址的变量，<strong>它本身同时也具有内存地址</strong>。</p></blockquote><span id="more"></span><p>事情是这样，学习了一点指针，就想自己实现一个会自动变长的数组。我也不期望把它做成一个类什么的，只有一个小目标，就是实现一个函数，能往这个动态数组后边加元素。我本来的 <strong>错误</strong> 代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> size, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums) <span class="comment">// 如果数组指针不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 暂存原来的数据</span></span><br><span class="line">        <span class="type">int</span> *tmp_nums = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line">        <span class="built_in">memcpy</span>(tmp_nums, nums, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        <span class="comment">// 释放掉原指针</span></span><br><span class="line">        <span class="keyword">delete</span>[] nums;</span><br><span class="line">        <span class="comment">// 元素数量 + 1</span></span><br><span class="line">        nums = <span class="keyword">new</span> <span class="type">int</span>[size + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(nums, tmp_nums, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        nums[size] = n;</span><br><span class="line">        <span class="keyword">delete</span>[] tmp_nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">1</span>];</span><br><span class="line">        nums[<span class="number">0</span>] = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp_n;</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> *nums = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">51</span>; i &lt;= <span class="number">55</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp_n = i;</span><br><span class="line">        <span class="built_in">append</span>(nums, size, tmp_n);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调试过程中发现一直会报 <code>Segmentation fault</code>，但是如果改成下边这样，却是可以的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *nums = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">int</span> size, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums) <span class="comment">// 如果数组指针不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 暂存原来的数据</span></span><br><span class="line">        <span class="type">int</span> *tmp_nums = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line">        <span class="built_in">memcpy</span>(tmp_nums, nums, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        <span class="comment">// 释放掉原指针</span></span><br><span class="line">        <span class="keyword">delete</span>[] nums;</span><br><span class="line">        <span class="comment">// 元素数量 + 1</span></span><br><span class="line">        nums = <span class="keyword">new</span> <span class="type">int</span>[size + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(nums, tmp_nums, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        nums[size] = n;</span><br><span class="line">        <span class="keyword">delete</span>[] tmp_nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">1</span>];</span><br><span class="line">        nums[<span class="number">0</span>] = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp_n;</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">51</span>; i &lt;= <span class="number">55</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp_n = i;</span><br><span class="line">        <span class="built_in">append</span>(size, tmp_n);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改动的内容就是把原来的数组变成了全局的。局部的不正常，全局就对了，所以猜测，类似是形参和实参的区别。大佬们帮我分析了分析，提出了下边的解决方案：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">int</span> **, <span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp_n;</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> *nums = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">51</span>; i &lt;= <span class="number">55</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp_n = i;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        nums 是一个指针，这个指针是我们动态数组的第一个元素的地址</span></span><br><span class="line"><span class="comment">        对 nums 取地址传参，传的是 nums 这个指针的地址</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">append</span>(&amp;nums, size, tmp_n);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接上文的注释</span></span><br><span class="line"><span class="comment">ptr 是一个指针，这个指针是上边的 nums 的地址</span></span><br><span class="line"><span class="comment">*ptr 得到了这个地址的值，这个值是指向动态数组第一个元素的指针</span></span><br><span class="line"><span class="comment">**ptr 是第一个元素的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">int</span> **ptr, <span class="type">int</span> size, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*ptr) <span class="comment">// 如果数组指针不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 暂存原来的数据</span></span><br><span class="line">        <span class="type">int</span> *tmp_nums = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line">        <span class="built_in">memcpy</span>(tmp_nums, *ptr, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        <span class="comment">// 释放掉原指针</span></span><br><span class="line">        <span class="keyword">delete</span>[] * ptr;</span><br><span class="line">        <span class="comment">// 元素数量 + 1</span></span><br><span class="line">        *ptr = <span class="keyword">new</span> <span class="type">int</span>[size + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(*ptr, tmp_nums, <span class="built_in">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">        (*ptr)[size] = n;</span><br><span class="line">        <span class="keyword">delete</span>[] tmp_nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        (*ptr) = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">1</span>];</span><br><span class="line">        (*ptr)[<span class="number">0</span>] = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样运行结果就正常了。</p><p>下边给出一些更直接的例子来解释这个问题。</p><p>（未完待续）</p><p>也可以参考参考这篇文章：<a href="https://developer.aliyun.com/article/297093">《C++ 函数的传入参数是指针的指针（**）的详解》</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我学习指针过程中遇到的一个问题，问过大佬才似乎懂了点，在此记录。顺便记下一句大佬说的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意到一点就行，指针其实也就是个存了内存地址的变量，&lt;strong&gt;它本身同时也具有内存地址&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="指针" scheme="http://blocklune.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
    <category term="函数传参" scheme="http://blocklune.github.io/tags/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ 中赋值语句的返回值问题</title>
    <link href="http://blocklune.github.io/posts/9693ba6.html"/>
    <id>http://blocklune.github.io/posts/9693ba6.html</id>
    <published>2022-10-27T11:52:56.000Z</published>
    <updated>2022-10-31T02:57:40.048Z</updated>
    
    <content type="html"><![CDATA[<p>我曾经一直以为 C&#x2F;C++ 中赋值语句的返回值不是 0 就是 1 —— 成功执行赋值操作返回 1，没有成功执行就返回 0。直到今天课上的一个例子，才让我知道，原来<strong>赋值语句的返回值就是赋的值的大小</strong>！</p><span id="more"></span><p>起因是下边的这道题目：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="comment">// 下边各个循环的执行次数是多少：</span></span><br><span class="line"><span class="comment">// 1: 死循环</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2：0 次循环</span></span><br><span class="line"><span class="keyword">for</span> (; i = <span class="number">0</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3：0 次循环</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4：死循环</span></span><br><span class="line"><span class="keyword">while</span> (i = <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个因为 for 语句的第二个参数缺失，所以该循环不会停止；第三个初值<code>i=0;</code>即不满足<code>i&lt;0;</code>，故不执行。</p><p>第四个，按照我错误的理解，赋值成功返回 1，所以说得通是<code>while(true)</code>永远执行，但四二个却无法这么解释了。去试了试写个下边两个东西输出赋值语句的返回值，才发现原来<strong>赋值语句的返回值就是赋的值</strong>。</p><p>C 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">5</span>, c = <span class="number">-5</span>, d;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)(d = a));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)(d = b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)(d = c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++ 代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">5</span>, c = <span class="number">-5</span>, d;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">int</span>(d = a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">int</span>(d = b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">int</span>(d = c) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果均如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">5</span><br><span class="line">-5</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;我曾经一直以为 C&amp;#x2F;C++ 中赋值语句的返回值不是 0 就是 1 —— 成功执行赋值操作返回 1，没有成功执行就返回 0。直到今天课上的一个例子，才让我知道，原来&lt;strong&gt;赋值语句的返回值就是赋的值的大小&lt;/strong&gt;！&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ 格式化输入输出汇总</title>
    <link href="http://blocklune.github.io/posts/b4e7acd7.html"/>
    <id>http://blocklune.github.io/posts/b4e7acd7.html</id>
    <published>2022-10-19T12:19:14.000Z</published>
    <updated>2022-10-26T06:49:06.422Z</updated>
    
    <content type="html"><![CDATA[<p>本文汇总一下 C 语言 <code>scanf</code> 和 <code>printf</code> 的格式控制方法以及 C++ 的 <code>&lt;iomanip&gt;</code> 库。</p><span id="more"></span><h1 id="c-语言"><a href="#C-语言" class="headerlink" title="C 语言"></a>C 语言</h1><p>此处内容来源于 《C Primer Plus （第 6 版）中文版》。</p><h2 id="printf-函数"><a href="#printf-函数" class="headerlink" title="printf() 函数"></a>printf() 函数</h2><h3 id="转换说明"><a href="#转换说明" class="headerlink" title="转换说明"></a>转换说明</h3><p>ANSI C 中 printf() 的转换说明（P69，表 4.3：转换说明及其打印的输出结果）</p><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><table><thead><tr><th>转换说明</th><th>打印的结果</th></tr></thead><tbody><tr><td>%d &#x2F; %i</td><td>有符号十进制整数</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%o</td><td>无符号八进制整数</td></tr><tr><td>%x</td><td>无符号十六进制整数，使用十六进制数 0f</td></tr><tr><td>%X</td><td>无符号十六进制整数，使用十六进制数 0F</td></tr><tr><td>%a &#x2F; %A</td><td>十六进制数、浮点数和 p 计数法（C99&#x2F;C11）</td></tr></tbody></table><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><table><thead><tr><th>转换说明</th><th>打印的结果</th></tr></thead><tbody><tr><td>%e &#x2F; %E</td><td>浮点数，e 计数法</td></tr><tr><td>%f</td><td>浮点数，十进制计数法</td></tr><tr><td>%g &#x2F; %G</td><td>根据值的不同，自动选择 %f 或 %e &#x2F; %E。%e &#x2F; %E 格式用于指数小于-4 或大于等于精度时。</td></tr><tr><td>%a &#x2F; %A</td><td>十六进制数、浮点数和 p 计数法（十六进制指数计数法）（C99&#x2F;C11）</td></tr></tbody></table><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><table><thead><tr><th>转换说明</th><th>打印的结果</th></tr></thead><tbody><tr><td>%c</td><td>单个字符<strong>（包括空白字符）</strong></td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%p</td><td>指针</td></tr><tr><td>%</td><td>百分号</td></tr></tbody></table><h3 id="转换说明修饰符"><a href="#转换说明修饰符" class="headerlink" title="转换说明修饰符"></a>转换说明修饰符</h3><p>（P71，表 4.4：printf()的修饰符）：</p><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td><strong>标记</strong></td><td>共 5 种（-, +, 空格, # , 0）</td></tr><tr><td><strong>数字</strong></td><td>最小字段宽度（不够自动变宽）</td></tr><tr><td><strong>.数字</strong></td><td>精度（具体见下边说明）</td></tr><tr><td><strong>h</strong></td><td>和整型转换说明一起使用，表示 short int 或 unsigned short int</td></tr><tr><td>hh</td><td>和整型转换说明一起使用，表示 signed char 或 unsigned char</td></tr><tr><td>j</td><td>和整型转换说明一起使用，表示 intmax_t 或 uintmax_t （这些类型定义在 &lt;stdint.h&gt; 中）</td></tr><tr><td><strong>l</strong></td><td>和整型转换说明一起使用，表示 long int 或 unsigned long int（和浮点型转换说明构成 %lf，表示 double）</td></tr><tr><td><strong>ll</strong></td><td>和整型转换说明一起使用，表示 long long int 或 unsigned long long int（C99）</td></tr><tr><td><strong>L</strong></td><td>和浮点转换说明一起使用，表示 long double 类型的值</td></tr><tr><td>t</td><td>和整型转换说明一起使用，表示 ptrdiff_t （ptrdiff_t 是两个指针差值的类型，C99）</td></tr><tr><td>z</td><td>和整型转换说明一起使用，表示 size_t （size_t 是 sizeof 返回的类型，C99）</td></tr></tbody></table><blockquote><p>上边的 <strong>.数字</strong>：</p><p>对于 %e、%E、%f，表示小数点右边数字的位数；</p><p>对于 %g、%G，表示有效数字的最大位数；</p><p>对于 %s，表示待打印字符的最大数量；</p><p>对于整型转换，表示待打印数字的最小位数，如有必要，使用前导 0 来达到这个位数。</p><p>只是用 . 表示其后跟随了一个 0，所以 %.f 和 %.0f 相同。</p></blockquote><p>（P72，表 4.5：printf()中的标记）：</p><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td>-</td><td>左对齐</td></tr><tr><td>+</td><td>有符号值前加正负号</td></tr><tr><td>空格</td><td>有符号值正不加，负加负号</td></tr><tr><td>#</td><td>把结果转换为另一种形式，具体看下边</td></tr><tr><td>0</td><td>对于数值格式，用前导 0 代替空格填充字段宽度。对于整数格式，如果出现-标记或者指定精度，则忽略该标记</td></tr></tbody></table><blockquote><p># 的说明：</p><p>%o：以 0 开始；</p><p>%x &#x2F; %X：以 0x &#x2F; 0X 开始；</p><p>所有浮点格式：保证即使后边没有任何数字，也打印一个小数点字符；</p><p>%g &#x2F; %G：防止结果后边的 0 被删除。</p></blockquote><h2 id="scanf函数"><a href="#scanf-函数" class="headerlink" title="scanf()函数"></a>scanf()函数</h2><p>大部分与上边相同，只讲不一样的。</p><p>（P80，表 4.7：scanf()转换说明中的修饰符）：</p><table><thead><tr><th>转换说明</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>抑制赋值</td></tr><tr><td>数字</td><td>最大字符宽度。输入达到这个宽度或者第一次遇到空白字符时停止。</td></tr></tbody></table><p>scanf() 的返回值是成功读取的项数。如果没有读取任何项，则返回 0；如果检测到“文件结尾”，返回 EOF （EOF 是定义 &lt;stdio.h&gt; 中定义的特殊值，一般用 #define 定义为 -1）。</p><p><strong>注意：</strong>输入数字的时候，在不设置分隔符号时，scanf()默认使用空白字符进行分隔；但是输入字符时，空白字符不会被忽略，而是被顺利读入。</p><p>比如下边这道题：</p><p>有如下程序段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a1, a2;</span><br><span class="line"><span class="type">char</span> c1, c2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%c%d%c&quot;</span>, &amp;a1, &amp;c1, &amp;a2, &amp;c2);</span><br></pre></td></tr></table></figure><p>若要求 a1, a2, c1, c2 的值分别为 10, 20, A, B，正确的数据输入是（ ）：</p><p>A. 10A20 B&lt;CR&gt;</p><p>B. 10 A 20 B&lt;CR&gt;</p><p>C. 10 A20B&lt;CR&gt;</p><p>D. 10A 20B&lt;CR&gt;</p><p>正确答案为 D。</p><h1 id="c"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p>参考：<a href="https://blog.csdn.net/Jacky_Feng/article/details/109119782">【C++】C++标准库之 iomanip 库（格式输入输出）_Jacky_Feng 的博客-CSDN 博客</a></p><table><thead><tr><th>控制符</th><th>作用</th></tr></thead><tbody><tr><td>oct</td><td>八进制输入&#x2F;输出</td></tr><tr><td>dec</td><td>十进制输入&#x2F;输出</td></tr><tr><td>hex</td><td>十六进制输入&#x2F;输出</td></tr><tr><td>setbase(n)</td><td>设置为 n 进制 (n &#x3D; 8, 10, 16)</td></tr><tr><td>setprecision(n)</td><td>设置浮点数的有效数字为 n 位</td></tr><tr><td>setfill(c)</td><td>设置字符填充为 c</td></tr><tr><td>setw(n)</td><td>设置宽度</td></tr><tr><td>setiosflags(ios::fixed)</td><td>设置浮点数以固定的小数位数显示</td></tr><tr><td>setiosflags(ios::scientific)</td><td>设置浮点数以科学计数法表示</td></tr><tr><td>setiosflags(ios::left)</td><td>输出左对齐</td></tr><tr><td>setiosflags(ios::right)</td><td>输出右对齐</td></tr><tr><td>setiosflags(ios::skipws)</td><td>忽略前导空格</td></tr><tr><td>setiosflags(ios::uppercase)</td><td>在以科学计数法输出 E 与十六进制输出 X 以大写输出，否则小写</td></tr><tr><td>setiosflags(ios::showpos)</td><td>输出正数时显示”+”号</td></tr><tr><td>setiosflags(ios::showpoint)</td><td>强制显示小数点</td></tr><tr><td>resetiosflags()</td><td>终止已经设置的输出格式状态，在括号中应指定内容</td></tr></tbody></table><p>更多请见：<a href="https://www.w3cschool.cn/doc_cpp/cpp-header-iomanip.html">iomanip CPP 官方教程 _w3cschool</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文汇总一下 C 语言 &lt;code&gt;scanf&lt;/code&gt; 和 &lt;code&gt;printf&lt;/code&gt; 的格式控制方法以及 C++ 的 &lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt; 库。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="iomanip" scheme="http://blocklune.github.io/tags/iomanip/"/>
    
  </entry>
  
  <entry>
    <title>挖老婆矿！—— NovelAI 初试</title>
    <link href="http://blocklune.github.io/posts/f17b3e8b.html"/>
    <id>http://blocklune.github.io/posts/f17b3e8b.html</id>
    <published>2022-10-15T12:36:02.000Z</published>
    <updated>2022-10-15T15:46:18.030Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间，感觉突然之间，就有很多很多将现实图片二次元化啊，按照每句歌词生成一副画作啊的 AI 绘画应用的图文视频出现。和室友聊天还说是不是最近一段时间 AI 技术突破什么瓶颈突飞猛进了。后来才知道，原来是 NovelAI 泄露了… 这样一来，本地部署方便了起来，于是整了一个玩玩。由于跑 AI 嘛，GPU 比较呼啸，跟挖矿一样，我就戏称我这是在“挖老婆矿”了。</p><span id="more"></span><p>注：这篇文章更偏向于我记录生成时使用的 tag， 不涉及基础操作。我使用的 NovelAI 下载自<a href="https://www.bilibili.com/video/BV1EV4y1L7dX">这里</a>。</p><h1 id="一个头像一堆头像"><a href="#一个头像（一堆头像）" class="headerlink" title="一个头像（一堆头像）"></a>一个头像（一堆头像）</h1><p>我最开始只是用几个 tag 生成。经历了一些粗浅的尝试后，发现生成的质量并不高。但是看到了<a href="https://www.yuque.com/longyuye/lmgcwy/goa36x">一篇文章</a>，照着里边的 tag 写，才算真正开始了探索。</p><p>首先是根据上边那篇文章最后的示例增改了点 tag 形成的 prompt:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blue pen illustration, light blue background, flowers on face, growth, nature, beautiful face, pink hair,shawl hair, zoom in on eyes, apathy, red eye shadow, petite, best quality, masterpiece</span><br></pre></td></tr></table></figure><p>然后生成出了下面这些相当不错的图案：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0HgAK.jpg"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0H676.jpg"></p><p>下边分类讲讲 tag:</p><p>提高总体质量的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterpiece, best quality, by famous artist, beautiful face</span><br></pre></td></tr></table></figure><p>使整体的风格偏向更具插画感：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">illustration</span><br></pre></td></tr></table></figure><p>限定背景的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxx + backgroud  (比如上边的淡蓝色背景就是 light blue background )</span><br></pre></td></tr></table></figure><p>让生成出来的 waifu 更幼的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">petite</span><br></pre></td></tr></table></figure><p>让脸上、头发上出现花朵装饰的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flowers on face</span><br></pre></td></tr></table></figure><p>让眼睛更大的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zoom in one eyes</span><br></pre></td></tr></table></figure><p>尝到了甜头后，我就想换头像了。但我不想完全抛弃现在的头像，于是就试图拿它做派生。</p><p>首先描述一下原来的头像，让 AI 知道我大概是想要怎样的一个 “老婆”。<del>（虽然其实我描述的时候更感觉是在捏女儿）</del> 顺便一说，我这个原来的头像其实也是 AI 生成的，叫 <a href="https://waifulabs.com/generate">WaifuLabs</a>，是我把原来生成出来的丢进 PS 去了水印，又自己修缮了一下得到的。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0I1Z8.jpg" alt="上边是 WaifuLabs 生成出来时候的样子，下边是我自己 PS 改的"></p><p>抛却那些提高质量的，大概给了 <code>披肩发</code>、<code>深灰色头发</code>、<code>深灰色眼睛</code>、<code>红色眼影</code>、<code>白色衬衫</code>、<code>微笑</code> 这些 tag。同时模仿了上边，给了 <code>面部的花</code> 之类的 tag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;masterpiece,best quality&#125;&#125;,shawl hair,dark grey hair, dark grey eyes,red eye shadow,  white shirt,illustration,flower on face,growth, nature,beautiful face, smile, zoom in one eyes</span><br></pre></td></tr></table></figure><p>以上边的内容为 prompt，同时把我改的那张扔给 NovelAI，根据生成结果又慢慢改，添加 tag，最终的 prompt 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;masterpiece,best quality,by wlop&#125;&#125;,shawl hair,dark grey hair, dark grey eyes,red eye shadow, white shirt,&#123;&#123;&#123;illustration&#125;&#125;&#125;,flower on face, growth, nature, beautiful face, small smile, zoom in one eyes, &#123;&#123;&#123;&#123;petite&#125;&#125;&#125;&#125;, dramatic shadows, ink,eye-focus, portrait, red hairclip</span><br></pre></td></tr></table></figure><p>跑了大概 100 张，然后挑了挑，下边展示的是部分高质量的：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0IgzR.png"></p><p>又是一波奇奇怪怪的调整：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0onkF.png"></p><p>最后挑选出了这张我觉得挺有特色的：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0o161.png"></p><p>然后开始根据这张进行派生：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0jbEn.png"></p><h1 id="一张壁纸一堆壁纸"><a href="#一张壁纸（一堆壁纸）" class="headerlink" title="一张壁纸（一堆壁纸）"></a>一张壁纸（一堆壁纸）</h1><p>这事儿开始的挺搞笑的，当时我正在调上边的头像参数，坐我旁边玩 CSGO 的朋友希望我把某把枪拟人，然后发我了下边的图片：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0TGgs.jpg"></p><p>然后我加了点描述词生成了，但生成效果并不好，我就又开始研究我上边的头像了。我完全忘记了我还拿着这张图生成的某张图在做派生呢… 我只是改回了我的 prompt，就意外地得到了下边这张图：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x0TI8H.png"></p><p>似乎是把枪头画成了那条条纹？我也不知道。反正着实是惊艳到我了，扔到 bigjpg 那边提高了一下分辨率，再扔进 PS 调了一下曲线，嘿嘿，新的手机壁纸有了！</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x07eG4.png" alt="拉的曲线"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x07Prq.png" alt="新的手机壁纸！"></p><p>然后又拿这张图和基于上边改的 prompt 做了派生…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;masterpiece,best quality&#125;&#125;,shawl hair,dark grey hair, dark grey eyes,red eye shadow,red scanf,  light grey shirt,&#123;&#123;illustration&#125;&#125;,red flower on face,white flower on hair,growth, nature,beautiful face, &#123;&#123;indifferent&#125;&#125;, zoom in one eyes,1girl, red flower background, gold fence background,focus on eye</span><br></pre></td></tr></table></figure><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x07XO1.jpg"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/15/x07vex.jpg"></p><p>相当不错！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近一段时间，感觉突然之间，就有很多很多将现实图片二次元化啊，按照每句歌词生成一副画作啊的 AI 绘画应用的图文视频出现。和室友聊天还说是不是最近一段时间 AI 技术突破什么瓶颈突飞猛进了。后来才知道，原来是 NovelAI 泄露了… 这样一来，本地部署方便了起来，于是整了一个玩玩。由于跑 AI 嘛，GPU 比较呼啸，跟挖矿一样，我就戏称我这是在“挖老婆矿”了。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/AI/"/>
    
    <category term="NovelAI" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/AI/NovelAI/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="NovelAI" scheme="http://blocklune.github.io/tags/NovelAI/"/>
    
    <category term="AI" scheme="http://blocklune.github.io/tags/AI/"/>
    
    <category term="人工智能" scheme="http://blocklune.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>【已解决】VS Code 中文乱码问题</title>
    <link href="http://blocklune.github.io/posts/ca05bed5.html"/>
    <id>http://blocklune.github.io/posts/ca05bed5.html</id>
    <published>2022-10-13T11:33:49.000Z</published>
    <updated>2022-10-26T06:42:52.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>开门见山，我最后采用的解决方案是对 C&#x2F;C++ 文件单独设置默认编码。大致的操作方法是，打开 VS Code 的 <code>settings.json</code> 文件，添加如下配置：</p><span id="more"></span><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;[cpp]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gbk&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[c]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gbk&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>具体的操作请参见原文：<a href="https://blog.csdn.net/qq_45538473/article/details/107258234">《VSCODE C 语言终端输出中文乱码编码设置》</a></p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>复盘一下解决这个问题的过程。</p><p>首先了解到的是 VS Code 中文乱码的根本原因——VS Code 默认的编码格式是 UTF-8 （这一点可在 VS Code 右下角看到），而 VS Code 调用的终端是 CMD，默认的编码格式是 gbk。所以解决方案就是两个方向：要么是更改终端的默认编码，从默认的 gbk 转为 utf8；要么就是更改 VS Code 中的 C&#x2F;C++ 文件的编码。</p><p><strong>2022&#x2F;10&#x2F;26 更新：</strong></p><p>看到一个有意思的科普视频，贴在这里，可以看看乱码到底是如何产生的。</p><div class="bvideo"><a href="//www.bilibili.com/video/BV1cB4y177QR" target="_blank">        <div class="bvideo-box">            <div class="bvideo-cover">                <div class="cover-default"></div>                <div class="bvideo-cover-layer" style="background-image:url(https://pic1.xuehuaimg.com/proxy/http://i0.hdslb.com/bfs/archive/95d3c1239ff3a3216e2b1bad6f280a530105078d.jpg)">                    <i class="icon-video"></i>                </div>                <span class="duration">00:15:00</span>            </div>            <div class="bvideo-info">                <p class="title">锟斤拷�⊠是怎样炼成的——中文显示“⼊”门指南【柴知道】</p>                <p class="card-status">                    <span class="play-num">                        <i class="fa fa-youtube-play"></i>                        <span>354.2万</span></span>                    <span>                        <i class="fa fa-list-alt"></i>                        <span>1.4万</span></span></p>                <div class="partition">                    <label class="card-label">视频</label>                    <label class="up-label"></label>                    <label class="up-name">柴知道</label>                </div>                <div class="actions hide"></div>            </div>        </div>    </a></div><h3 id="第一个方向更改终端默认编码"><a href="#第一个方向：更改终端默认编码" class="headerlink" title="第一个方向：更改终端默认编码"></a>第一个方向：更改终端默认编码</h3><p>了解到更改 CMD 编码为 utf8 的命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure><p>顺便一提，查看当前编码的命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chcp</span><br></pre></td></tr></table></figure><p><code>chcp 65001</code> 这串命令的意思就是更改代码页为 65001，也就是用 utf8 编码。</p><p>这串命令不是永久生效的，所以每次都要输入，比较麻烦。网上也有一些解决方案，比如通过修改注册表每次都自动运行一下上边的命令（<a href="https://www.jianshu.com/p/f40e494dc01d">《修改 Windows10 命令终端 cmd 的编码为 UTF-8》</a>），或者是配置 VS Code 让其自动输入的（<a href="https://blog.csdn.net/lzyws739307453/article/details/89823900">《永久解决 VS Code 终端中文乱码问题》</a>），可以去看看。</p><h3 id="第二个方向更改-vs-code-中的-cx2fc-文件的编码"><a href="#第二个方向：更改-VS-Code-中的-C-x2F-C-文件的编码" class="headerlink" title="第二个方向：更改 VS Code 中的 C&#x2F;C++ 文件的编码"></a>第二个方向：更改 VS Code 中的 C&#x2F;C++ 文件的编码</h3><p>最初这个方法我只是想临时解决一下，就比较简单。点一下右下角的 UTF-8，选择 <code>通过编码重新打开</code>，选择 gbk 就行了。但这样只有一次，然后就想看看有没有永久的方法，便看到了上边的文章。</p><p>顺便一提，这里可能还要把 VS Code 设置中的自动猜测编码功能打开，具体操作如下：</p><ol><li>使用 <code>Ctrl + ,</code> 快捷键打开设置；</li><li>在搜索框输入 <code>encoding</code> ，找到 <code>Files:Auto Guess Encoding</code>，勾上它。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/qq_45538473/article/details/107258234">《VSCODE C 语言终端输出中文乱码编码设置》</a></li><li><a href="https://www.jianshu.com/p/f40e494dc01d">《修改 Windows10 命令终端 cmd 的编码为 UTF-8》</a></li><li><a href="https://blog.csdn.net/lzyws739307453/article/details/89823900">《永久解决 VS Code 终端中文乱码问题》</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题解决&quot;&gt;&lt;a href=&quot;#问题解决&quot; class=&quot;headerlink&quot; title=&quot;问题解决&quot;&gt;&lt;/a&gt;问题解决&lt;/h2&gt;&lt;p&gt;开门见山，我最后采用的解决方案是对 C&amp;#x2F;C++ 文件单独设置默认编码。大致的操作方法是，打开 VS Code 的 &lt;code&gt;settings.json&lt;/code&gt; 文件，添加如下配置：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="问题" scheme="http://blocklune.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
    <category term="已解决" scheme="http://blocklune.github.io/tags/%E5%B7%B2%E8%A7%A3%E5%86%B3/"/>
    
    <category term="VS Code" scheme="http://blocklune.github.io/tags/VS-Code/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C 语言中与(&amp;&amp;)和或(||)运算符的短路运算</title>
    <link href="http://blocklune.github.io/posts/13d09bbb.html"/>
    <id>http://blocklune.github.io/posts/13d09bbb.html</id>
    <published>2022-10-11T13:23:55.000Z</published>
    <updated>2022-10-13T12:36:42.540Z</updated>
    
    <content type="html"><![CDATA[<p>此篇笔记来源于下边的这个题目。<br><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/10/12/xaK5c9.png"></p><span id="more"></span><p>本来以为结果为 3，但是实际跑了一下发现结果是 1。请教了一下大佬知道了这叫做或运算符（||）的短路运算。</p><p>正常来说，或运算中只要有一个为真，结果就为真。所谓或的短路运算就是说，如果已经出现了真，那么后续的运算就不会进行了。以上面的题目为例就是，因为第一个 ++x 这个运算结果肯定为真，那么后面的另外两个 ++x 就不会运行。</p><p>类似的，还有与（&amp;&amp;）的短路运算。正常来说，与运算中必须所有均为真，结果才为真。所以与的短路就是，如果前面的运算结果已经有假了，那么就可以确定这个与运算总体的结果为假，也就不会运行后边的运算了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;此篇笔记来源于下边的这个题目。&lt;br&gt;&lt;img src=&quot;https://s1.ax1x.com/2022/10/12/xaK5c9.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Icarus 主题自带的标签插件的使用以及官方文档中的常用消息框模板</title>
    <link href="http://blocklune.github.io/posts/8ffe9166.html"/>
    <id>http://blocklune.github.io/posts/8ffe9166.html</id>
    <published>2022-10-07T08:47:49.000Z</published>
    <updated>2022-10-07T11:27:24.064Z</updated>
    
    <content type="html"><![CDATA[<p>之前有写过使用 Bulma 美化博文的方法，然后才发现原来 Icarus 本身就带了很多标签插件可供直接使用。而官方文档中的横跨文章的提示框、警告框什么的我找遍了文档也没发现作者告诉我了调用的办法，直到今天才看到大佬的一篇文章讲到原来那些本身就是用原生 html 写的。所以写下此篇笔记，方便以后用。</p><span id="more"></span><h1 id="官方自带标签插件"><a href="#官方自带标签插件" class="headerlink" title="官方自带标签插件"></a>官方自带标签插件</h1><p>官方文档：<a href="https://ppoffice.github.io/hexo-theme-icarus/uncategorized/%E8%87%AA%E5%AE%9A%E4%B9%89hexo%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/">《自定义Hexo标签插件 - Icarus》</a></p><h2 id="消息框"><a href="#消息框" class="headerlink" title="消息框"></a>消息框</h2><h3 id="语法定义"><a href="#语法定义" class="headerlink" title="语法定义"></a>语法定义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:&lt;颜色&gt; size:&lt;大小&gt; icon:&lt;图标&gt; title:&lt;标题&gt; %&#125;</span><br><span class="line">    &lt;内容&gt;</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><h4 id="color颜色"><a href="#color-颜色" class="headerlink" title="color(颜色)"></a>color(颜色)</h4><p>可选参数，可能值、实现方法和效果见下方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message title:default %&#125;</span><br><span class="line">    一个没有设置颜色的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message">        <div class="message-header"><p>default</p></div>        <div class="message-body">            <p>一个没有设置颜色的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:dark title:dark %&#125;</span><br><span class="line">    一个深色(dark)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-dark">        <div class="message-header"><p>dark</p></div>        <div class="message-body">            <p>一个深色(dark)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:primary title:primary %&#125;</span><br><span class="line">    一个主题色(primary)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-primary">        <div class="message-header"><p>primary</p></div>        <div class="message-body">            <p>一个主题色(primary)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:info title:info %&#125;</span><br><span class="line">    一个提示色(info)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-info">        <div class="message-header"><p>info</p></div>        <div class="message-body">            <p>一个提示色(info)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:success title:success %&#125;</span><br><span class="line">    一个成功色(success)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-success">        <div class="message-header"><p>success</p></div>        <div class="message-body">            <p>一个成功色(success)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:warning title:warning %&#125;</span><br><span class="line">    一个警告色(warning)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-warning">        <div class="message-header"><p>warning</p></div>        <div class="message-body">            <p>一个警告色(warning)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:danger title:danger %&#125;</span><br><span class="line">    一个危险色(danger)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-danger">        <div class="message-header"><p>danger</p></div>        <div class="message-body">            <p>一个危险色(danger)的消息框。</p>        </div>    </article><h4 id="size尺寸"><a href="#size-尺寸" class="headerlink" title="size(尺寸)"></a>size(尺寸)</h4><p>可选参数，可能值、实现方法和效果见下方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message size:small title:small %&#125;</span><br><span class="line">    一个小(small)消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-small">        <div class="message-header"><p>small</p></div>        <div class="message-body">            <p>一个小(small)消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message title:default %&#125;</span><br><span class="line">    一个默认大小的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message">        <div class="message-header"><p>default</p></div>        <div class="message-body">            <p>一个默认大小的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message size:medium title:medium %&#125;</span><br><span class="line">    一个中(medium)消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-medium">        <div class="message-header"><p>medium</p></div>        <div class="message-body">            <p>一个中(medium)消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message size:large title:large %&#125;</span><br><span class="line">    一个大(large)消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-large">        <div class="message-header"><p>large</p></div>        <div class="message-body">            <p>一个大(large)消息框。</p>        </div>    </article><h4 id="icon图标"><a href="#icon-图标" class="headerlink" title="icon(图标)"></a>icon(图标)</h4><p>可选参数，来源 <a href="https://fontawesome.com/search">FontAwesome</a>，类名中间含空格的<strong>加引号</strong>！</p><p>一些例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:success icon:&quot;fa-solid fa-circle-check&quot; title:&quot;fa-solid fa-circle-check&quot; %&#125;</span><br><span class="line">    一个外部带圈的勾。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-success">        <div class="message-header"><p><i class="fa-solid fa-circle-check mr-2"></i>fa-solid fa-circle-check</p></div>        <div class="message-body">            <p>一个外部带圈的勾。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:warning icon:&quot;fa-solid fa-triangle-exclamation&quot; title:&quot;fa-solid fa-triangle-exclamation&quot; %&#125;</span><br><span class="line">    一个警告标志。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-warning">        <div class="message-header"><p><i class="fa-solid fa-triangle-exclamation mr-2"></i>fa-solid fa-triangle-exclamation</p></div>        <div class="message-body">            <p>一个警告标志。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:danger icon:&quot;fa-solid fa-circle-exclamation&quot; title:&quot;fa-solid fa-circle-exclamation&quot; %&#125;</span><br><span class="line">    一个错误标志。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-danger">        <div class="message-header"><p><i class="fa-solid fa-circle-exclamation mr-2"></i>fa-solid fa-circle-exclamation</p></div>        <div class="message-body">            <p>一个错误标志。</p>        </div>    </article><h4 id="title标题"><a href="#title-标题" class="headerlink" title="title(标题)"></a>title(标题)</h4><p>可选参数，中间含空格的<strong>加引号</strong>！</p><p>有标题的上面已经演示过，下面是各种没有标题的消息框。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message %&#125;</span><br><span class="line">    一个没有设置颜色的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message">                <div class="message-body">            <p>一个没有设置颜色的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:dark %&#125;</span><br><span class="line">    一个深色(dark)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-dark">                <div class="message-body">            <p>一个深色(dark)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:primary %&#125;</span><br><span class="line">    一个主题色(primary)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-primary">                <div class="message-body">            <p>一个主题色(primary)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:info %&#125;</span><br><span class="line">    一个提示色(info)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-info">                <div class="message-body">            <p>一个提示色(info)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:success %&#125;</span><br><span class="line">    一个成功色(success)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-success">                <div class="message-body">            <p>一个成功色(success)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:warning %&#125;</span><br><span class="line">    一个警告色(warning)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-warning">                <div class="message-body">            <p>一个警告色(warning)的消息框。</p>        </div>    </article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% message color:danger %&#125;</span><br><span class="line">    一个危险色(danger)的消息框。</span><br><span class="line">&#123;% endmessage %&#125;</span><br></pre></td></tr></table></figure><article class="message is-danger">                <div class="message-body">            <p>一个危险色(danger)的消息框。</p>        </div>    </article><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><h3 id="语法定义"><a href="#语法定义-1" class="headerlink" title="语法定义"></a>语法定义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs size:&lt;大小&gt; align:&lt;对齐&gt; style:&lt;样式&gt; %&#125;</span><br><span class="line">&lt;!-- tab id:&lt;标签ID&gt; icon:&lt;图标&gt; title:&lt;标签标题&gt; active --&gt;</span><br><span class="line">&lt;标签内容&gt;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:&lt;标签ID&gt; icon:&lt;图标&gt; title:&lt;标签标题&gt; --&gt;</span><br><span class="line">&lt;标签内容&gt;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">...</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>上面重复的参数用法类似，不再解释，下面看上面没有出现过的参数。</p><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p><strong>必选参数</strong>，具有唯一性，<strong>整个文档</strong>中不可重复。</p><h4 id="align对齐方法"><a href="#align-对齐方法" class="headerlink" title="align(对齐方法)"></a>align(对齐方法)</h4><p>可选参数，可能值、实现方法和效果见下方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs %&#125;</span><br><span class="line">&lt;!-- tab id:page1-1 title:第一页 active --&gt;</span><br><span class="line">(没有对齐参数)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page1-2 title:第二页 --&gt;</span><br><span class="line">(没有对齐参数)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page1-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page1-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page1-1" class="tab-content">          <p>(没有对齐参数)<br>这是标签页 1</p>      </div><div id="page1-2" class="tab-content is-hidden">          <p>(没有对齐参数)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs align:centered %&#125;</span><br><span class="line">&lt;!-- tab id:page2-1 title:第一页 active --&gt;</span><br><span class="line">(对齐参数：centered)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page2-2 title:第二页 --&gt;</span><br><span class="line">(对齐参数：centered)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-centered">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page2-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page2-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page2-1" class="tab-content">          <p>(对齐参数：centered)<br>这是标签页 1</p>      </div><div id="page2-2" class="tab-content is-hidden">          <p>(对齐参数：centered)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs align:right %&#125;</span><br><span class="line">&lt;!-- tab id:page3-1 title:第一页 active --&gt;</span><br><span class="line">(对齐参数：right)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page3-2 title:第二页 --&gt;</span><br><span class="line">(对齐参数：right)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-right">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page3-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page3-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page3-1" class="tab-content">          <p>(对齐参数：right)<br>这是标签页 1</p>      </div><div id="page3-2" class="tab-content is-hidden">          <p>(对齐参数：right)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs align:fullwidth %&#125;</span><br><span class="line">&lt;!-- tab id:page4-1 title:第一页 active --&gt;</span><br><span class="line">(对齐参数：fullwidth)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page4-2 title:第二页 --&gt;</span><br><span class="line">(对齐参数：fullwidth)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-fullwidth">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page4-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page4-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page4-1" class="tab-content">          <p>(对齐参数：fullwidth)<br>这是标签页 1</p>      </div><div id="page4-2" class="tab-content is-hidden">          <p>(对齐参数：fullwidth)<br>这是标签页 2</p>      </div><h4 id="style样式"><a href="#style-样式" class="headerlink" title="style(样式)"></a>style(样式)</h4><p>可选参数，可能值、实现方法和效果见下方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs %&#125;</span><br><span class="line">&lt;!-- tab id:page5-1 title:第一页 active --&gt;</span><br><span class="line">(样式：默认)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page5-2 title:第二页 --&gt;</span><br><span class="line">(样式：默认)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page5-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page5-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page5-1" class="tab-content">          <p>(样式：默认)<br>这是标签页 1</p>      </div><div id="page5-2" class="tab-content is-hidden">          <p>(样式：默认)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs style:boxed %&#125;</span><br><span class="line">&lt;!-- tab id:page6-1 title:第一页 active --&gt;</span><br><span class="line">(样式：boxed)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page6-2 title:第二页 --&gt;</span><br><span class="line">(样式：boxed)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-boxed">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page6-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page6-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page6-1" class="tab-content">          <p>(样式：boxed)<br>这是标签页 1</p>      </div><div id="page6-2" class="tab-content is-hidden">          <p>(样式：boxed)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs style:toggle %&#125;</span><br><span class="line">&lt;!-- tab id:page7-1 title:第一页 active --&gt;</span><br><span class="line">(样式：toggle)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page7-2 title:第二页 --&gt;</span><br><span class="line">(样式：toggle)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-toggle">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page7-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page7-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page7-1" class="tab-content">          <p>(样式：toggle)<br>这是标签页 1</p>      </div><div id="page7-2" class="tab-content is-hidden">          <p>(样式：toggle)<br>这是标签页 2</p>      </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs style:toggle-rounded %&#125;</span><br><span class="line">&lt;!-- tab id:page8-1 title:第一页 active --&gt;</span><br><span class="line">(样式：toggle-rounded)</span><br><span class="line">这是标签页 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab id:page8-2 title:第二页 --&gt;</span><br><span class="line">(样式：toggle-rounded)</span><br><span class="line">这是标签页 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs my-3 is-toggle is-toggle-rounded">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#page8-1">              <p>第一页</p>          </a>      </li><li>          <a href="#page8-2">              <p>第二页</p>          </a>      </li>        </ul>    </div>    <div id="page8-1" class="tab-content">          <p>(样式：toggle-rounded)<br>这是标签页 1</p>      </div><div id="page8-2" class="tab-content is-hidden">          <p>(样式：toggle-rounded)<br>这是标签页 2</p>      </div><h1 id="官方文档中的横跨文章的提示框-警告框等"><a href="#官方文档中的横跨文章的提示框、警告框等" class="headerlink" title="官方文档中的横跨文章的提示框、警告框等"></a>官方文档中的横跨文章的提示框、警告框等</h1><p><strong>摘自官网</strong>的一些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;article class=&quot;message message-immersive is-primary&quot;&gt;</span><br><span class="line">&lt;div class=&quot;message-body&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fas fa-globe-americas mr-2&quot;&gt;&lt;/i&gt;本文同时提供以下语言的翻译：&lt;a href=&quot;/hexo-theme-icarus/uncategorized/custom-hexo-tag-helpers/&quot;&gt;English&lt;/a&gt;。</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-americas mr-2"></i>本文同时提供以下语言的翻译：<a href="/hexo-theme-icarus/uncategorized/custom-hexo-tag-helpers/">English</a>。</div></article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;article class=&quot;message message-immersive is-primary&quot;&gt;</span><br><span class="line">&lt;div class=&quot;message-body&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fas fa-lightbulb mr-2&quot;&gt;&lt;/i&gt;The following content is taken from </span><br><span class="line">&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://hexo.io/docs/tag-plugins.html&quot;&gt;Hexo documentation&lt;/a&gt;</span><br><span class="line">with minor revisions.</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-lightbulb mr-2"></i>The following content is taken from <a target="_blank" rel="noopener" href="https://hexo.io/docs/tag-plugins.html">Hexo documentation</a>with minor revisions.</div></article><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;article class=&quot;message message-immersive is-warning&quot;&gt;</span><br><span class="line">&lt;div class=&quot;message-body&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fas fa-question-circle mr-2&quot;&gt;&lt;/i&gt;文章内容有误？请点击&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/ppoffice/hexo-theme-icarus/edit/site/source/_posts/zh-CN/CDN-Providers.md&quot;&gt;此处&lt;/a&gt;提交修改。</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-question-circle mr-2"></i>文章内容有误？请点击<a target="_blank" rel="noopener" href="https://github.com/ppoffice/hexo-theme-icarus/edit/site/source/_posts/zh-CN/CDN-Providers.md">此处</a>提交修改。</div></article><p>还有更多参数请见：<a href="https://astrobear.top/2021/08/22/Icarus%E6%B6%88%E6%81%AF%E6%A1%86%E6%A8%A1%E6%9D%BF/">《Icarus消息框模板 - Astroblog》</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前有写过使用 Bulma 美化博文的方法，然后才发现原来 Icarus 本身就带了很多标签插件可供直接使用。而官方文档中的横跨文章的提示框、警告框什么的我找遍了文档也没发现作者告诉我了调用的办法，直到今天才看到大佬的一篇文章讲到原来那些本身就是用原生 html 写的。所以写下此篇笔记，方便以后用。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/"/>
    
    <category term="Hexo" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://blocklune.github.io/tags/Hexo/"/>
    
    <category term="Icarus" scheme="http://blocklune.github.io/tags/Icarus/"/>
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>补记一个用 C++ 实现的 2048 小游戏</title>
    <link href="http://blocklune.github.io/posts/10d14c30.html"/>
    <id>http://blocklune.github.io/posts/10d14c30.html</id>
    <published>2022-10-06T04:07:45.000Z</published>
    <updated>2022-10-06T05:28:27.690Z</updated>
    
    <content type="html"><![CDATA[<p>校科协的加入有条件，面试前一步是笔试。免去笔试的方法也不是没有，可以做免试题。看了各个组的免试题，发现都好难好难，只有前端组的 2048 敢去尝试尝试。但我有没怎么学过 JS，便想着先用 C++ 实现一下逻辑，再把代码改过去。</p><span id="more"></span><h2 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h2><p>引用免试题中的原话：</p><blockquote><p>在一个 4 * 4 大小共计 16 个的方格中，初始时会有随机两个方格出现 2 &#x2F; 4 ，每次通过 方向键 控制所有方块向同一个方向运动，两个相同数字的方块撞在一起之后合并成为他们的和，每次操作之后会在空白的方格处随机生成一个 2 或者 4 ，当最终得到一个 2048 的方块时即获得游戏胜利。如果16个格子全部填满并且相邻的格子都不相同也就是无法移动的话，那么 Game Over 。</p></blockquote><p><del>写这篇博客的时候才发现原来还有”当最终得到一个 2048 的方块时即获得游戏胜利”这句话，我并没有实现这个就是说。</del></p><h2 id="c-源代码"><a href="#C-源代码" class="headerlink" title="C++ 源代码"></a>C++ 源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">short</span> box_c[<span class="number">4</span>][<span class="number">4</span>]; <span class="comment">// 运算用 box_content</span></span><br><span class="line"><span class="comment">// short box_s[4][4]; // 显示用 box_show</span></span><br><span class="line"><span class="type">bool</span> map[<span class="number">4</span>][<span class="number">4</span>]; <span class="comment">// 用于表示是否发生过合并</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">([0][0])  ([0][1])  ([0][2])  ([0][3])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">([1][0])  ([1][1])  ([1][2])  ([1][3])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">([2][0])  ([2][1])  ([2][2])  ([2][3])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">([3][0])  ([3][1])  ([3][2])  ([3][3])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRandomNum</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里不能srand，不然就会生成出来都是同一个随机数</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">rand</span>() % (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getTwoOrFour</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getRandomNum</span>(<span class="number">1</span>, <span class="number">2</span>) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateNewNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> possibleI = <span class="built_in">getRandomNum</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> possibleJ = <span class="built_in">getRandomNum</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (box_c[possibleI][possibleJ] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            box_c[possibleI][possibleJ] = <span class="built_in">getTwoOrFour</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空map</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">map_refresh</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            map[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">// 初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化随机数种子</span></span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 初始全部赋值为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">            map[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 随机找两个位置填充2或者4</span></span><br><span class="line">    <span class="comment">/* for (int i = 0; i &lt; 2;)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int possibleI = getRandomNum(0, 3);</span></span><br><span class="line"><span class="comment">        int possibleJ = getRandomNum(0, 3);</span></span><br><span class="line"><span class="comment">        if (box_c[possibleI][possibleJ] == 0)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            i++;</span></span><br><span class="line"><span class="comment">            box_c[possibleI][possibleJ] = getTwoOrFour();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    <span class="comment">// 直接用这个函数生成两个得了</span></span><br><span class="line">    <span class="built_in">generateNewNum</span>();</span><br><span class="line">    <span class="built_in">generateNewNum</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本来想显示运算分离的，后来感觉好像没啥必要</span></span><br><span class="line"><span class="comment">/* void refreshShow()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt; 4; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for (int j = 0; j &lt; 4; j++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            box_s[i][j] = box_c[i][j];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; box_c[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; box_s[i][j] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveUp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (box_c[i - <span class="number">1</span>][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                box_c[i - <span class="number">1</span>][j] = box_c[i][j];</span><br><span class="line">                box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 将下边的全部平移过来</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; <span class="number">3</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    box_c[k][j] = box_c[k + <span class="number">1</span>][j];</span><br><span class="line">                    box_c[k + <span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (box_c[i - <span class="number">1</span>][j] == box_c[i][j] &amp;&amp; map[i - <span class="number">1</span>][j] == <span class="number">0</span> &amp;&amp; map[i][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                box_c[i - <span class="number">1</span>][j] *= <span class="number">2</span>;</span><br><span class="line">                map[i - <span class="number">1</span>][j] = <span class="number">1</span>; <span class="comment">//标识此次合并</span></span><br><span class="line">                box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 将下边的全部平移过来</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; <span class="number">3</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    box_c[k][j] = box_c[k + <span class="number">1</span>][j];</span><br><span class="line">                    box_c[k + <span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">generateNewNum</span>();</span><br><span class="line">    <span class="built_in">map_refresh</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveDown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (box_c[i + <span class="number">1</span>][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                box_c[i + <span class="number">1</span>][j] = box_c[i][j];</span><br><span class="line">                box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 将上边的全部平移过来</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = i; k &gt; <span class="number">0</span>; k--)</span><br><span class="line">                &#123;</span><br><span class="line">                    box_c[k][j] = box_c[k - <span class="number">1</span>][j];</span><br><span class="line">                    box_c[k - <span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (box_c[i + <span class="number">1</span>][j] == box_c[i][j] &amp;&amp; map[i + <span class="number">1</span>][j] == <span class="number">0</span> &amp;&amp; map[i][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                box_c[i + <span class="number">1</span>][j] *= <span class="number">2</span>;</span><br><span class="line">                map[i + <span class="number">1</span>][j] = <span class="number">1</span>; <span class="comment">//标识此次合并</span></span><br><span class="line">                box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 将上边的全部平移过来</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = i; k &gt; <span class="number">0</span>; k--)</span><br><span class="line">                &#123;</span><br><span class="line">                    box_c[k][j] = box_c[k - <span class="number">1</span>][j];</span><br><span class="line">                    box_c[k - <span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">generateNewNum</span>();</span><br><span class="line">    <span class="built_in">map_refresh</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveLeft</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">3</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (box_c[i][j - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                box_c[i][j - <span class="number">1</span>] = box_c[i][j];</span><br><span class="line">                box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 将右边的全部平移过来</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; <span class="number">3</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    box_c[i][k] = box_c[i][k + <span class="number">1</span>];</span><br><span class="line">                    box_c[i][k + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (box_c[i][j - <span class="number">1</span>] == box_c[i][j] &amp;&amp; map[i][j - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; map[i][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                box_c[i][j - <span class="number">1</span>] *= <span class="number">2</span>;</span><br><span class="line">                map[i][j - <span class="number">1</span>] = <span class="number">1</span>; <span class="comment">//标识此次合并</span></span><br><span class="line">                box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 将右边的全部平移过来</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; <span class="number">3</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    box_c[i][k] = box_c[i][k + <span class="number">1</span>];</span><br><span class="line">                    box_c[i][k + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">generateNewNum</span>();</span><br><span class="line">    <span class="built_in">map_refresh</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveRight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (box_c[i][j + <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                box_c[i][j + <span class="number">1</span>] = box_c[i][j];</span><br><span class="line">                box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 将左边的全部平移过来</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &gt; <span class="number">0</span>; k--)</span><br><span class="line">                &#123;</span><br><span class="line">                    box_c[i][k] = box_c[i][k - <span class="number">1</span>];</span><br><span class="line">                    box_c[i][k - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (box_c[i][j + <span class="number">1</span>] == box_c[i][j] &amp;&amp; map[i][j + <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; map[i][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                box_c[i][j + <span class="number">1</span>] *= <span class="number">2</span>;</span><br><span class="line">                map[i][j + <span class="number">1</span>] = <span class="number">1</span>; <span class="comment">//标识此次合并</span></span><br><span class="line">                box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 将右边的全部平移过来</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &gt; <span class="number">0</span>; k--)</span><br><span class="line">                &#123;</span><br><span class="line">                    box_c[i][k] = box_c[i][k - <span class="number">1</span>];</span><br><span class="line">                    box_c[i][k - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">generateNewNum</span>();</span><br><span class="line">    <span class="built_in">map_refresh</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">show</span>();</span><br><span class="line">    <span class="comment">// https://www.runoob.com/w3cnote/c-get-keycode.html</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_kbhit())</span><br><span class="line">        &#123;                      <span class="comment">//如果有按键按下，则_kbhit()函数返回真</span></span><br><span class="line">            <span class="type">int</span> ch = _getch(); <span class="comment">//使用_getch()函数获取按下的键值</span></span><br><span class="line">            <span class="keyword">switch</span> (ch)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">119</span>: <span class="comment">// w</span></span><br><span class="line">                <span class="built_in">moveUp</span>();</span><br><span class="line">                <span class="built_in">show</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">97</span>: <span class="comment">// a</span></span><br><span class="line">                <span class="built_in">moveLeft</span>();</span><br><span class="line">                <span class="built_in">show</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">115</span>: <span class="comment">// s</span></span><br><span class="line">                <span class="built_in">moveDown</span>();</span><br><span class="line">                <span class="built_in">show</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">100</span>: <span class="comment">// d</span></span><br><span class="line">                <span class="built_in">moveRight</span>();</span><br><span class="line">                <span class="built_in">show</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="number">27</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="comment">//当按下ESC时结束</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码阅读与分析"><a href="#代码阅读与分析" class="headerlink" title="代码阅读与分析"></a>代码阅读与分析</h2><h3 id="44-方格的构建"><a href="#4-4-方格的构建" class="headerlink" title="4*4 方格的构建"></a>4*4 方格的构建</h3><p>我创建了 <code>box_c</code> 这个二维数组来构建了下面这样一个棋盘来存放数据。数据值为 0 表示这个格子空着，非零则是对应数字。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">([0][0])  ([0][1])  ([0][2])  ([0][3])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">([1][0])  ([1][1])  ([1][2])  ([1][3])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">([2][0])  ([2][1])  ([2][2])  ([2][3])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">([3][0])  ([3][1])  ([3][2])  ([3][3])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>另外还有 <code>map</code> 这个二维数组，我放到后边说。</p><h3 id="生成新的数字"><a href="#生成新的数字" class="headerlink" title="生成新的数字"></a>生成新的数字</h3><p>因为要在 4*4 的方格内随机生成 2 或者 4，所以首先就先做一个随机数生成器。</p><p>首先引入两个库：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>&lt;cstdlib&gt;</code> 提供了 <code>srand()</code> 和 <code>rand()</code> 函数。</p><p><code>srand()</code> 接受一个用于初始化的随机数”种子”。 一般我们就用当前时间<code>time(0)</code>作为种子。（这就是为什么我们需要引入 <code>&lt;ctime&gt;</code> 这个库。 ）</p><p><code>rand()</code> 函数会产生一个 [0,RAND_MAX]范围内的整数。通过一些算式，我们可以人为构造一些式子来实现生成需求范围内的随机数。下表展示了一些式子。</p><table><thead><tr><th>目标类型及范围</th><th>表达式</th></tr></thead><tbody><tr><td>[0,n) 内的整数</td><td>rand() % n</td></tr><tr><td>[a,b) 内的整数</td><td>(rand() % (b-a)) + a</td></tr><tr><td>[a,b] 内的整数</td><td>(rand() % (b-a+1)) + a</td></tr><tr><td>(a,b] 内的整数</td><td>(rand() % (b-a)) + a + 1</td></tr><tr><td>0～1之间的浮点数</td><td>rand() &#x2F; double(RAND_MAX)</td></tr></tbody></table><p>还有一个通用公式：a + rand() % n。</p><p>其中的 a 是起始值，n 是整数的范围。 </p><article class="message is-danger"><div class="message-body"><p>注意！<code>srand()</code>用于初始化，<strong>只需要初始化一次</strong>。所以，你的获取随机数函数应该长得像这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRandomNum</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">rand</span>() % (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    cout &lt;&lt; <span class="built_in">getRandomNum</span>(<span class="number">1</span>,<span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而不是这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRandomNum</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">rand</span>() % (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">getRandomNum</span>(<span class="number">1</span>,<span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>错误的写法会导致快速生成随机数时每次返回的都是随机数序列的第一个…</strong> （可能是程序运行速度很快种子都是一样的结果）。</p></div></article><p>接着我定义了 <code>getTwoOrFour()</code> 和 <code>generateNewNum()</code> 函数。前者用于随机生成 2&#x2F;4，不必多说。后者用于在 4*4 方格内随机放上一个数字，首先生成行列坐标，如果检查到这个格子空的，可以生成在这，那就生成，结束该函数的运行，否则进行下一次尝试。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getTwoOrFour</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getRandomNum</span>(<span class="number">1</span>, <span class="number">2</span>) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateNewNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> possibleI = <span class="built_in">getRandomNum</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> possibleJ = <span class="built_in">getRandomNum</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (box_c[possibleI][possibleJ] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            box_c[possibleI][possibleJ] = <span class="built_in">getTwoOrFour</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化主要就是两方面：一方面是初始化随机数种子；另一方面是清空棋盘（其实还有清空 map 标记），然后随机找两个位置放上 2 或者 4。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">// 初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化随机数种子</span></span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 初始全部赋值为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">            map[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 随机找两个位置填充2或者4</span></span><br><span class="line">    <span class="built_in">generateNewNum</span>();</span><br><span class="line">    <span class="built_in">generateNewNum</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动与合并"><a href="#移动与合并" class="headerlink" title="移动与合并"></a>移动与合并</h3><article class="message is-danger"><div class="message-body">注意这里的移动与合并算法可能不是最优解，可能比较低效，甚至可能有错误。仅供参考。</div></article><p>移动无非就是上下左右，彼此之间比较类似。这里以向上移动为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveUp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (box_c[i - <span class="number">1</span>][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                box_c[i - <span class="number">1</span>][j] = box_c[i][j];</span><br><span class="line">                box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 将下边的全部平移过来</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; <span class="number">3</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    box_c[k][j] = box_c[k + <span class="number">1</span>][j];</span><br><span class="line">                    box_c[k + <span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (box_c[i - <span class="number">1</span>][j] == box_c[i][j] &amp;&amp; map[i - <span class="number">1</span>][j] == <span class="number">0</span> &amp;&amp; map[i][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                box_c[i - <span class="number">1</span>][j] *= <span class="number">2</span>;</span><br><span class="line">                map[i - <span class="number">1</span>][j] = <span class="number">1</span>; <span class="comment">//标识此次合并</span></span><br><span class="line">                box_c[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 将下边的全部平移过来</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; <span class="number">3</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    box_c[k][j] = box_c[k + <span class="number">1</span>][j];</span><br><span class="line">                    box_c[k + <span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">generateNewNum</span>();</span><br><span class="line">    <span class="built_in">map_refresh</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先因为是向上移动，所以先拆分一下上边的二维数组，拆成四列。第一层 <code>j</code> 的循环就是列的循环。</p><p>在某一列中，我想从下往上考虑：如果上面一个格子是 0 ，那我就把现在这个格子里的数字上移；如果这个位置和上边位置的数一样，我就让上边位置的数乘二，然后下边位置赋0。不断从下往上扫描直到能移动的全部移动，能合并的全部合并。</p><p>但是有个问题是，每次移动各个数字只能发生一次合并！如果这个数字合并过了，那它就不应该再合并了。比如四个2,移动一次应该产生两个4而非1个8。</p><p>所以我创建了一个 <code>map</code> ，用于标识已经发生的合并。并且取消掉了之前的不断的从上到下的扫描，改为了如果发生了一次移动或者合并，即给当前格子进行了赋0操作的话，我就把下边的所有格子往上移动一次。</p><p>总结一下思路：如果以 0,1,2,3 从上往下标识这一列格子。我从 3 往上扫描到 1 ，如果发现当前格子是 0，也即上边格子空着，我就把这个格子开始下边的所有格子往上移动一位；类似的，如果发现上边格子和当前格子可以合并，并且查询 <code>map</code> 发现这两个格子里边的数字在这轮移动中都没有发生过合并，那就合并，并也将下边格子的内容全部往上移动。</p><p>当四列都结束后，便用 <code>generateNewNum()</code> 填充一个新数字，并且清空 <code>map</code> 的状态。</p><h3 id="结束检测"><a href="#结束检测" class="headerlink" title="结束检测"></a>结束检测</h3><p>这个 C++ 代码中这块并没有实现，不过最后的 Web 版本是实现了的。借一下那边的代码讲一下思路吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ifEnd</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;正在检测游戏是否结束！&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                    <span class="comment">// 如果有空位，说明必定可以继续</span></span><br><span class="line">                    <span class="keyword">if</span> (box_c[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;检测到游戏仍然有空位，游戏继续！&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 为0则说明没有空位了</span></span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;检测到游戏没有空位了，下面检测是否有可合并方块！&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> flag2 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((box_c[i][j] == box_c[i][j + <span class="number">1</span>]) || (box_c[i][j] == box_c[i + <span class="number">1</span>][j])) &#123;</span><br><span class="line">                            flag2 = <span class="number">1</span>;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;检测到可合并方块，游戏继续！&quot;</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (flag2 == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 最后一列单独检测</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (box_c[i][<span class="number">3</span>] == box_c[i + <span class="number">1</span>][<span class="number">3</span>]) &#123;</span><br><span class="line">                        flag2 = <span class="number">1</span>;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;检测到可合并方块，游戏继续！&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 最后一行单独检测</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (box_c[<span class="number">3</span>][j] == box_c[<span class="number">3</span>][j + <span class="number">1</span>]) &#123;</span><br><span class="line">                        flag2 = <span class="number">1</span>;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;检测到可合并方块，游戏继续！&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag2 == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;检测到游戏无空位且无法继续移动，游戏结束！&quot;</span>);</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;游戏结束，即将重新开始！&#x27;</span>);</span><br><span class="line">                    location.<span class="title function_">reload</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>游戏结束的标志是两个：一是没有空格子了，二是任意相邻格子没有相同数字不可能发生合并了。</p><p>所以首先就是扫描所有格子看看有没有空格子。如果没有格子，就开始扫描相邻格子是否有相同数字。我的扫描方法是从(0,0)到(2,2)都只检测它的右方和下方是否与它相同，然后再单独检测一下最右边一列前三个元素的下一个和最下边一行前三个元素的右边一个是否与它们自己相同。如果也没有相同的了，那就 Game Over 。</p><h3 id="获取键盘输入"><a href="#获取键盘输入" class="headerlink" title="获取键盘输入"></a>获取键盘输入</h3><p>直接看参考资料《C&#x2F;C++ 获取键盘事件》吧…</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/xiaokang01/p/9786751.html">《C++产生随机数》</a><br><a href="https://www.runoob.com/w3cnote/c-get-keycode.html">《C&#x2F;C++ 获取键盘事件》</a><br>… …</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;校科协的加入有条件，面试前一步是笔试。免去笔试的方法也不是没有，可以做免试题。看了各个组的免试题，发现都好难好难，只有前端组的 2048 敢去尝试尝试。但我有没怎么学过 JS，便想着先用 C++ 实现一下逻辑，再把代码改过去。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="游戏" scheme="http://blocklune.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="随机数生成器" scheme="http://blocklune.github.io/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中 cin 与 cout 的转进制输入输出</title>
    <link href="http://blocklune.github.io/posts/9e863176.html"/>
    <id>http://blocklune.github.io/posts/9e863176.html</id>
    <published>2022-09-29T09:30:25.000Z</published>
    <updated>2022-09-29T09:44:17.698Z</updated>
    
    <content type="html"><![CDATA[<p>笔者的朋友有道输入八进制输出十进制的题目，他是使用数学方法实现的。笔者隐隐约约记得好像cin和cout有控制输入输出数字进制的方法，查找了一些资料，做一下笔记。</p><span id="more"></span><table><thead><tr><th>进制</th><th>对应缩写</th></tr></thead><tbody><tr><td>二进制</td><td>bin</td></tr><tr><td>八进制</td><td>oct</td></tr><tr><td>十进制</td><td>dec</td></tr><tr><td>十六进制</td><td>hex</td></tr></tbody></table><p>接下来只要在输入&#x2F;输出的时候加上这些缩写就行了。</p><p>比如输入一个八进制数然后以十进制输出它：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> num;</span><br><span class="line">    cin &gt;&gt; oct &gt;&gt; num;</span><br><span class="line">    cout &lt;&lt; dec &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1750</span><br><span class="line">1000</span><br></pre></td></tr></table></figure><p>（”1750”是输入，”1000”是输出）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;笔者的朋友有道输入八进制输出十进制的题目，他是使用数学方法实现的。笔者隐隐约约记得好像cin和cout有控制输入输出数字进制的方法，查找了一些资料，做一下笔记。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>一个用 C++ 实现高精度加法</title>
    <link href="http://blocklune.github.io/posts/ea914ffe.html"/>
    <id>http://blocklune.github.io/posts/ea914ffe.html</id>
    <published>2022-09-19T09:55:10.000Z</published>
    <updated>2022-09-19T10:26:31.128Z</updated>
    
    <content type="html"><![CDATA[<p>很早以前就知道大致的实现高精度加法的思路，也就是模拟列竖式，但是从未自己实现过。前几天在洛谷做题的时候看到了 <a href="https://www.luogu.com.cn/problem/P1009">[NOIP1998 普及组] 阶乘之和</a>这道题，用了 <code>unsigned long long</code> 都无法满足结果的要求，便开始想尝试实现。</p><span id="more"></span><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">betterPlus</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string c = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> mx_size = a.<span class="built_in">length</span>() &gt;= b.<span class="built_in">length</span>() ? a.<span class="built_in">length</span>() : b.<span class="built_in">length</span>();</span><br><span class="line">    c.<span class="built_in">resize</span>(mx_size + <span class="number">1</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="comment">//倒转 a，b，方便后续操作</span></span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//填充上0</span></span><br><span class="line">    a.<span class="built_in">resize</span>(mx_size, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    b.<span class="built_in">resize</span>(mx_size, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="type">bool</span> flag = <span class="number">0</span>; <span class="comment">// flag为真表示需要进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mx_size; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> w = <span class="number">0</span>; <span class="comment">// w为当前位两数之和</span></span><br><span class="line">        <span class="keyword">if</span> (flag)  <span class="comment">//第一次一定为假，这里是第二次往后，如果为真，说明前面一位两数和大于10，需要进位</span></span><br><span class="line">        &#123;</span><br><span class="line">            w = a[i] - <span class="string">&#x27;0&#x27;</span> + b[i] - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>; <span class="comment">// ascii中0为&#x27;null&#x27;,48为字符&#x27;0&#x27;,直接出来的是ascii码，所以要减去&#x27;0&#x27;的ascii</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            w = a[i] - <span class="string">&#x27;0&#x27;</span> + b[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (w &gt;= <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            c[i] = <span class="built_in">char</span>(w - <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            c[i] = <span class="built_in">char</span>(w + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//别忘了处理最后一位</span></span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        c[c.<span class="built_in">length</span>() - <span class="number">1</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //去掉前面多余的0，但最后一位不需要去掉</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt; c.length() - 1; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if (c[i] == &#x27;0&#x27;)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            c[i] = 0;</span></span><br><span class="line"><span class="comment">            continue;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if (c[i] != &#x27;0&#x27;)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">betterPlus</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>输入要求是两个需要求和的数，默认它们是合规的数字。<code>betterPlus(string a, string b)</code>的两个参数<code>a</code>、<code>b</code>代表了想要求和的数，<code>c</code>表示结果。</p><p>笔者采用了倒序的方法，以“个是百千万”的顺序来对应数组下标由小到大。所以开头便用了<code>&lt;algorithm&gt;</code>库中的<code>reverse()</code>函数来将字符串倒序，最后也同样用这个方法将结果弄回正序。这是模拟列竖式思路的主要体现。</p><p>为了动态适应输入数字的位数，首先第10行用了一个<code>a&gt;+b?a:b</code>来找出输入数字中更大位数的那个的位数，又使用了<code>resize()</code>函数来动态调整string的大小。这个函数有两个参数，第一个是<strong>目标大小</strong>，为<strong>必选</strong>参数；第二个是如果要变大，那么<strong>补位的字符是什么</strong>，为<strong>可选</strong>参数。因为是加法，所以结果最多只会比原来输入的两个数中大的一个的位数多一位，所以第11行就直接+1了。</p><p>接下来的这个<code>flag</code>用来标识是否要进位，for循环里边就是一位一位处理的过程，19~45行完成所有位上数字的处理。</p><p>41~59行，本来是用于去掉多余的零的，不过那是在笔者实现之前一版最多支持50位数字时用的，现在动态调整位数之后，这些代码应该也不需要了。现在的支持的最大位数是无符号长整型<code>unsigned long long</code>的最大大小，也就是18446744073709551615。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很早以前就知道大致的实现高精度加法的思路，也就是模拟列竖式，但是从未自己实现过。前几天在洛谷做题的时候看到了 &lt;a href=&quot;https://www.luogu.com.cn/problem/P1009&quot;&gt;[NOIP1998 普及组] 阶乘之和&lt;/a&gt;这道题，用了 &lt;code&gt;unsigned long long&lt;/code&gt; 都无法满足结果的要求，便开始想尝试实现。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
    <category term="算法" scheme="http://blocklune.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 的安装与配置基础 C/C++ 开发环境</title>
    <link href="http://blocklune.github.io/posts/a7a0ce82.html"/>
    <id>http://blocklune.github.io/posts/a7a0ce82.html</id>
    <published>2022-09-17T05:13:18.000Z</published>
    <updated>2022-10-13T12:36:51.846Z</updated>
    
    <content type="html"><![CDATA[<p>笔者以前学习 C++ 的时候，使用的是 DevCpp 。这个软件让我这个初学者比较舒服的点是，我不用太过详细地考虑编译的过程——新建一个 cpp 文件，写一点小程序，按下 F11，程序运行。我不需要管选择编译器啊、配置编译命令啊啥啥的。但是到 VS Code 这边，这都要我自己做了，只能说相当不友好。这里记录一下我配置 VS Code 的 C&#x2F;C++ 环境的完整过程，希望对你有所帮助。</p><span id="more"></span><h2 id="安装-visual-studio-code"><a href="#安装-Visual-Studio-Code" class="headerlink" title="安装 Visual Studio Code"></a>安装 Visual Studio Code</h2><p>打开 <a href="https://code.visualstudio.com/">VS Code 官网</a>，点击 <code>Download for Windows</code> 按钮（其他平台请选择对应平台的安装包，此处以 Windows 平台为例），等待下载完成。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSRlss.png"></p><article class="message is-primary is-small">        <div class="message-header"><p><i class="fa-solid fa-circle-info mr-2"></i>国内 VS Code 下载速度慢的解决方案</p></div>        <div class="message-body">            <p>此方法来自：<a href="https://zhuanlan.zhihu.com/p/112215618">https://zhuanlan.zhihu.com/p/112215618</a></p><p>在你的下载软件处（笔者这里是 IDM，你如果是浏览器下载的就去浏览器的下载管理器里找），找到下载地址。将下载地址中的 <code>az764295.vo.msecnd.net</code> 替换为 <code>vscode.cdn.azure.cn</code>，然后取消原任务，用修改过的下载链接新建一个下载。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSR8Zq.png" alt="修改前"></p>        </div>    </article><!-- <article class="message is-success"><div class="message-header">国内 VS Code 下载速度慢的解决方案</div><div><div class="message-body"><p>此方法来自：<a href="https://zhuanlan.zhihu.com/p/112215618">https://zhuanlan.zhihu.com/p/112215618</a></p><p>在你的下载软件处（笔者这里是IDM，你如果是浏览器下载的就去浏览器的下载管理器里找），找到下载地址。将下载地址中的 <code>az764295.vo.msecnd.net</code> 替换为 <code>vscode.cdn.azure.cn</code>，然后取消原任务，用修改过的下载链接新建一个下载。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSR8Zq.png" alt="修改前"></p></div></article> --><p>打开安装包，一路下一步，直到下面这个界面，按照下边的进行选择，直到安装完毕。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSWzge.png"></p><h2 id="vs-code-设置中文"><a href="#VS-Code-设置中文" class="headerlink" title="VS Code 设置中文"></a>VS Code 设置中文</h2><p>打开 VS Code，点击图示左侧第五个图标或使用快捷键 <code>Ctrl+Shift+X</code> 打开 <code>拓展</code> 页面，搜索：<code>Chinese</code>，找到 <code>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</code> 这个插件，点击 <code>Install</code> 安装，等待安装完成后按照提示点击右下角 <code>Restart</code> 按钮重启 VS Code。<br><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSf1U0.png"><br><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSfJ8U.png"><br><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSftv4.png"></p><h2 id="安装并检查编译器"><a href="#安装并检查编译器" class="headerlink" title="安装并检查编译器"></a>安装并检查编译器</h2><p>DevCpp 安装的时候也帮我们安装好了编译器，但 VS Code 并没有。所以我们还得自己装一个编译器。这里以 Mingw-w64 为例（参考<a href="https://code.visualstudio.com/docs/languages/cpp#_example-install-mingwx64">官方教程</a>）。</p><p>参考 <a href="https://www.msys2.org/#installation">MSYS2 官网</a>下载安装和安装。</p><article class="message is-primary is-small">        <div class="message-header"><p><i class="fa-solid fa-circle-info mr-2"></i>国内 MSYS2 下载速度慢的解决方案</p></div>        <div class="message-body">            <p>在这个按钮上右键，选择<code>复制链接</code>。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xShuRO.png"></p><p>然后前往<a href="https://ghproxy.com/">https://ghproxy.com/</a>这个网站，粘贴上面复制的下载链接，点击下载。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xShGdI.png"></p>        </div>    </article><!-- <article class="message is-success"><div class="message-header">国内 MSYS2 下载速度慢的解决方案</div><div><div class="message-body"><p>在这个按钮上右键，选择<code>复制链接</code>。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xShuRO.png"></p><p>然后前往<a href="https://ghproxy.com/">https://ghproxy.com/</a>这个网站，粘贴上面复制的下载链接，点击下载。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xShGdI.png"></p></div></article> --><p>打开安装包，一路默认下一步。耐心等待（国内网络可以！只要耐心等！）直到出现下面的界面：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xShqfK.png"></p><p>输入下面的命令安装 gcc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S mingw-w64-x86_64-gcc</span><br></pre></td></tr></table></figure><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xS46nH.png" alt="画横线的是需要自己输入的"></p><p>接下来需要添加环境变量。直接搜索 <code>高级系统设置</code>：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xS4bHs.png"></p><p>打开后点击环境变量。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xS4x3T.png"></p><p>添加系统变量。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xS5VC6.png"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xS5J8f.png"></p><p>打开 CMD 检查一下是否成功：<br>输入 <code>gcc -v</code>，如果有结果，就安装成功了。</p><h2 id="cx2fc-扩展的安装"><a href="#C-x2F-C-扩展的安装" class="headerlink" title="C&#x2F;C++ 扩展的安装"></a>C&#x2F;C++ 扩展的安装</h2><p>按照上面的方法打开扩展，首先是几个 C&#x2F;C++ 基础扩展，直接搜索 <code>C++</code>。</p><p>第一个：<code>C/C++</code></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSfhVI.png"></p><p>直接点击安装（笔者这里截图的时候还没重启，如果按照上述步骤已经安装了中文语言包并重启了 Code，这里的 <code>Install</code> 按钮就会变成 <code>安装</code>）。</p><p>第二个：<code>C/C++ Extension Pack</code></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSf7RS.png"></p><p>第三个：<code>C/C++ Compile Run</code></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSfLrj.png"></p><p>这个扩展提供了极其简单的<code>F6</code>一键编译运行功能。</p><h2 id="正常运行测试"><a href="#正常运行测试" class="headerlink" title="正常运行测试"></a>正常运行测试</h2><p>新建一个文件夹，就叫 <code>HelloWorld</code> 吧。打开文件夹，右键，选择 <code>通过 Code 打开</code>。新建一个 <code>HelloWorld.cpp</code>，粘贴下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Ctrl+S</code> 保存，<code>F6</code> 运行，成功输出结果。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xS5oPx.png"></p><h2 id="debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p><strong>2022 年 10 月 6 日更新：</strong></p><p>完成上边的步骤之后，你应该可以正常运行程序了。下面的教程是安装调试器以及通过 <code>C/C++ Runner</code> 让调试等工作变得简单。</p><p>首先再次打开 msys2.exe (默认位置是：C:\msys64\msys2.exe)，类似上边安装 gcc ，输入下边的命令安装 gdb。<br>类似的，还需要输入下面的命令安装 gdb:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S mingw-w64-x86_64-gdb</span><br></pre></td></tr></table></figure><p>然后在 VS Code 中搜索并安装 <code>C/C++ Runner</code> 插件。</p><article class="message is-primary is-small">        <div class="message-header"><p><i class="fa-solid fa-circle-info mr-2"></i>安装 C&#x2F;C++ Runner 插件时其依赖项 CodeLLDB 无法安装的解决方案</p></div>        <div class="message-body">            <p>按照右下角的提示前往<a href="https://objects.githubusercontent.com/github-production-release-asset-2e65be/49407251/b3e44ffa-119e-40be-b3a5-55784942834b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20220917/us-east-1/s3/aws4_request&X-Amz-Date=20220917T044827Z&X-Amz-Expires=300&X-Amz-Signature=d691f5f3cf95080d3764c3fe053165267db7465afac554a2a019857959631880&X-Amz-SignedHeaders=host&actor_id=39331194&key_id=0&repo_id=49407251&response-content-disposition=attachment;%20filename=codelldb-x86_64-windows.vsix&response-content-type=application/octet-stream">这里</a>下载 <code>codelldb-x86_64-windows.vsix</code>文件。</p><p>在 VS Code 中按下 <code>Ctrl + Shift + P</code>，输入 <code>install</code>，选择<code>从VSIX安装...</code>，选择上边下好的文件，等待安装完成。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSTBad.png"></p>        </div>    </article><!-- <article class="message is-success"><div class="message-header">安装 C/C++ Runner 插件时其依赖项 CodeLLDB 无法安装的解决方案</div><div><div class="message-body"><p>按照右下角的提示前往<a href="https://objects.githubusercontent.com/github-production-release-asset-2e65be/49407251/b3e44ffa-119e-40be-b3a5-55784942834b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20220917/us-east-1/s3/aws4_request&X-Amz-Date=20220917T044827Z&X-Amz-Expires=300&X-Amz-Signature=d691f5f3cf95080d3764c3fe053165267db7465afac554a2a019857959631880&X-Amz-SignedHeaders=host&actor_id=39331194&key_id=0&repo_id=49407251&response-content-disposition=attachment;%20filename=codelldb-x86_64-windows.vsix&response-content-type=application/octet-stream">这里</a>下载 <code>codelldb-x86_64-windows.vsix</code>文件。</p><p>在 VS Code 中按下 <code>Ctrl + Shift + P</code>，输入 <code>install</code>，选择<code>从VSIX安装...</code>，选择上边下好的文件，等待安装完成。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSTBad.png"></p></div></article> --><p>安装完成后，左下角点击 <code>Select folder.</code>，选择当前文件夹。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xSTRsS.png"></p><p>然后按下小齿轮进行编译，按下三角形运行，设置好断点按下小虫子进行 Debug。</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/17/xST4aj.png"></p><h2 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h2><p><strong>2022 年 10 月 13 日更新：</strong></p><p>参见我的另一篇文章：<a href="https://blocklune.github.io/posts/ca05bed5.html">《【已解决】VS Code 中文乱码问题》</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/112215618">国内下载 vscode 速度慢问题解决</a></li><li>官方教程：<a href="https://code.visualstudio.com/docs/languages/cpp">C++ programming with Visual Studio Code</a></li><li><a href="https://www.cnblogs.com/zychengzhiit1/p/5776962.html">windows 10 环境下 使用 msys2 + vs code 配置 c++ 的编译环境</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;笔者以前学习 C++ 的时候，使用的是 DevCpp 。这个软件让我这个初学者比较舒服的点是，我不用太过详细地考虑编译的过程——新建一个 cpp 文件，写一点小程序，按下 F11，程序运行。我不需要管选择编译器啊、配置编译命令啊啥啥的。但是到 VS Code 这边，这都要我自己做了，只能说相当不友好。这里记录一下我配置 VS Code 的 C&amp;#x2F;C++ 环境的完整过程，希望对你有所帮助。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/C-C/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="VS Code" scheme="http://blocklune.github.io/tags/VS-Code/"/>
    
    <category term="C/C++" scheme="http://blocklune.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX 公式基础</title>
    <link href="http://blocklune.github.io/posts/848a7d31.html"/>
    <id>http://blocklune.github.io/posts/848a7d31.html</id>
    <published>2022-09-15T06:11:07.000Z</published>
    <updated>2022-09-16T01:53:26.424Z</updated>
    
    <content type="html"><![CDATA[<p>用 LaTeX 写数学公式的时候，总记不住一些写法，故在此记录学习笔记。</p><span id="more"></span><h2 id="常见符号"><a href="#常见符号" class="headerlink" title="常见符号"></a>常见符号</h2><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><p>大小写希腊字母的写法区别就在于 LaTeX 符号的首字母大小写。</p><p>若要使用斜体只要在前面加上 <code>var</code> 前缀，例如 <code>\varGamma</code> 可以用来显示 $\varGamma$ 。</p><table><thead><tr><th>大写字母</th><th>LaTeX 写法</th><th>小写字母</th><th>LaTeX 写法</th></tr></thead><tbody><tr><td>$\Alpha$</td><td>\Alpha</td><td>$\alpha$</td><td>\alpha</td></tr><tr><td>$\Beta$</td><td>\Beta</td><td>$\beta$</td><td>\beta</td></tr><tr><td>$\Gamma$</td><td>\Gamma</td><td>$\gamma$</td><td>\gamma</td></tr><tr><td>$\Delta$</td><td>\Delta</td><td>$\delta$</td><td>\delta</td></tr><tr><td>$\Epsilon$</td><td>\Epsilon</td><td>$\epsilon$</td><td>\epsilon</td></tr><tr><td>$\Zeta$</td><td>\Zeta</td><td>$\zeta$</td><td>\zeta</td></tr><tr><td>$\Eta$</td><td>\Eta</td><td>$\eta$</td><td>\eta</td></tr><tr><td>$\Theta$</td><td>\Theta</td><td>$\theta$</td><td>\theta</td></tr><tr><td>$\Iota$</td><td>\Iota</td><td>$\iota$</td><td>\iota</td></tr><tr><td>$\Kappa$</td><td>\Kappa</td><td>$\kappa$</td><td>\kappa</td></tr><tr><td>$\Lambda$</td><td>\Lambda</td><td>$\lambda$</td><td>\lambda</td></tr><tr><td>$\Mu$</td><td>\Mu</td><td>$\mu$</td><td>\mu</td></tr><tr><td>$\Nu$</td><td>\Nu</td><td>$\nu$</td><td>\nu</td></tr><tr><td>$\Xi$</td><td>\Xi</td><td>$\xi$</td><td>\xi</td></tr><tr><td>$\Omicron$</td><td>\Omicron</td><td>$\omicron$</td><td>\omicron</td></tr><tr><td>$\Pi$</td><td>\Pi</td><td>$\pi$</td><td>\pi</td></tr><tr><td>$\Rho$</td><td>\Rho</td><td>$\rho$</td><td>\rho</td></tr><tr><td>$\Sigma$</td><td>\Sigma</td><td>$\sigma$</td><td>\sigma</td></tr><tr><td>$\Tau$</td><td>\Tau</td><td>$\tau$</td><td>\tau</td></tr><tr><td>$\Upsilon$</td><td>\Upsilon</td><td>$\upsilon$</td><td>\upsilon</td></tr><tr><td>$\Phi$</td><td>\Phi</td><td>$\phi$</td><td>\phi</td></tr><tr><td>$\Chi$</td><td>\Chi</td><td>$\chi$</td><td>\chi</td></tr><tr><td>$\Psi$</td><td>\Psi</td><td>$\psi$</td><td>\psi</td></tr><tr><td>$\Omega$</td><td>\Omega</td><td>$\omega$</td><td>\omega</td></tr></tbody></table><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th>渲染结果</th><th>LaTeX 写法</th><th>记法</th></tr></thead><tbody><tr><td>$\pm$</td><td>\pm</td><td>英文：<strong>P</strong>lus + <strong>M</strong>inus</td></tr><tr><td>$\mp$</td><td>\mp</td><td>英文：<strong>M</strong>inus + <strong>P</strong>lus</td></tr><tr><td>$\times$</td><td>\times</td><td><strong>times</strong> 就有“乘”的意思</td></tr><tr><td>$\div$</td><td>\div</td><td>$6 \div 3&#x3D;2$ 表述为：Six <strong>div</strong>ided by two is three.</td></tr><tr><td>$\geq$</td><td>\geq</td><td>“大于等于”的英文：<strong>g</strong>reater than or <strong>eq</strong>ual to</td></tr><tr><td>$\leq$</td><td>\leq</td><td>“小于等于”的英文：<strong>l</strong>ess than or <strong>eq</strong>ual to</td></tr><tr><td>$\neq$</td><td>\neq</td><td>“不等于”的英文：<strong>n</strong>ot <strong>eq</strong>ual to</td></tr><tr><td>$\approx$</td><td>\approx</td><td>“约等于”的英文：<strong>approx</strong>imately equal to</td></tr><tr><td>$\propto$</td><td>\propto</td><td>“正比于”的英文：be <strong>prop</strong>ortional <strong>to</strong></td></tr></tbody></table><h3 id="圈与点"><a href="#圈与点" class="headerlink" title="圈与点"></a>圈与点</h3><table><thead><tr><th>渲染结果</th><th>LaTeX 写法</th></tr></thead><tbody><tr><td>$\degree$</td><td>\degree</td></tr><tr><td>$\circ$</td><td>\circ</td></tr><tr><td>$\cdot$</td><td>\cdot</td></tr><tr><td>$\cdotp$</td><td>\cdotp</td></tr><tr><td>$\cdots$</td><td>\cdots</td></tr><tr><td>$\ddots$</td><td>\ddots</td></tr><tr><td>$\bullet$</td><td>\bullet</td></tr><tr><td>$\dot{a}$</td><td>\dot{a}</td></tr></tbody></table><h3 id="集合相关"><a href="#集合相关" class="headerlink" title="集合相关"></a>集合相关</h3><table><thead><tr><th>渲染结果</th><th>LaTeX 写法</th></tr></thead><tbody><tr><td>$\in$</td><td>\in</td></tr><tr><td>$\notin$</td><td>\notin</td></tr><tr><td>$\subset$</td><td>\subset</td></tr><tr><td>$\subseteq$</td><td>\subseteq</td></tr><tr><td>$\supset$</td><td>\supset</td></tr><tr><td>$\supseteq$</td><td>\supseteq</td></tr><tr><td>$\cap$</td><td>\cap</td></tr><tr><td>$\cup$</td><td>\cap</td></tr><tr><td>$\complement$</td><td>\complement</td></tr></tbody></table><h2 id="上下标的输入方法"><a href="#上下标的输入方法" class="headerlink" title="上下标的输入方法"></a>上下标的输入方法</h2><p>上标 <code>^</code> ，下标 <code>_</code>，例如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X<span class="built_in">_</span>1 = a<span class="built_in">^</span>2,X<span class="built_in">_</span>2 = b<span class="built_in">^</span>2</span><br></pre></td></tr></table></figure><p>$$<br>X_1 &#x3D; a^2,X_2 &#x3D; b^2<br>$$</p><p>同时上下标，只要连续输入 <code>_</code> 和 <code>^</code> 即可，例如:</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X<span class="built_in">_</span>3<span class="built_in">^</span>2 = 9,X<span class="built_in">_</span>4<span class="built_in">^</span>2 = 16</span><br></pre></td></tr></table></figure><p>$$<br>X_3^2 &#x3D; 9,X_4^2 &#x3D; 16<br>$$</p><p>上下标如果由多字符组成，则需要加上花括号，例如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X<span class="built_in">_</span>&#123;i+j&#125;<span class="built_in">^</span>&#123;k+l&#125;</span><br></pre></td></tr></table></figure><p>$$<br>X_{i+j}^{k+l}<br>$$</p><p>左边的上下标只要写在前面就行了，例如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">^</span>a<span class="built_in">_</span>bX<span class="built_in">^</span>c<span class="built_in">_</span>d</span><br></pre></td></tr></table></figure><p>$$<br>^a_bX^c_d<br>$$</p><p>所以除了通过 <code>\degree</code> 的方法写度数，也可以通过上标的方法达到类似效果：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45<span class="keyword">\degree</span>,90<span class="built_in">^</span>&#123;<span class="keyword">\circ</span>&#125;</span><br></pre></td></tr></table></figure><p>$$<br>45\degree,90^{\circ}<br>$$</p><p>“上升”：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X<span class="built_in">^</span>&#123;X<span class="built_in">^</span>&#123;X<span class="built_in">^</span>&#123;X<span class="built_in">^</span>&#123;X<span class="built_in">^</span>&#123;X&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>$$<br>X^{X^{X^{X^{X^{X}}}}}<br>$$</p><p>”下降“：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X<span class="built_in">_</span>&#123;X<span class="built_in">_</span>&#123;X<span class="built_in">_</span>&#123;X<span class="built_in">_</span>&#123;X<span class="built_in">_</span>&#123;X&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>$$<br>X_{X_{X_{X_{X_{X}}}}}<br>$$</p><h3 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\frac</span>&#123;a&#125;&#123;b&#125;</span><br></pre></td></tr></table></figure><p>$$<br>\frac{a}{b}<br>$$</p><h3 id="根式"><a href="#根式" class="headerlink" title="根式"></a>根式</h3><table><thead><tr><th>渲染结果</th><th>LaTeX 写法</th></tr></thead><tbody><tr><td>$\sqrt{2}$</td><td>\sqrt{2}</td></tr><tr><td>$\sqrt[3]{2}$</td><td>\sqrt[3]{2}</td></tr></tbody></table><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\sqrt</span>[b]&#123;a&#125;</span><br></pre></td></tr></table></figure><p>$$<br>\sqrt[b]{a}<br>$$</p><h2 id="其他常用符号写法"><a href="#其他常用符号写法" class="headerlink" title="其他常用符号写法"></a>其他常用符号写法</h2><table><thead><tr><th>渲染结果</th><th>LaTeX 写法</th><th>记法</th></tr></thead><tbody><tr><td>$\to$</td><td>\to</td><td></td></tr><tr><td>$\infty$</td><td>\infty</td><td>”无穷“的英文：<strong>inf</strong>ini<strong>ty</strong></td></tr><tr><td>$\lim_{x \to 0}$</td><td>\lim_{x \to 0}</td><td></td></tr><tr><td>$\bot$</td><td>\bot</td><td></td></tr><tr><td>$\perp$</td><td>\perp</td><td>”相互垂直“的英文：<strong>perp</strong>endicular to each other</td></tr><tr><td>$\dot{a}$</td><td>\dot{a}</td><td></td></tr><tr><td>$\hat{a}$</td><td>\hat{a}</td><td></td></tr><tr><td>$\bar{a}$</td><td>\bar{a}</td><td></td></tr><tr><td>$\vec{a}$</td><td>\vec{a}</td><td>”向量“的英文：<strong>vec</strong>tor</td></tr><tr><td>$\tilde{a}$</td><td>\tilde{a}</td><td>”波浪号“的英文：<strong>tilde</strong></td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/erciyuan_/article/details/90273268">latex公式语法_ecy_uooki的博客-CSDN博客_latex公式语法</a></li><li><a href="https://blog.csdn.net/bagba/article/details/123608562">latex不等于符号_Bagba的博客-CSDN博客_latex 不等于</a></li><li><a href="https://www.codeleading.com/article/36564801982/">latex补集怎么打 - 代码先锋网 (codeleading.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/262907455">如何用latex编写上标、下标？ - 知乎 (zhihu.com)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;用 LaTeX 写数学公式的时候，总记不住一些写法，故在此记录学习笔记。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LaTeX" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/LaTeX/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LaTeX" scheme="http://blocklune.github.io/tags/LaTeX/"/>
    
    <category term="数学" scheme="http://blocklune.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 在 Icarus 主题下渲染数学公式</title>
    <link href="http://blocklune.github.io/posts/e201bde3.html"/>
    <id>http://blocklune.github.io/posts/e201bde3.html</id>
    <published>2022-09-15T04:16:12.000Z</published>
    <updated>2022-09-17T05:12:40.088Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题的起因是笔者写数学课笔记的时候发现本地使用 Typora 时正常可以渲染的数学公式无法在我的博客上显示。在查找资料的过程中发现 Hexo 默认渲染器不支持 LaTeX。正当我想着是否要换渲染器时，才发现我使用的 Icarus 主题只要稍微设置一下就可以渲染了。</p><span id="more"></span><p>官方文档地址：<a href="http://ppoffice.github.io/hexo-theme-icarus/Plugins/Other/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E5%85%B6%E4%BB%96%E6%8F%92%E4%BB%B6/#MathJax">http://ppoffice.github.io/hexo-theme-icarus/Plugins/Other/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E5%85%B6%E4%BB%96%E6%8F%92%E4%BB%B6/#MathJax</a></p><p>打开 <code>_config.icarus.yml</code> 文件，找到下面这行：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>修改 <code>mathjax</code> 的值为 <code>true</code>，即变成这样：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后在需要渲染数学公式的文档开头添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><p><strong>待解决的问题：</strong></p><p>似乎这样的字符并不全，比如 <code>\Alpha</code> 在网站上被渲染成下面那样，而非 正确的<code>Α</code><br><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxbsIA.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个问题的起因是笔者写数学课笔记的时候发现本地使用 Typora 时正常可以渲染的数学公式无法在我的博客上显示。在查找资料的过程中发现 Hexo 默认渲染器不支持 LaTeX。正当我想着是否要换渲染器时，才发现我使用的 Icarus 主题只要稍微设置一下就可以渲染了。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/"/>
    
    <category term="Hexo" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://blocklune.github.io/tags/Hexo/"/>
    
    <category term="Icarus" scheme="http://blocklune.github.io/tags/Icarus/"/>
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/tags/Web/"/>
    
    <category term="LaTeX" scheme="http://blocklune.github.io/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>大一新生的高数预备知识学习笔记</title>
    <link href="http://blocklune.github.io/posts/33435544.html"/>
    <id>http://blocklune.github.io/posts/33435544.html</id>
    <published>2022-09-15T01:47:52.000Z</published>
    <updated>2022-09-17T05:12:09.590Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是笔者从<a href="https://space.bilibili.com/66607740?spm_id_from=333.337.0.0">宋浩老师</a>处学习高数高数知识的课堂笔记，也加入了一些笔者自己搜到的东西。具体课程你可以看这里：</p><span id="more"></span><div class="bvideo"><a href="//www.bilibili.com/video/BV1YU4y1e7Q9" target="_blank">        <div class="bvideo-box">            <div class="bvideo-cover">                <div class="cover-default"></div>                <div class="bvideo-cover-layer" style="background-image:url(https://pic1.xuehuaimg.com/proxy/http://i1.hdslb.com/bfs/archive/07b97c7a0ab6ccedf5a31e4ae592474833b17893.jpg)">                    <i class="icon-video"></i>                </div>                <span class="duration">00:01:26</span>            </div>            <div class="bvideo-info">                <p class="title">大一新生的高数预备知识简介</p>                <p class="card-status">                    <span class="play-num">                        <i class="fa fa-youtube-play"></i>                        <span>65.1万</span></span>                    <span>                        <i class="fa fa-list-alt"></i>                        <span>271</span></span></p>                <div class="partition">                    <label class="card-label">视频</label>                    <label class="up-label"></label>                    <label class="up-name">宋浩老师官方</label>                </div>                <div class="actions hide"></div>            </div>        </div>    </a></div><h2 id="反三角函数"><a href="#反三角函数" class="headerlink" title="反三角函数"></a>反三角函数</h2><h3 id="yx3darcsinx"><a href="#y-x3D-arcsinX" class="headerlink" title="y&#x3D;arcsinX"></a>y&#x3D;arcsinX</h3><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxa7CV.png"></p><h3 id="yx3darccosx"><a href="#y-x3D-arccosX" class="headerlink" title="y&#x3D;arccosX"></a>y&#x3D;arccosX</h3><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxdQxS.png"></p><h3 id="yx3darctanx"><a href="#y-x3D-arctanX" class="headerlink" title="y&#x3D;arctanX"></a>y&#x3D;arctanX</h3><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxd8bj.png"></p><h3 id="yx3darccotx"><a href="#y-x3D-arccotX" class="headerlink" title="y&#x3D;arccotX"></a>y&#x3D;arccotX</h3><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxdYan.png"></p><h3 id="yx3dsecx"><a href="#y-x3D-secX" class="headerlink" title="y&#x3D;secX"></a>y&#x3D;secX</h3><p>正割是余弦的倒数：<br>$$<br>secX &#x3D; \frac{1}{cosX}<br>$$<br> 定义域：显然$cosX \neq 0$，所以$y&#x3D;secX$的定义域为：$X\neq k\pi +\frac{\pi}{2},k\in Z$</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxwCon.png"></p><h3 id="yx3dcscx"><a href="#y-x3D-cscX" class="headerlink" title="y&#x3D;cscX"></a>y&#x3D;cscX</h3><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxwneJ.png"></p><h3 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h3><p>$$<br>sec^2x&#x3D;1+tan^2x,csc^2x&#x3D;1+cot^2x<br>$$</p><p>可以使用下面的方法进行记忆：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/16/vzBKpt.png"></p><p>六边形的中间是$1$。红色三角形的上边两个角的平方之和等于下边一个的平方，即：<br>$$<br>sin^2x+cos^2x&#x3D;1<br>$$<br>$$<br>tan^2x+1&#x3D;sec^2x<br>$$<br>$$<br>cot^2x+1&#x3D;csc^2x<br>$$</p><h2 id="多项式的除法"><a href="#多项式的除法" class="headerlink" title="多项式的除法"></a>多项式的除法</h2><ul><li>次数高的放前面，低的放后边</li><li>缺项的补出来</li></ul><h3 id="不带余数"><a href="#不带余数" class="headerlink" title="不带余数"></a>不带余数</h3><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vx0m1f.png"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vx0Mng.png"></p><h3 id="带余数"><a href="#带余数" class="headerlink" title="带余数"></a>带余数</h3><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vx0t3V.png"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vx0o4I.png"></p><h2 id="有理分式的拆分"><a href="#有理分式的拆分" class="headerlink" title="有理分式的拆分"></a>有理分式的拆分</h2><h3 id="何为有理分式"><a href="#何为有理分式：" class="headerlink" title="何为有理分式："></a>何为有理分式：</h3><p>有理分式就是一个多项式比一个多项式</p><h3 id="何为有理分式的拆分"><a href="#何为有理分式的拆分：" class="headerlink" title="何为有理分式的拆分："></a>何为有理分式的拆分：</h3><p>将相乘的项变成相加减</p><h3 id="过程"><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxBdRP.png"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxBWR0.png"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxBHo9.png"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxDpee.png"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxDUw4.png" alt="待定系数法例子之一"></p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vxsWRI.png" alt="待定系数法例子之二"></p><h2 id="极坐标"><a href="#极坐标" class="headerlink" title="极坐标"></a>极坐标</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>首先看转动角度，其次看这个点到原点的距离。</p><p>例如：直角坐标系中$(2,2)$点在极坐标系中表示为$(2\sqrt{2},\frac{\pi}{4})$；$(-2,2)$表示为$(2\sqrt{2},\frac{3\pi}{4})$。</p><p>极坐标中的原点叫<code>极点</code>，<code>极轴</code>是从极点向$X$轴正方向引入的一条射线（仅正方向有）。极坐标中的点到极点的距离叫做<code>极径</code>，记作$\rho(\rho\geq0)$（距离肯定是个非负数）；从极轴逆时针转过的角度记作$\theta(0\leq\theta&lt;2\pi)$（但实际上不一定取这个范围）。所以极坐标中一点$P$的坐标记为$P(\rho,\theta)$。</p><p>一般先考虑$\theta$再考虑$\rho$。</p><h3 id="一些常见图像的极坐标表示"><a href="#一些常见图像的极坐标表示" class="headerlink" title="一些常见图像的极坐标表示"></a>一些常见图像的极坐标表示</h3><blockquote><p>括号内范围是默认范围，可写可不写</p></blockquote><h4 id="射线"><a href="#射线" class="headerlink" title="射线"></a>射线</h4><p>例如一条以极点为端点，$\theta&#x3D;45^\circ$的射线表述为：<br>$$<br>\theta &#x3D; 45^\circ(,\rho\geq0)<br>$$</p><h4 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h4><p>例如一个以极点为圆心，$1$为半径的圆表述为：<br>$$<br>(0\leq\theta&lt;2\pi,)\rho&#x3D;1<br>$$</p><h4 id="半圆"><a href="#半圆" class="headerlink" title="半圆"></a>半圆</h4><p>例如一个以极点为圆心，$1$为半径的位于$X$轴上方的半圆表述为：<br>$$<br>0\leq\theta\leq\pi,\rho&#x3D;1<br>$$</p><h4 id="圆面"><a href="#圆面" class="headerlink" title="圆面"></a>圆面</h4><p>例如一个以极点为圆心，$1$为半径的圆面表述为：<br>$$<br>(0\leq\theta&lt;2\pi,)0\leq\rho\leq1<br>$$</p><h4 id="半圆面"><a href="#半圆面" class="headerlink" title="半圆面"></a>半圆面</h4><p>例如一个以极点为圆心，$1$为半径的位于$X$轴上方的半圆面表述为：<br>$$<br>0\leq\theta\leq\pi,0\leq\rho\leq1<br>$$</p><article class="message is-warning"><div class="message-body"><p>又例如这个以$(1,0)$为圆心，$1$为半径的位于$X$轴上方的半圆面表述为：<br>$$<br>0\leq\theta\leq\frac{\pi}{2},0\leq\rho\leq2cos\theta<br>$$</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/16/vzwCNR.png"></p><p>又例如这个：</p><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/16/vzwtbQ.png"></p></div></article><h4 id="圆环"><a href="#圆环" class="headerlink" title="圆环"></a>圆环</h4><p><img src="/img/loading.gif" data-original="https://s1.ax1x.com/2022/09/16/vzdzB4.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章主要是笔者从&lt;a href=&quot;https://space.bilibili.com/66607740?spm_id_from=333.337.0.0&quot;&gt;宋浩老师&lt;/a&gt;处学习高数高数知识的课堂笔记，也加入了一些笔者自己搜到的东西。具体课程你可以看这里：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="http://blocklune.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>手动挡学习笔记</title>
    <link href="http://blocklune.github.io/posts/66959aa9.html"/>
    <id>http://blocklune.github.io/posts/66959aa9.html</id>
    <published>2022-09-10T02:59:13.000Z</published>
    <updated>2022-09-10T04:59:13.596Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天一直在忙着考驾照的事情，8月份第一次考科二挂了后就开始边练科二边练科三。最近两三天先后把科三、第二次科二、科四过了，顺利拿到了C1驾照。但是…学的是手动挡，家里的车却是自动挡。所以想着如果不记一下的话，以后估计开惯了自动挡手动挡就不会了，便想做些笔记。顺便也记录一下笔者自己的学车过程。</p><span id="more"></span><div class="notification is-danger">相关做法仅供参考，有些内容可能也只适用于笔者这边的考试。如有错误敬请各位大佬指出。</div><h2 id="科目一"><a href="#科目一" class="headerlink" title="科目一"></a>科目一</h2><p>就是刷题嘛。笔者本人是把2000道题的题库先完整了一遍，然后又模拟了20+次，所以相当于做了4000多道题吧，结果是98一把过的。笔者一直很担心自己过不了那些扣分&#x2F;罚款题，甚至为此还自己做了个表格把扣分项全部列在了里边。结果实际上并没有用上多少就是了，因为实际考试根本没有那么多难题。<del>可能自己用的软件为了让你冲VIP所以不冲的话给的题目就会比较难吧。</del>笔者也认识一个刷了600道直接过的，还有一个当天下午考结果上午中午刷了1200道直接过的。可能考试的时候抽题目也有点运气成分，和笔者一起去的朋友第二把的难度显然低于第一把，所以第一把80多但第二把就100了。</p><h2 id="科目二"><a href="#科目二" class="headerlink" title="科目二"></a>科目二</h2><p>科二始终是一档就行了，油门也是锁死的，所以只要看离合与刹车两个踏板。核心要点：<strong>速度慢一点</strong>。</p><h3 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a>开始前准备</h3><ol><li>系好安全带</li><li>调整座椅前后位置及高度，以能轻松踩下离合与刹车、能看到引擎盖前部边缘为宜</li><li>调整内外后视镜。左后视镜下边缘差不多与后车轮下边缘重合为宜，右后视镜车身差不多占1&#x2F;3，然后地平线位于上下1&#x2F;2左右。（具体不记得了，笔者自己也有点弄不明白这里，请大佬指点）</li></ol><h3 id="倒车入库"><a href="#倒车入库" class="headerlink" title="倒车入库"></a>倒车入库</h3><p>笔者第一次科二两把都挂在这儿了，都是“倒库不入”。正确的操作如下：</p><ol><li>首先鼻子正对从右往左数第三条虚线左边缘开，直到开到虚线与肩膀对齐。</li><li>挂倒挡，看左后视镜下边缘，差不多与虚线前边缘对齐或间隔几厘米的时候（因人而异），向左打死方向盘。</li><li>往后倒的同时观察左后视镜，三条虚线压住两条半了看车身与库边缘的距离，如果较大（30cm以上？），则保持打死状态继续倒，否则回半圈继续倒。</li><li>主要通过右后视镜观察车身是否正。这时候需要自己微调，反正就车屁股要往左就方向盘往左打，车屁股要往右就往右打。</li><li>车身正了，端平方向盘，看左后视镜，差不多等到左后视镜完全压住黄线了，停车。</li><li>挂前进档，起步。观察左后视镜看到左后轮压到前库线了，向右打死方向盘。车身正，回半圈方向盘继续开直到左侧车门框压到黄虚线。</li><li>挂倒挡，起步。待左后视镜对齐黄线了向右打半圈并开始观察右后视镜。看三条虚线类似上边第3、4点进行调整。</li><li>完全停好，挂前进档，起步。同样观察左后视镜看到左后轮压到前库线了（或者这里也可以稍微提前一点），向左打死。车身正回正。前轮过黄虚线后轮不过。结束倒车入库。</li><li>倒车入库的时间要求是：210s（3.5min）</li></ol><h3 id="坡道定点停车与起步"><a href="#坡道定点停车与起步" class="headerlink" title="坡道定点停车与起步"></a>坡道定点停车与起步</h3><ol><li>上坡前离合要稍微踩下边一点，鼻子对准从右往左数第二第三条虚线中间开（保证左右间距）。开到差不多坡顶前，看前车窗右侧商标距离杆子还有2cm左右时踩离合与刹车停车。</li><li>拉手刹，等3s，松手刹。</li><li>踩住刹车，很缓慢地松离合直到车身抖动或发动机转速表指针往下掉了一下，方向盘稍微往左打一点防止待会压右侧线。松刹车起步。</li><li>坡道定点停车与起步无时间要求。</li></ol><h3 id="直角转弯"><a href="#直角转弯" class="headerlink" title="直角转弯"></a>直角转弯</h3><ol><li>进入右直角转弯区域前需要先左转，所以先向左打死，然后提前做准备打好右转灯。</li><li>进入区域，车身正方向盘回正。等到右边门把手右端点位于黄线前1~2cm时往右打死。</li><li>车身正回正，稍微开两步继续向左打死。（右直角转弯只评判右直角，所以这里左转压线也没事）</li><li>直角转弯无时间要求。</li></ol><h3 id="曲线行驶"><a href="#曲线行驶" class="headerlink" title="曲线行驶"></a>曲线行驶</h3><ol><li>往前看并伸长脖子看引擎盖左边一个凹下出，当凹下处压线后向左打一圈，方向盘微调使凹下处沿着曲线右边线走。</li><li>保持左一圈的动作直到上述凹下处压到曲线左边界，回正，往前开。</li><li>看到雨刮器铆钉旁凹下处右侧2~3cm处与曲线左边界重合后，往右打一圈。然后往前开直到驶出曲线行驶路段。</li><li>曲线行驶无时间要求。</li></ol><h3 id="侧方停车"><a href="#侧方停车" class="headerlink" title="侧方停车"></a>侧方停车</h3><ol><li>首先调整边缘线与车身差不多30cm左右的位置。然后保持车身与右边缘线这个间距平行，注意观察右后视镜，直到右后视镜中出现一个直角（侧方的库的边缘角）。</li><li>挂倒挡，后退直到直角消失迅速向右打死。</li><li>往后的同时低头观察左后视镜，看到两条虚线方向盘迅速回正。然后伸长脖子注意左后轮，压到黄虚线位置后迅速往左打死。</li><li>观察右后视镜，到车身平行入库时踩离合刹车停车。</li><li>保持左打死状态，打左转向灯，换前进档。引擎盖左侧凹下处压左边线后迅速回正。引擎盖一半压黄线时向右打一圈，车身正回正，侧方停车完成。</li><li>侧方停车的时间要求是：从挂倒挡起90s内完成。</li></ol><h2 id="科目三"><a href="#科目三" class="headerlink" title="科目三"></a>科目三</h2><h3 id="起步前准备"><a href="#起步前准备" class="headerlink" title="起步前准备"></a>起步前准备</h3><ol><li>系好安全带</li><li>调整座椅前后位置及高度，以能轻松踩下离合与刹车、能看到引擎盖前部边缘为宜</li><li>调整内外后视镜</li></ol><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>停车时应处于空挡、手刹拉好的状态。想要起步，首先应该踩死离合与刹车。打开左转向灯，等3秒后，观察后方情况。确认安全后挂一档，松手刹，松刹车，缓松离合。等待4s左右完全放掉离合（考试要求6s内），踩油门加速。</p><h3 id="换挡"><a href="#换挡" class="headerlink" title="换挡"></a>换挡</h3><p>首先是各挡位的速度对应：</p><table><thead><tr><th>速度</th><th>挡位</th></tr></thead><tbody><tr><td>10码以下</td><td>一档</td></tr><tr><td>10~20码</td><td>二档</td></tr><tr><td>20~35码</td><td>三档</td></tr><tr><td>35~40码</td><td>四档</td></tr><tr><td>40码以上</td><td>五档</td></tr></tbody></table><p>换档前，首先踩油门到挡位速度的分界线。然后松油门，踩死离合，换挡，松离合，完成换挡操作。考试要求换挡在6s内完成。</p><p>加档必须一档一档加上（比如停车时空挡再起步就只能从一档开始加上去），减档可以跳着减（只要速度挡位匹配）。</p><h3 id="变更车道与超车"><a href="#变更车道与超车" class="headerlink" title="变更车道与超车"></a>变更车道与超车</h3><p>先打转向灯，等待3s后观察后方情况，然后转方向盘进入另一车道。</p><h3 id="十字路口的转向"><a href="#十字路口的转向" class="headerlink" title="十字路口的转向"></a>十字路口的转向</h3><h4 id="右转"><a href="#右转" class="headerlink" title="右转"></a>右转</h4><p>看地上标线，一般是有三个右转向的箭头。从近及远，第一个之前或差不多那时候打右转向灯，第二个的地方减档，紧接着是点踩刹车和左右摇头观察情况。（考试时常规要保持三档20码左右的速度，所以这里减档就是到二档）。彻底完成转向后加速回到三档。右转即走右车道，但要注意不要开到非机动车道上去。</p><h4 id="左转"><a href="#左转" class="headerlink" title="左转"></a>左转</h4><p>类似右转，不过是“左转左车道”。</p><h3 id="掉头"><a href="#掉头" class="headerlink" title="掉头"></a>掉头</h3><p>我考试的情况是左右两车道，并且靠侧边的是非机动车道。所以掉头时要先借右侧辅道。</p><p>首先打右转向灯，然后减二档，等待3s观察右后方情况，确认安全后进入右侧辅道。接着关闭右转灯，打左转灯，等待3s观察<strong>左前方和左后方</strong>的情况，确认安全后往左打死。这中间可以稍微踩点刹车放慢点速度。</p><h3 id="靠边停车"><a href="#靠边停车" class="headerlink" title="靠边停车"></a>靠边停车</h3><p>首先右转向灯，打一档，等3s后观察右后方情况。确认安全后进入右边车道停车。</p><h3 id="减速与停车"><a href="#减速与停车" class="headerlink" title="减速与停车"></a>减速与停车</h3><p>减速就是踩刹车；</p><p>停车要离合刹车一起踩并且离合要踩得更快更早一点点。车停后记得挂空挡。</p><p>考试过程中，除了人行横道，其余地方都可以停车。所以善用它！</p><h3 id="点踩刹车与左右摇头观察"><a href="#点踩刹车与左右摇头观察" class="headerlink" title="点踩刹车与左右摇头观察"></a>点踩刹车与左右摇头观察</h3><p>这点实际开车应该都没人做吧，完全是应付考试了。需要在路口转弯、靠近人行横道、公交车站的地方做这个动作。</p><p>注意点主要是：点踩刹车不用踩太下，碰一下刹车立马抬起就行了。两次点踩刹车不要太连续，不然容易掉档。摇头的时候，幅度要大一点。</p><h3 id="夜间灯光考试"><a href="#夜间灯光考试" class="headerlink" title="夜间灯光考试"></a>夜间灯光考试</h3><h4 id="近光灯"><a href="#近光灯" class="headerlink" title="近光灯"></a>近光灯</h4><ul><li>夜间同方向近距离<strong>跟车</strong>行驶</li><li>夜间在窄桥&#x2F;窄路上与非机动车<strong>会车</strong></li><li>夜间<strong>直行通过路口</strong></li><li>夜间在照明<strong>良好</strong>的道路上行驶</li></ul><h4 id="远光灯"><a href="#远光灯" class="headerlink" title="远光灯"></a>远光灯</h4><ul><li>夜间在没有路灯、照明<strong>不良</strong>的道路上行驶</li></ul><h4 id="远近灯光交替"><a href="#远近灯光交替" class="headerlink" title="远近灯光交替"></a>远近灯光交替</h4><ul><li>夜间通过<strong>急弯&#x2F;坡路&#x2F;拱桥</strong></li><li>夜间通过<strong>没有</strong>交通信号灯的路口</li><li>夜间<strong>超越</strong>前方车辆</li></ul><h4 id="示宽灯双闪"><a href="#示宽灯-双闪" class="headerlink" title="示宽灯+双闪"></a>示宽灯+双闪</h4><ul><li><strong>路边临时停车</strong></li><li>夜间在路口发生交通事故，<strong>妨碍交通难以移动</strong></li></ul><h2 id="科目四"><a href="#科目四" class="headerlink" title="科目四"></a>科目四</h2><p>刷了300道不到去了，大部分都是常识，相对比较好过。</p><h2 id="附笔者教练讲的完整流程及注意点"><a href="#附：笔者教练讲的完整流程及注意点" class="headerlink" title="附：笔者教练讲的完整流程及注意点"></a>附：笔者教练讲的完整流程及注意点</h2><h3 id="科二"><a href="#科二" class="headerlink" title="科二"></a>科二</h3><blockquote><p>【侧方停车】(1)先调整好边缘线30公分左右，再看向右面大反光镜直角出来就停车。(2)开始挂倒挡，倒车看后右反光镜看不见直角。就向右把方向打死。(3)再看左反光镜里后面露出两条虚线把方向回正。(4)然后在看左后轮压虚线向左打死。(5)最后再看大镜车身平行刚进虚线就停。【2】出侧方位，打左转向灯。挂前进挡出库看前面左车头凹巢面挡外框黄线把方向回正。继续向前左车头当一半外面黄线时向右打一圈车身正把它回正。侧方位结束。【3】侧方位规定在挂倒挡开始90秒之内完成。【倒车入库】先看从右边数第三条虚线停在我们车中间与肩膀平行，倒车入库开始两百十秒钟完成。看左反光镜下檐 余肩膀线从合同时 向左打死方向，再看左反光镜库里面第三条虚线挡住一半时把方向回半圈。再看右面反光镜与库线平行，把方向右回正。在看左前反光镜下檐 于库角线刚从合停车。挂前档向右时看两反光镜调整出库大小。左后轮到库角向右打死，车头正回半圈。一直到肩膀停车，挂倒档看左镜子下檐于肩膀线从合向右打半圈打死。右面大反光镜库第三条虚线时一半把方向回半圈。就是等车上与地上黄线平行。把方向全部回正。就等停车看前面左反光镜檐于 库角线停车，出库调整大小左后面库角向左打死。车身正回正前轮到肩膀线。</p></blockquote><h3 id="科三"><a href="#科三" class="headerlink" title="科三"></a>科三</h3><blockquote><p> 1.继续完成考试。先打左转向灯。向左回头观望。确保安全后。踩离合。挂一挡。松手刹。又手推到一点钟的位置。右脚放油门。左脚慢慢抬起离合。车子开始走动一般数四秒。把离合器全部松掉。 (记住 左脚必须在六秒钟之内。完全离合器踏板。超过六秒扣100分，行车过程中。加减档 也必须在。六秒钟内完成)，从松手下到起步 必须十秒钟内起步走哦  2.行车过程中。加速加档。10码以上加二档20码以上加三档35码以上加四档。加档只能一个一个档往上加。不能跳跃加档，减档可以速度与档位匹配时可以越档位减档。3.还有会车动作，准备会车稍微向左一点。不要压中心线。听到电脑语音指定。与机动车会车。向右靠。沿着右边线点行驶。小心右边压线。3到4秒后，电脑语音指定。结束回车。你靠中心随便行驶。会车结束以后。直接踩油门踩35码以上加四档。四挡加上去离合器放掉5秒过后，踩离合直接推三档，四档就完成了。4.超越前方车辆。电脑发出指定，你打左转向灯。向前方数三秒后，向左回头观望。头必须左后90度以上观望。确认安全后，方向稍微向左。行驶到另一个车道。等车辆完全进入另一个车道后，关闭左转向灯。车身直驶回原车道。你打开右转向灯。向前方数三秒后向右回头观望。头必须90度以上。方向稍微向右使上另一个车道，完全进入另一个车道后把转向灯关掉。5.直线行驶。一般的我教听到指令控制好方向油门踩上去。达到40km以上中间会听到我的敲门声松掉油门。。让它自由滑行。方向微调。记住必须直线行驶100米以后。会听到结束直线行驶。滑行自由行驶了，6.遇到路口一般减速减档轻点刹车左右观望。人行横道，公交车站台轻点刹车，左右观望通过。停车放空挡。7.听到适当路口掉头时，借右侧辅道先打右转向灯。减二档。三秒以后回头观望。向右进入辅道记住小心右面压边线。完全进入辅道后启左转向灯，三秒以后。向左回头观望。一把快打死掉头。8.进入对方车道路后，准备停车。打好右转向灯，记住一定要等好电脑指令。请靠边停车。可以换一挡数三秒。右回头观望后往右向右靠。注意停不进去随时随地都可以停车放空挡等， 看前小反光镜与边线30公分以内。踩离合踩刹车。放空挡拉手刹。等电脑成绩合格。才可下车。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近几天一直在忙着考驾照的事情，8月份第一次考科二挂了后就开始边练科二边练科三。最近两三天先后把科三、第二次科二、科四过了，顺利拿到了C1驾照。但是…学的是手动挡，家里的车却是自动挡。所以想着如果不记一下的话，以后估计开惯了自动挡手动挡就不会了，便想做些笔记。顺便也记录一下笔者自己的学车过程。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="车" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%BD%A6/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 插件 hexo-bilibili-card 的使用与修改</title>
    <link href="http://blocklune.github.io/posts/bb53ea7f.html"/>
    <id>http://blocklune.github.io/posts/bb53ea7f.html</id>
    <published>2022-09-02T02:12:09.000Z</published>
    <updated>2022-10-26T06:48:44.730Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Hexo 写博文时，可能需要插入一个视频卡片。我使用的 Icarus 主题提供了 Youtube 的视频卡片，而我更需要的是 Bilibili 的。于是找到了这个插件—— <a href="https://github.com/MaxChang3/hexo-bilibili-card">hexo-bilibili-card</a> 。</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-bilibili-card --save</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在你的 Markdown 文档中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bilicard av/BV %&#125;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p><strong>2022&#x2F;10&#x2F;26 更新：</strong>插件更新了，以下内容行数不对了，作废。</p><p>使用过程中，我对其本身的样式不太满意，便对其 CSS 进行了一定程度的修改。</p><p>打开 <code>&lt;Blog_path&gt;\node_modules\hexo-bilibili-card\source\bilicard.css</code></p><p>注释掉第 90 行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin-top</span>: <span class="number">1px</span>;</span><br></pre></td></tr></table></figure><p>注释掉第 121 行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span>: <span class="number">78px</span>;</span><br></pre></td></tr></table></figure><p>修改第 119 行为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bottom</span>: <span class="number">2px</span>;</span><br></pre></td></tr></table></figure><p>修改第 141~142 行为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">15px</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 Hexo 写博文时，可能需要插入一个视频卡片。我使用的 Icarus 主题提供了 Youtube 的视频卡片，而我更需要的是 Bilibili 的。于是找到了这个插件—— &lt;a href=&quot;https://github.com/MaxChang3/hexo-bilibili-card&quot;&gt;hexo-bilibili-card&lt;/a&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/"/>
    
    <category term="Hexo" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://blocklune.github.io/tags/Hexo/"/>
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/tags/Web/"/>
    
    <category term="Hexo插件" scheme="http://blocklune.github.io/tags/Hexo%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Blender 自学日记（一）：界面与基础操作</title>
    <link href="http://blocklune.github.io/posts/5aa9eb29.html"/>
    <id>http://blocklune.github.io/posts/5aa9eb29.html</id>
    <published>2022-09-02T01:50:38.000Z</published>
    <updated>2022-09-02T02:12:41.277Z</updated>
    
    <content type="html"><![CDATA[<p>该系列是笔者在自学 Blender 的过程中所作的笔记。课程来源是 <a href="https://www.doyoudo.com/">doyoudo</a>。这篇笔记是第一课的学习内容。</p><span id="more"></span><div class="bvideo"><a href="//www.bilibili.com/video/BV1Ng411d7Be" target="_blank">        <div class="bvideo-box">            <div class="bvideo-cover">                <div class="cover-default"></div>                <div class="bvideo-cover-layer" style="background-image:url(https://pic1.xuehuaimg.com/proxy/http://i2.hdslb.com/bfs/archive/bc07ed55b12a6a8bdac972abda7c4fd07be764ae.jpg)">                    <i class="icon-video"></i>                </div>                <span class="duration">00:08:45</span>            </div>            <div class="bvideo-info">                <p class="title">Blender自学日记，新手系统案例课！第一集</p>                <p class="card-status">                    <span class="play-num">                        <i class="fa fa-youtube-play"></i>                        <span>4.4万</span></span>                    <span>                        <i class="fa fa-list-alt"></i>                        <span>84</span></span></p>                <div class="partition">                    <label class="card-label">视频</label>                    <label class="up-label"></label>                    <label class="up-name">doyoudo</label>                </div>                <div class="actions hide"></div>            </div>        </div>    </a></div><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><p>按住 <code>~</code> 同时<code>鼠标选择</code>：快捷切换视图</p><p><code>Ctrl + Alt + Q</code>：切换四视图显示</p><p><code>鼠标中键</code>：旋转视图</p><p><code>Shift + 鼠标中键</code>：移动视图</p><p>右侧网格按钮：切换为 2.5D 创作视图</p><p><code>X</code>：删除元素</p><p><code>Shift + A</code>：新建元素</p><p><code>N</code>：调出常用属性</p><p>锁定摄像机：进入摄像机后可以直接调整视图</p><p><code>G</code>：移动物体</p><p><code>R</code>：旋转物体</p><p><code>S</code>：放大缩小</p><p><code>G/S + X/Y/Z</code>：按照轴向去移动&#x2F;放缩</p><p><code>鼠标右键</code>：取消刚才的这些操作</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;该系列是笔者在自学 Blender 的过程中所作的笔记。课程来源是 &lt;a href=&quot;https://www.doyoudo.com/&quot;&gt;doyoudo&lt;/a&gt;。这篇笔记是第一课的学习内容。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="建模" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%BB%BA%E6%A8%A1/"/>
    
    <category term="Blender" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%BB%BA%E6%A8%A1/Blender/"/>
    
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="建模" scheme="http://blocklune.github.io/tags/%E5%BB%BA%E6%A8%A1/"/>
    
    <category term="Blender" scheme="http://blocklune.github.io/tags/Blender/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 使用 Bulma 美化文章</title>
    <link href="http://blocklune.github.io/posts/14706354.html"/>
    <id>http://blocklune.github.io/posts/14706354.html</id>
    <published>2022-09-01T00:37:28.000Z</published>
    <updated>2022-09-02T05:02:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然笔者已经在博客上安装了 <a href="https://github.com/lxl80/hexo-admonition">hexo-admonition</a> 插件来一定程度上对主体为 Markdown 的文章进行一定样式上的补充，但该插件所能提供的内容确实有限。如果能使用原生的 Html 和 CSS 技术自定义文章某些内容就好了。</p><span id="more"></span><p>搜索资料时看到了这两篇文章：</p><ul><li><a href="https://www.imaegoo.com/2020/icarus-with-bulma/">活用 Bulma 美化 Icarus 文章</a></li><li><a href="https://kuusei.moe/coding/%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/Hexo%E5%92%8CIcarus%E6%8A%98%E8%85%BE/">Hexo和Icarus折腾</a></li></ul><p>现做一些学习笔记。</p><h2 id="在-markdown-文件中插入-html-和-css-内容"><a href="#在-Markdown-文件中插入-Html-和-CSS-内容" class="headerlink" title="在 Markdown 文件中插入 Html 和 CSS 内容"></a>在 Markdown 文件中插入 Html 和 CSS 内容</h2><p>使用下面的 <code>raw</code> 标签:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">//在这里添加一些内容不希望被渲染的内容</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p>可以让我们在 Markdown 文档中添加 Html 内容，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;notification is-info&quot;</span>&gt;</span></span><br><span class="line">这是一段 info</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p>显示为</p><div class="notification is-info">这是一段 info</div><p>而通过 <code>&lt;style type=&quot;text/css&quot;&gt;</code> 和 <code>&lt;/style&gt;</code> 标记，我们又可以在 Html 内容中直接添加 CSS 内容。</p><h2 id="用-bulma-实现的一些常见的玩意儿"><a href="#用-Bulma-实现的一些常见的玩意儿" class="headerlink" title="用 Bulma 实现的一些常见的玩意儿"></a>用 Bulma 实现的一些常见的玩意儿</h2><p>直接看 <a href="https://www.imaegoo.com/2020/icarus-with-bulma/">《活用 Bulma 美化 Icarus 文章》</a>这篇文章吧</p><h2 id="在-vs-code-中预览-bulma-内容"><a href="#在-VS-Code-中预览-Bulma-内容" class="headerlink" title="在 VS Code 中预览 Bulma 内容"></a>在 VS Code 中预览 Bulma 内容</h2><p>首先在 VS Code 中按下 <code>Ctrl + Shift + X</code> 打开扩展页面。安装 <code>Markdown Preview Enhanced</code>。重启你的 VS Code，然后使用 <code>Ctrl + K</code>、<code>V</code> 打开侧边预览。(具体见该插件的<a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/">官方中文文档</a>)</p><p>接着添加 Bulma 的CSS：按下 <code>Ctrl + Shift + P</code>，输入 <code>Markdown Preview Enhanced: Customize CSS</code>，回车。笔者直接使用 <code>@import</code> 进行引入。</p><p>所以只要在上面命令打开的 <code>style.less</code> 开头添加:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css&quot;</span>;</span><br></pre></td></tr></table></figure><p>按下 <code>Ctrl + Shift + P</code>，输入 <code>Markdown Preview Enhanced: Extend Parser</code>，回车。编辑 <code>onWillParseMarkdown</code>。在下边的<strong>这是一个标记</strong>处：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">onWillParseMarkdown</span>: <span class="keyword">function</span>(<span class="params">markdown</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//这是一个标记</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolve</span>(markdown)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">markdown = markdown.<span class="title function_">replace</span>(</span><br><span class="line">  <span class="regexp">/\&#123;% raw %&#125;/g</span>,</span><br><span class="line">  <span class="function">(<span class="params">whole</span>) =&gt;</span>  (<span class="string">``</span>)</span><br><span class="line">)</span><br><span class="line">markdown = markdown.<span class="title function_">replace</span>(</span><br><span class="line">  <span class="regexp">/\&#123;% endraw %&#125;/g</span>,</span><br><span class="line">  <span class="function">(<span class="params">whole</span>) =&gt;</span>  (<span class="string">``</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>现在它看起来应该是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">onWillParseMarkdown</span>: <span class="keyword">function</span> (<span class="params">markdown</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      markdown = markdown.<span class="title function_">replace</span>(</span><br><span class="line">        <span class="regexp">/\&#123;% raw %&#125;/g</span>,</span><br><span class="line">        <span class="function">(<span class="params">whole</span>) =&gt;</span> (<span class="string">``</span>)</span><br><span class="line">      )</span><br><span class="line">      markdown = markdown.<span class="title function_">replace</span>(</span><br><span class="line">        <span class="regexp">/\&#123;% endraw %&#125;/g</span>,</span><br><span class="line">        <span class="function">(<span class="params">whole</span>) =&gt;</span> (<span class="string">``</span>)</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolve</span>(markdown)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="上面的方法存在的问题以及也许可行的解决方案暂未实际解决"><a href="#上面的方法存在的问题以及也许可行的解决方案-暂未实际解决" class="headerlink" title="上面的方法存在的问题以及也许可行的解决方案(暂未实际解决)"></a>上面的方法存在的问题以及也许可行的解决方案(暂未实际解决)</h2><p><code>Markdown Preview Enhanced</code> 替换的时候会将所有的 <code>raw</code> 标签全部替换掉，以至于在渲染源代码部分时，会出现一些错误。但这些错误仅在本地的 VS Code 渲染时发生，在网页上是没有问题的。但还是… 让强迫症很难受。</p><p>现在的需求是，如果 <code>raw</code> 标签位于代码块中，那么渲染时它无需被删除，否则应该被删除。</p><p>笔者的思路是：检测 <code>raw</code> 标签的上下文，如果上文包含了标记为 Html&#x2F;js 的代码块起始标记，下文包含了代码块结束标记，则不进行替换；反之进行替换。</p><p>暂未实际实现。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然笔者已经在博客上安装了 &lt;a href=&quot;https://github.com/lxl80/hexo-admonition&quot;&gt;hexo-admonition&lt;/a&gt; 插件来一定程度上对主体为 Markdown 的文章进行一定样式上的补充，但该插件所能提供的内容确实有限。如果能使用原生的 Html 和 CSS 技术自定义文章某些内容就好了。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/"/>
    
    <category term="Hexo" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://blocklune.github.io/tags/Hexo/"/>
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/tags/Web/"/>
    
    <category term="Bulma" scheme="http://blocklune.github.io/tags/Bulma/"/>
    
    <category term="VS Code" scheme="http://blocklune.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 在 Icarus 主题下更改字体</title>
    <link href="http://blocklune.github.io/posts/2527d7a7.html"/>
    <id>http://blocklune.github.io/posts/2527d7a7.html</id>
    <published>2022-08-30T14:44:26.000Z</published>
    <updated>2022-08-31T05:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在使用Hexo搭建博客的过程中，笔者发现使用<code>hexo s</code>创建的<code>localhost:4000</code>显示的网页上的字体效果与<code>hexo d</code>到github上的网页字体效果不同。遂想统一两者字体，希望通过换字体的方式达到该目的。</p><span id="more"></span><h2 id="选择字体"><a href="#选择字体" class="headerlink" title="选择字体"></a>选择字体</h2><p>英文笔者选择的是<code>JetBrains Mono</code>，中文笔者选择的是<code>Source Han Sans CN VF Blod</code>(思源黑体)。需要注意的是我们不仅要找到某个自己喜欢的字体，还需要找到字体对应的英文名。本文以这两个开源字体为例。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>icarus的字体设置位于<code>&lt;Blog_path&gt;\node_modules\hexo-theme-icarus\include\style</code>下的<code>base.styl</code>中。第9~10行，原来为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$family</span>-sans-serif ?= Ubuntu, Roboto, <span class="string">&#x27;Open Sans&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif</span><br><span class="line"><span class="variable">$family</span>-<span class="selector-tag">code</span> ?= <span class="string">&#x27;Source Code Pro&#x27;</span>, monospace, <span class="string">&#x27;Microsoft YaHei&#x27;</span></span><br></pre></td></tr></table></figure><p>现改为（将所需字体添加在最前面）:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$family</span>-sans-serif ?= <span class="string">&#x27;JetBrains Mono&#x27;</span>, <span class="string">&#x27;Source Han Sans CN VF Blod&#x27;</span>, Ubuntu, Roboto, <span class="string">&#x27;Open Sans&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif</span><br><span class="line"><span class="variable">$family</span>-<span class="selector-tag">code</span> ?= <span class="string">&#x27;JetBrains Mono&#x27;</span>, <span class="string">&#x27;Source Han Sans CN VF Blod&#x27;</span>, <span class="string">&#x27;Source Code Pro&#x27;</span>, monospace, <span class="string">&#x27;Microsoft YaHei&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>起因中的问题莫名其妙消失了… 于是笔者改回了原来的样子。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;在使用Hexo搭建博客的过程中，笔者发现使用&lt;code&gt;hexo s&lt;/code&gt;创建的&lt;code&gt;localhost:4000&lt;/code&gt;显示的网页上的字体效果与&lt;code&gt;hexo d&lt;/code&gt;到github上的网页字体效果不同。遂想统一两者字体，希望通过换字体的方式达到该目的。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/"/>
    
    <category term="Hexo" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://blocklune.github.io/tags/Hexo/"/>
    
    <category term="Icarus" scheme="http://blocklune.github.io/tags/Icarus/"/>
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 插件 hexo-admonition 在 Icarus 主题下的使用与测试</title>
    <link href="http://blocklune.github.io/posts/f81be6d0.html"/>
    <id>http://blocklune.github.io/posts/f81be6d0.html</id>
    <published>2022-08-30T11:12:32.000Z</published>
    <updated>2022-09-10T12:20:14.330Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 博客中的文章是使用 Markdown 来渲染的。虽然原版 Markdown 已经提供了很多样式，但笔者仍觉得有些不够。在翻 Hexo 的官方插件列表时，笔者找到了 hexo-admonition 这个插件来为博文添加更多样式。</p><span id="more"></span><h2 id="插件官方说明"><a href="#插件官方说明" class="headerlink" title="插件官方说明"></a>插件官方说明</h2><p><a href="https://github.com/lxl80/hexo-admonition/blob/master/README.md">https://github.com/lxl80/hexo-admonition/blob/master/README.md</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先使用npm安装该插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-admonition --save</span><br></pre></td></tr></table></figure><p>接着更改你的hexo主题的css。我使用的icarus主题，所以在<code>&lt;blog_path&gt;\node_modules\hexo-theme-icarus\include\style</code>下的<code>article.styl</code>结尾添加了如下内容（因为是<code>.styl</code>而非<code>.css</code>，所以对官方提供的内容使用<a href="http://tools.jb51.net/code/css2less">这个</a>工具进行了转换）:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hexo-admonition</span></span><br><span class="line"><span class="selector-class">.admonition</span> </span><br><span class="line">  <span class="attribute">margin</span> <span class="number">1.5625em</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">padding</span> .<span class="number">6rem</span></span><br><span class="line">  <span class="attribute">overflow</span> hidden</span><br><span class="line">  <span class="attribute">font-size</span> .<span class="number">64rem</span></span><br><span class="line">  <span class="attribute">page-break-inside</span> avoid</span><br><span class="line">  <span class="attribute">border-left</span> .<span class="number">3rem</span> solid <span class="number">#42b983</span></span><br><span class="line">  <span class="attribute">border-radius</span> .<span class="number">3rem</span></span><br><span class="line">  <span class="attribute">box-shadow</span> <span class="number">0</span> <span class="number">0.1rem</span> <span class="number">0.4rem</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">05</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">0.05rem</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">1</span>)</span><br><span class="line">  <span class="attribute">background-color</span> <span class="number">#fafafa</span></span><br><span class="line">  &amp; &gt; <span class="selector-pseudo">:last-child</span> </span><br><span class="line">    <span class="attribute">margin-bottom</span> <span class="number">0</span> <span class="meta">!important</span></span><br><span class="line"><span class="selector-tag">p</span> </span><br><span class="line">  &amp;<span class="selector-class">.admonition-title</span> </span><br><span class="line">    <span class="attribute">position</span> relative</span><br><span class="line">    <span class="attribute">margin</span> -.<span class="number">6rem</span> -.<span class="number">6rem</span> .<span class="number">8em</span> -.<span class="number">6rem</span> <span class="meta">!important</span></span><br><span class="line">    <span class="attribute">padding</span> .<span class="number">4rem</span> .<span class="number">6rem</span> .<span class="number">4rem</span> <span class="number">2.5rem</span></span><br><span class="line">    <span class="attribute">font-weight</span> <span class="number">700</span></span><br><span class="line">    <span class="attribute">background-color</span> <span class="built_in">rgba</span>(<span class="number">66</span>, <span class="number">185</span>, <span class="number">131</span>, .<span class="number">1</span>)</span><br><span class="line"><span class="selector-class">.admonition-title</span> </span><br><span class="line">  <span class="selector-pseudo">&amp;::before</span> </span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">top</span> .<span class="number">9rem</span></span><br><span class="line">    <span class="attribute">left</span> <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">12px</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">12px</span></span><br><span class="line">    <span class="attribute">background-color</span> <span class="number">#42b983</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">    <span class="attribute">content</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">.info&gt;<span class="selector-class">.admonition-title</span>, .todo&gt;<span class="selector-class">.admonition-title</span> </span><br><span class="line">  <span class="attribute">background-color</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">184</span>,<span class="number">212</span>,.<span class="number">1</span>)</span><br><span class="line">.warning&gt;<span class="selector-class">.admonition-title</span>, .attention&gt;<span class="selector-class">.admonition-title</span>, .caution&gt;<span class="selector-class">.admonition-title</span> </span><br><span class="line">  <span class="attribute">background-color</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">145</span>,<span class="number">0</span>,.<span class="number">1</span>)</span><br><span class="line">.failure&gt;<span class="selector-class">.admonition-title</span>, .missing&gt;<span class="selector-class">.admonition-title</span>, .fail&gt;<span class="selector-class">.admonition-title</span>, .error&gt;<span class="selector-class">.admonition-title</span> </span><br><span class="line">  <span class="attribute">background-color</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">82</span>,<span class="number">82</span>,.<span class="number">1</span>)</span><br><span class="line"><span class="selector-class">.admonition</span><span class="selector-class">.info</span>, <span class="selector-class">.admonition</span><span class="selector-class">.todo</span> </span><br><span class="line">  <span class="attribute">border-color</span> <span class="number">#00b8d4</span></span><br><span class="line"><span class="selector-class">.admonition</span><span class="selector-class">.warning</span>, <span class="selector-class">.admonition</span><span class="selector-class">.attention</span>, <span class="selector-class">.admonition</span><span class="selector-class">.caution</span> </span><br><span class="line">  <span class="attribute">border-color</span> <span class="number">#ff9100</span></span><br><span class="line"><span class="selector-class">.admonition</span><span class="selector-class">.failure</span>, <span class="selector-class">.admonition</span><span class="selector-class">.missing</span>, <span class="selector-class">.admonition</span><span class="selector-class">.fail</span>, <span class="selector-class">.admonition</span><span class="selector-class">.error</span> </span><br><span class="line">  <span class="attribute">border-color</span> <span class="number">#ff5252</span></span><br><span class="line">.info&gt;<span class="selector-class">.admonition-title</span><span class="selector-pseudo">::before</span>, .todo&gt;<span class="selector-class">.admonition-title</span><span class="selector-pseudo">::before</span> </span><br><span class="line">  <span class="attribute">background-color</span> <span class="number">#00b8d4</span></span><br><span class="line">  <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">.warning&gt;<span class="selector-class">.admonition-title</span><span class="selector-pseudo">::before</span>, .attention&gt;<span class="selector-class">.admonition-title</span><span class="selector-pseudo">::before</span>, .caution&gt;<span class="selector-class">.admonition-title</span><span class="selector-pseudo">::before</span> </span><br><span class="line">  <span class="attribute">background-color</span> <span class="number">#ff9100</span></span><br><span class="line">  <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">.failure&gt;<span class="selector-class">.admonition-title</span><span class="selector-pseudo">::before</span>,.missing&gt;<span class="selector-class">.admonition-title</span><span class="selector-pseudo">::before</span>,.fail&gt;<span class="selector-class">.admonition-title</span><span class="selector-pseudo">::before</span>,.error&gt;<span class="selector-class">.admonition-title</span><span class="selector-pseudo">::before</span> </span><br><span class="line">  <span class="attribute">background-color</span> <span class="number">#ff5252</span></span><br><span class="line">  <span class="attribute">border-radius</span> <span class="number">50%</span></span><br></pre></td></tr></table></figure><p>后自己微调将第24行由</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span> .<span class="number">9rem</span></span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span> <span class="number">0.6rem</span></span><br></pre></td></tr></table></figure><h2 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!!! &lt;type&gt; &lt;title&gt;</span><br><span class="line">(四个空格)</span><br><span class="line">(**空行结束标记**)</span><br></pre></td></tr></table></figure><p>type支持：</p><ul><li>note</li><li>info, todo</li><li>warning, attention, caution</li><li>error, failure, missing, fail</li></ul><div class="admonition warning"><p class="admonition-title"> “活学活用” </p><p>当<code>&lt;title&gt;</code>未设置时，将会以<code>&lt;type&gt;</code>作为标题如果要设置空标题，应当使用<code>&quot;&quot;</code></p></div><div class="admonition warning"><p class="admonition-title">这非常重要！ </p><p><strong>空行结束标记</strong>不能少！</p></div><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><div class="admonition note"><p>这是一条note</p></div><div class="admonition info"><p>这是一条info</p></div><div class="admonition todo"><p>这是一条todo</p></div><div class="admonition warning"><p>这是一条warning</p></div><div class="admonition attention"><p>这是一条attention</p></div><div class="admonition caution"><p>这是一条caution</p></div><div class="admonition error"><p>这是一条error</p></div><div class="admonition failure"><p>这是一条failure</p></div><div class="admonition missing"><p>这是一条missing</p></div><div class="admonition fail"><p>这是一条fail</p></div><hr><p>2022年9月10日更新：</p><p>发现原来 Icarus 主题本身已经提供了类似功能：<a href="https://ppoffice.github.io/hexo-theme-icarus/uncategorized/%E8%87%AA%E5%AE%9A%E4%B9%89hexo%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/">自定义Hexo标签插件</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Hexo 博客中的文章是使用 Markdown 来渲染的。虽然原版 Markdown 已经提供了很多样式，但笔者仍觉得有些不够。在翻 Hexo 的官方插件列表时，笔者找到了 hexo-admonition 这个插件来为博文添加更多样式。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/"/>
    
    <category term="Hexo" scheme="http://blocklune.github.io/categories/%E5%AD%A6%E4%B9%A0/Web/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://blocklune.github.io/tags/Hexo/"/>
    
    <category term="Icarus" scheme="http://blocklune.github.io/tags/Icarus/"/>
    
    <category term="学习" scheme="http://blocklune.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Web" scheme="http://blocklune.github.io/tags/Web/"/>
    
    <category term="测试" scheme="http://blocklune.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
